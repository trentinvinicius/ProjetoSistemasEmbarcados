
TCC_QUICK_START_TIMER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000570c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000294  20000068  00005774  00020068  2**2
                  ALLOC
  3 .stack        00002004  200002fc  00005a08  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00048dd3  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ef2  00000000  00000000  00068ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008b99  00000000  00000000  0006edae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007e8  00000000  00000000  00077947  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b78  00000000  00000000  0007812f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001eecb  00000000  00000000  00078ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001355d  00000000  00000000  00097b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00091b9f  00000000  00000000  000ab0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c50  00000000  00000000  0013cc70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 23 00 20 a9 2e 00 00 a5 2e 00 00 a5 2e 00 00     .#. ............
	...
      2c:	a5 2e 00 00 00 00 00 00 00 00 00 00 a5 2e 00 00     ................
      3c:	a5 2e 00 00 a5 2e 00 00 31 02 00 00 a5 2e 00 00     ........1.......
      4c:	a5 2e 00 00 a5 2e 00 00 a5 2e 00 00 a5 2e 00 00     ................
      5c:	a5 2e 00 00 a5 2e 00 00 05 13 00 00 15 13 00 00     ................
      6c:	25 13 00 00 35 13 00 00 45 13 00 00 55 13 00 00     %...5...E...U...
      7c:	29 27 00 00 39 27 00 00 49 27 00 00 a5 2e 00 00     )'..9'..I'......
      8c:	a5 2e 00 00 a5 2e 00 00 a5 2e 00 00 a5 2e 00 00     ................
      9c:	d9 0a 00 00 a5 2e 00 00 a5 2e 00 00 a5 2e 00 00     ................
      ac:	a5 2e 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	0000570c 	.word	0x0000570c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	0000570c 	.word	0x0000570c
     10c:	0000570c 	.word	0x0000570c
     110:	00000000 	.word	0x00000000

00000114 <adcConfig>:
struct adc_module adc_instance;
/**
* \fn adcConfig()
* \brief Configura e habilita o modulo do conversor analogico/digital. O conversor e configurado com 12 bits de modo que o valor maximo lido seja 4096.
*/
void adcConfig(){
     114:	b510      	push	{r4, lr}
     116:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc); 
     118:	4668      	mov	r0, sp
     11a:	4b1e      	ldr	r3, [pc, #120]	; (194 <adcConfig+0x80>)
     11c:	4798      	blx	r3
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
     11e:	23f0      	movs	r3, #240	; 0xf0
     120:	051b      	lsls	r3, r3, #20
     122:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     124:	2380      	movs	r3, #128	; 0x80
     126:	009b      	lsls	r3, r3, #2
     128:	466a      	mov	r2, sp
     12a:	8053      	strh	r3, [r2, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
     12c:	3bff      	subs	r3, #255	; 0xff
     12e:	3bff      	subs	r3, #255	; 0xff
     130:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
     132:	2300      	movs	r3, #0
     134:	7313      	strb	r3, [r2, #12]
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
     136:	7113      	strb	r3, [r2, #4]
	config_adc.freerunning     = true;
     138:	2201      	movs	r2, #1
     13a:	4669      	mov	r1, sp
     13c:	750a      	strb	r2, [r1, #20]
	config_adc.left_adjust     = false;
     13e:	466a      	mov	r2, sp
     140:	748b      	strb	r3, [r1, #18]
	adc_init(&adc_instance, ADC, &config_adc);
     142:	4c15      	ldr	r4, [pc, #84]	; (198 <adcConfig+0x84>)
     144:	4915      	ldr	r1, [pc, #84]	; (19c <adcConfig+0x88>)
     146:	0020      	movs	r0, r4
     148:	4b15      	ldr	r3, [pc, #84]	; (1a0 <adcConfig+0x8c>)
     14a:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14c:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     150:	b25b      	sxtb	r3, r3
     152:	2b00      	cmp	r3, #0
     154:	dbfb      	blt.n	14e <adcConfig+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     156:	2180      	movs	r1, #128	; 0x80
     158:	0409      	lsls	r1, r1, #16
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <adcConfig+0x90>)
     15c:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     15e:	230f      	movs	r3, #15
     160:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     162:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     164:	7813      	ldrb	r3, [r2, #0]
     166:	2102      	movs	r1, #2
     168:	430b      	orrs	r3, r1
     16a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     16c:	4b0a      	ldr	r3, [pc, #40]	; (198 <adcConfig+0x84>)
     16e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     170:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     172:	b25b      	sxtb	r3, r3
     174:	2b00      	cmp	r3, #0
     176:	dbfb      	blt.n	170 <adcConfig+0x5c>
     178:	7e53      	ldrb	r3, [r2, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     17a:	b25b      	sxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	dbfb      	blt.n	178 <adcConfig+0x64>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     180:	7b13      	ldrb	r3, [r2, #12]
     182:	2102      	movs	r1, #2
     184:	430b      	orrs	r3, r1
     186:	7313      	strb	r3, [r2, #12]
     188:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     18a:	b25b      	sxtb	r3, r3
     18c:	2b00      	cmp	r3, #0
     18e:	dbfb      	blt.n	188 <adcConfig+0x74>
	adc_enable(&adc_instance);
	
	adc_start_conversion(&adc_instance);
}
     190:	b00c      	add	sp, #48	; 0x30
     192:	bd10      	pop	{r4, pc}
     194:	00000669 	.word	0x00000669
     198:	200001a4 	.word	0x200001a4
     19c:	42004000 	.word	0x42004000
     1a0:	000006b1 	.word	0x000006b1
     1a4:	e000e100 	.word	0xe000e100

000001a8 <read>:
/**
* \fn read()
* \param[out] valor Valor do sensor lido
* \brief Le o sensor LDR conectado
*/
int read(void){
     1a8:	b530      	push	{r4, r5, lr}
     1aa:	b083      	sub	sp, #12
	Adc *const adc_module = module_inst->hw;
     1ac:	4b16      	ldr	r3, [pc, #88]	; (208 <read+0x60>)
     1ae:	6818      	ldr	r0, [r3, #0]
	if (int_flags & ADC_INTFLAG_RESRDY) {
     1b0:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     1b2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     1b4:	2402      	movs	r4, #2
     1b6:	e001      	b.n	1bc <read+0x14>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     1b8:	4211      	tst	r1, r2
     1ba:	d10a      	bne.n	1d2 <read+0x2a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     1bc:	7e03      	ldrb	r3, [r0, #24]
     1be:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     1c0:	000a      	movs	r2, r1
     1c2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     1c4:	421d      	tst	r5, r3
     1c6:	d000      	beq.n	1ca <read+0x22>
		status_flags |= ADC_STATUS_WINDOW;
     1c8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1ca:	421c      	tst	r4, r3
     1cc:	d0f4      	beq.n	1b8 <read+0x10>
		status_flags |= ADC_STATUS_OVERRUN;
     1ce:	432a      	orrs	r2, r5
     1d0:	e7f2      	b.n	1b8 <read+0x10>
     1d2:	7e43      	ldrb	r3, [r0, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     1d4:	b25b      	sxtb	r3, r3
     1d6:	2b00      	cmp	r3, #0
     1d8:	dbfb      	blt.n	1d2 <read+0x2a>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     1da:	8b42      	ldrh	r2, [r0, #26]
     1dc:	ab01      	add	r3, sp, #4
     1de:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     1e0:	2301      	movs	r3, #1
     1e2:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     1e4:	7e02      	ldrb	r2, [r0, #24]
     1e6:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     1e8:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     1ea:	0751      	lsls	r1, r2, #29
     1ec:	d501      	bpl.n	1f2 <read+0x4a>
		status_flags |= ADC_STATUS_WINDOW;
     1ee:	2102      	movs	r1, #2
     1f0:	430b      	orrs	r3, r1
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1f2:	0792      	lsls	r2, r2, #30
     1f4:	d501      	bpl.n	1fa <read+0x52>
		status_flags |= ADC_STATUS_OVERRUN;
     1f6:	2204      	movs	r2, #4
     1f8:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     1fa:	075b      	lsls	r3, r3, #29
     1fc:	d501      	bpl.n	202 <read+0x5a>
	adc_module->INTFLAG.reg = int_flags;
     1fe:	2302      	movs	r3, #2
     200:	7603      	strb	r3, [r0, #24]
	int valor;
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &valor) == STATUS_BUSY);
	return valor;
}
     202:	9801      	ldr	r0, [sp, #4]
     204:	b003      	add	sp, #12
     206:	bd30      	pop	{r4, r5, pc}
     208:	200001a4 	.word	0x200001a4

0000020c <configure_eeprom>:
/**
*\fn configure_eeprom()
* \brief Configura a memoria EEPROM da placa
*/
void configure_eeprom(void)
{
     20c:	b510      	push	{r4, lr}
	enum status_code error_code = eeprom_emulator_init();
     20e:	4b06      	ldr	r3, [pc, #24]	; (228 <configure_eeprom+0x1c>)
     210:	4798      	blx	r3
	if (error_code == STATUS_ERR_NO_MEMORY) {
     212:	2816      	cmp	r0, #22
     214:	d002      	beq.n	21c <configure_eeprom+0x10>
		while (true) {
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
     216:	2800      	cmp	r0, #0
     218:	d101      	bne.n	21e <configure_eeprom+0x12>
		/* Erase the emulated EEPROM memory (assume it is unformatted or irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
		eeprom_emulator_init();
	}
}
     21a:	bd10      	pop	{r4, pc}
     21c:	e7fe      	b.n	21c <configure_eeprom+0x10>
		eeprom_emulator_erase_memory();
     21e:	4b03      	ldr	r3, [pc, #12]	; (22c <configure_eeprom+0x20>)
     220:	4798      	blx	r3
		eeprom_emulator_init();
     222:	4b01      	ldr	r3, [pc, #4]	; (228 <configure_eeprom+0x1c>)
     224:	4798      	blx	r3
}
     226:	e7f8      	b.n	21a <configure_eeprom+0xe>
     228:	00002929 	.word	0x00002929
     22c:	00002a0d 	.word	0x00002a0d

00000230 <SYSCTRL_Handler>:

#if (SAMD || SAMR21)
void SYSCTRL_Handler(void)
{
     230:	b510      	push	{r4, lr}
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
     232:	4b06      	ldr	r3, [pc, #24]	; (24c <SYSCTRL_Handler+0x1c>)
     234:	689b      	ldr	r3, [r3, #8]
     236:	055b      	lsls	r3, r3, #21
     238:	d400      	bmi.n	23c <SYSCTRL_Handler+0xc>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
		eeprom_emulator_commit_page_buffer();
	}
}
     23a:	bd10      	pop	{r4, pc}
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	00d2      	lsls	r2, r2, #3
     240:	4b02      	ldr	r3, [pc, #8]	; (24c <SYSCTRL_Handler+0x1c>)
     242:	609a      	str	r2, [r3, #8]
		eeprom_emulator_commit_page_buffer();
     244:	4b02      	ldr	r3, [pc, #8]	; (250 <SYSCTRL_Handler+0x20>)
     246:	4798      	blx	r3
}
     248:	e7f7      	b.n	23a <SYSCTRL_Handler+0xa>
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	40000800 	.word	0x40000800
     250:	00002c05 	.word	0x00002c05

00000254 <configure_bod>:
#endif
void configure_bod(void)
{
     254:	b500      	push	{lr}
     256:	b083      	sub	sp, #12
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
     258:	2300      	movs	r3, #0
     25a:	466a      	mov	r2, sp
     25c:	8013      	strh	r3, [r2, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
     25e:	8053      	strh	r3, [r2, #2]
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
     260:	3301      	adds	r3, #1
     262:	7193      	strb	r3, [r2, #6]
	conf->run_in_standby = true;
     264:	71d3      	strb	r3, [r2, #7]
#if (SAMD || SAMR21)
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
	config_bod33.action = BOD_ACTION_INTERRUPT;
     266:	330f      	adds	r3, #15
     268:	7113      	strb	r3, [r2, #4]
	config_bod33.level = 48;
     26a:	3320      	adds	r3, #32
     26c:	7153      	strb	r3, [r2, #5]
	bod_set_config(BOD_BOD33, &config_bod33);
     26e:	4669      	mov	r1, sp
     270:	2000      	movs	r0, #0
     272:	4b07      	ldr	r3, [pc, #28]	; (290 <configure_bod+0x3c>)
     274:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <configure_bod+0x40>)
     278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     27a:	2102      	movs	r1, #2
     27c:	430a      	orrs	r2, r1
     27e:	635a      	str	r2, [r3, #52]	; 0x34
	bod_enable(BOD_BOD33);

	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
     280:	2280      	movs	r2, #128	; 0x80
     282:	00d2      	lsls	r2, r2, #3
     284:	605a      	str	r2, [r3, #4]
     286:	4b04      	ldr	r3, [pc, #16]	; (298 <configure_bod+0x44>)
     288:	6019      	str	r1, [r3, #0]
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SYSCTRL);
#endif

}
     28a:	b003      	add	sp, #12
     28c:	bd00      	pop	{pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	00000b99 	.word	0x00000b99
     294:	40000800 	.word	0x40000800
     298:	e000e100 	.word	0xe000e100

0000029c <write_eeprom>:
* \param[in] conteudo Ponteiro que sera escrito na memoria
* \param[in] tamanho Quantidade de bytes que sera escrito
* \brief Funcao para para escrever na memoria EEPROM os valores de PWM e TEMPO
*/
void write_eeprom(uint8_t *conteudo, int tamanho)
{
     29c:	b570      	push	{r4, r5, r6, lr}
     29e:	0006      	movs	r6, r0
	if (offset + tamanho >= 4000)
     2a0:	4b0c      	ldr	r3, [pc, #48]	; (2d4 <write_eeprom+0x38>)
     2a2:	881b      	ldrh	r3, [r3, #0]
     2a4:	185b      	adds	r3, r3, r1
     2a6:	4a0c      	ldr	r2, [pc, #48]	; (2d8 <write_eeprom+0x3c>)
     2a8:	4293      	cmp	r3, r2
     2aa:	dd02      	ble.n	2b2 <write_eeprom+0x16>
	{
		offset = 0;
     2ac:	2200      	movs	r2, #0
     2ae:	4b09      	ldr	r3, [pc, #36]	; (2d4 <write_eeprom+0x38>)
     2b0:	801a      	strh	r2, [r3, #0]
	}

	eeprom_emulator_write_buffer(offset, conteudo, tamanho);
     2b2:	b28c      	uxth	r4, r1
     2b4:	4d07      	ldr	r5, [pc, #28]	; (2d4 <write_eeprom+0x38>)
     2b6:	8828      	ldrh	r0, [r5, #0]
     2b8:	0022      	movs	r2, r4
     2ba:	0031      	movs	r1, r6
     2bc:	4b07      	ldr	r3, [pc, #28]	; (2dc <write_eeprom+0x40>)
     2be:	4798      	blx	r3
	
	offset += tamanho;
     2c0:	8829      	ldrh	r1, [r5, #0]
     2c2:	1864      	adds	r4, r4, r1
     2c4:	802c      	strh	r4, [r5, #0]
	
	enum status_code error =  eeprom_emulator_commit_page_buffer();
     2c6:	4b06      	ldr	r3, [pc, #24]	; (2e0 <write_eeprom+0x44>)
     2c8:	4798      	blx	r3
	while (error != STATUS_OK) {
     2ca:	2800      	cmp	r0, #0
     2cc:	d000      	beq.n	2d0 <write_eeprom+0x34>
     2ce:	e7fe      	b.n	2ce <write_eeprom+0x32>
	}
}
     2d0:	bd70      	pop	{r4, r5, r6, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	20000084 	.word	0x20000084
     2d8:	00000f9f 	.word	0x00000f9f
     2dc:	00002dc9 	.word	0x00002dc9
     2e0:	00002c05 	.word	0x00002c05

000002e4 <read_eeprom>:
* \fn read_eeprom()
* \param[out] res Ponteiro que contem os bytes lidos
* \brief Funcao para para ler a memoria EEPROM
*/
uint8_t * read_eeprom() 
{
     2e4:	b510      	push	{r4, lr}
	res = malloc(offset);
     2e6:	4b09      	ldr	r3, [pc, #36]	; (30c <read_eeprom+0x28>)
     2e8:	881c      	ldrh	r4, [r3, #0]
     2ea:	0020      	movs	r0, r4
     2ec:	4b08      	ldr	r3, [pc, #32]	; (310 <read_eeprom+0x2c>)
     2ee:	4798      	blx	r3
     2f0:	0001      	movs	r1, r0
     2f2:	4b08      	ldr	r3, [pc, #32]	; (314 <read_eeprom+0x30>)
     2f4:	6018      	str	r0, [r3, #0]
	enum status_code a = eeprom_emulator_read_buffer(0, res, offset);
     2f6:	0022      	movs	r2, r4
     2f8:	2000      	movs	r0, #0
     2fa:	4b07      	ldr	r3, [pc, #28]	; (318 <read_eeprom+0x34>)
     2fc:	4798      	blx	r3
	while (a != STATUS_OK){		
     2fe:	2800      	cmp	r0, #0
     300:	d000      	beq.n	304 <read_eeprom+0x20>
     302:	e7fe      	b.n	302 <read_eeprom+0x1e>
	}
	
	return res;
     304:	4b03      	ldr	r3, [pc, #12]	; (314 <read_eeprom+0x30>)
     306:	6818      	ldr	r0, [r3, #0]
}
     308:	bd10      	pop	{r4, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	20000084 	.word	0x20000084
     310:	00004211 	.word	0x00004211
     314:	200001c4 	.word	0x200001c4
     318:	00002b55 	.word	0x00002b55

0000031c <get_offset>:
* \fn get_offset()
* \param[out] valor Quantidade de bytes lidos da memoria
* \brief Funcao que retorna a quantidade de bytes lidos da memoria EEPROM
*/
uint16_t get_offset(){
	res = NULL;
     31c:	2200      	movs	r2, #0
     31e:	4b03      	ldr	r3, [pc, #12]	; (32c <get_offset+0x10>)
     320:	601a      	str	r2, [r3, #0]
	uint16_t valor = offset;
     322:	4b03      	ldr	r3, [pc, #12]	; (330 <get_offset+0x14>)
     324:	8818      	ldrh	r0, [r3, #0]
	offset = 0;
     326:	801a      	strh	r2, [r3, #0]
	return valor;
}
     328:	4770      	bx	lr
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	200001c4 	.word	0x200001c4
     330:	20000084 	.word	0x20000084

00000334 <configure_pwm>:
/**
* \fn configure_pwm()
* \brief Funcao para configurar o modulo tcc responsavel pelo PWM. O periodo do PWM e definido como sendo o valor maximo lido pelo sensor LDR (4096) e o duty-cycle e o valor atual
*/
void configure_pwm(void)
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC1);
     338:	4e11      	ldr	r6, [pc, #68]	; (380 <configure_pwm+0x4c>)
     33a:	ac01      	add	r4, sp, #4
     33c:	0031      	movs	r1, r6
     33e:	0020      	movs	r0, r4
     340:	4b10      	ldr	r3, [pc, #64]	; (384 <configure_pwm+0x50>)
     342:	4798      	blx	r3
	config_tcc.counter.period = 4096;			//periodo do pwm, definido como sendo o valor maximo lido pelo sensor LDR
     344:	2380      	movs	r3, #128	; 0x80
     346:	015b      	lsls	r3, r3, #5
     348:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     34a:	2202      	movs	r2, #2
     34c:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[0] = 4096;			//duty cycle do pwm = valor lido pelo sensor ldr
     34e:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[0] = true;
     350:	3a01      	subs	r2, #1
     352:	2398      	movs	r3, #152	; 0x98
     354:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
     356:	3b92      	subs	r3, #146	; 0x92
     358:	65a3      	str	r3, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
     35a:	3b02      	subs	r3, #2
     35c:	67a3      	str	r3, [r4, #120]	; 0x78
	tcc_init(&pwm_instance, TCC1, &config_tcc);
     35e:	4d0a      	ldr	r5, [pc, #40]	; (388 <configure_pwm+0x54>)
     360:	0022      	movs	r2, r4
     362:	0031      	movs	r1, r6
     364:	0028      	movs	r0, r5
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <configure_pwm+0x58>)
     368:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     36a:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     36c:	2102      	movs	r1, #2
     36e:	6893      	ldr	r3, [r2, #8]
     370:	4219      	tst	r1, r3
     372:	d1fc      	bne.n	36e <configure_pwm+0x3a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     374:	6813      	ldr	r3, [r2, #0]
     376:	2102      	movs	r1, #2
     378:	430b      	orrs	r3, r1
     37a:	6013      	str	r3, [r2, #0]
	tcc_enable(&pwm_instance);
}
     37c:	b02a      	add	sp, #168	; 0xa8
     37e:	bd70      	pop	{r4, r5, r6, pc}
     380:	42002400 	.word	0x42002400
     384:	000020b5 	.word	0x000020b5
     388:	200001c8 	.word	0x200001c8
     38c:	00002201 	.word	0x00002201

00000390 <set_pwm_compare_value>:
/**
* \fn set_pwm_compare_value(int32_t valor)
* \param[in] valor Valor lido pelo sensor LDR
*\ brief Altera o valor do duty-cicle do PWM e por consequencia a luminosidade do LED
*/
void set_pwm_compare_value(int32_t valor){
     390:	b510      	push	{r4, lr}
     392:	0002      	movs	r2, r0
	tcc_set_compare_value(&pwm_instance, 0, valor);	
     394:	2100      	movs	r1, #0
     396:	4802      	ldr	r0, [pc, #8]	; (3a0 <set_pwm_compare_value+0x10>)
     398:	4b02      	ldr	r3, [pc, #8]	; (3a4 <set_pwm_compare_value+0x14>)
     39a:	4798      	blx	r3
}
     39c:	bd10      	pop	{r4, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	200001c8 	.word	0x200001c8
     3a4:	00002675 	.word	0x00002675

000003a8 <configure_tcc>:
/**
* \fn configure_tcc()
* \brief Configura e inicializa o modulo tcc. Define que 125000 ciclos do clock equivalem a 1 s.
*/
void configure_tcc(void)
{
     3a8:	b570      	push	{r4, r5, r6, lr}
     3aa:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc_timer;
	tcc_get_config_defaults(&config_tcc_timer, TCC0);
     3ac:	4e0e      	ldr	r6, [pc, #56]	; (3e8 <configure_tcc+0x40>)
     3ae:	ac01      	add	r4, sp, #4
     3b0:	0031      	movs	r1, r6
     3b2:	0020      	movs	r0, r4
     3b4:	4b0d      	ldr	r3, [pc, #52]	; (3ec <configure_tcc+0x44>)
     3b6:	4798      	blx	r3
		
	config_tcc_timer.counter.clock_source = GCLK_GENERATOR_1; //clock = 8000000  system_gclk_chan_get_hz(GCLK_GENERATOR_1)
     3b8:	2301      	movs	r3, #1
     3ba:	72a3      	strb	r3, [r4, #10]
	config_tcc_timer.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64; // divide o clock por 64
     3bc:	3304      	adds	r3, #4
     3be:	72e3      	strb	r3, [r4, #11]
	config_tcc_timer.counter.period =   1250000; //125000 equivale a 1 s
     3c0:	4b0b      	ldr	r3, [pc, #44]	; (3f0 <configure_tcc+0x48>)
     3c2:	6063      	str	r3, [r4, #4]
	
	tcc_init(&tcc_timer, TCC0, &config_tcc_timer);
     3c4:	4d0b      	ldr	r5, [pc, #44]	; (3f4 <configure_tcc+0x4c>)
     3c6:	0022      	movs	r2, r4
     3c8:	0031      	movs	r1, r6
     3ca:	0028      	movs	r0, r5
     3cc:	4b0a      	ldr	r3, [pc, #40]	; (3f8 <configure_tcc+0x50>)
     3ce:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
     3d0:	682a      	ldr	r2, [r5, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     3d2:	2102      	movs	r1, #2
     3d4:	6893      	ldr	r3, [r2, #8]
     3d6:	4219      	tst	r1, r3
     3d8:	d1fc      	bne.n	3d4 <configure_tcc+0x2c>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     3da:	6813      	ldr	r3, [r2, #0]
     3dc:	2102      	movs	r1, #2
     3de:	430b      	orrs	r3, r1
     3e0:	6013      	str	r3, [r2, #0]
	
	tcc_enable(&tcc_timer);
}
     3e2:	b02a      	add	sp, #168	; 0xa8
     3e4:	bd70      	pop	{r4, r5, r6, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	42002000 	.word	0x42002000
     3ec:	000020b5 	.word	0x000020b5
     3f0:	001312d0 	.word	0x001312d0
     3f4:	20000208 	.word	0x20000208
     3f8:	00002201 	.word	0x00002201

000003fc <configure_tcc_callbacks>:
/**
* \fn configure_tcc_callbacks()
* \brief Funcao que define e inicializa a interrupcao gerada quando ocorre overflow do timer
*/
void configure_tcc_callbacks(void)
{
     3fc:	b510      	push	{r4, lr}
	tcc_register_callback(&tcc_timer, tcc_callback_timer, TCC_CALLBACK_OVERFLOW);
     3fe:	4c05      	ldr	r4, [pc, #20]	; (414 <configure_tcc_callbacks+0x18>)
     400:	2200      	movs	r2, #0
     402:	4905      	ldr	r1, [pc, #20]	; (418 <configure_tcc_callbacks+0x1c>)
     404:	0020      	movs	r0, r4
     406:	4b05      	ldr	r3, [pc, #20]	; (41c <configure_tcc_callbacks+0x20>)
     408:	4798      	blx	r3
	tcc_enable_callback(&tcc_timer, TCC_CALLBACK_OVERFLOW);
     40a:	2100      	movs	r1, #0
     40c:	0020      	movs	r0, r4
     40e:	4b04      	ldr	r3, [pc, #16]	; (420 <configure_tcc_callbacks+0x24>)
     410:	4798      	blx	r3
}
     412:	bd10      	pop	{r4, pc}
     414:	20000208 	.word	0x20000208
     418:	00003191 	.word	0x00003191
     41c:	00002685 	.word	0x00002685
     420:	0000269d 	.word	0x0000269d

00000424 <getTime>:
/**
* \fn getTime()
* \brief Funcao que retorna o valor referente a contagem do timer.
*/
int getTime(void)
{
     424:	b510      	push	{r4, lr}
	return tcc_get_count_value(&tcc_timer);
     426:	4802      	ldr	r0, [pc, #8]	; (430 <getTime+0xc>)
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <getTime+0x10>)
     42a:	4798      	blx	r3
}
     42c:	bd10      	pop	{r4, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	20000208 	.word	0x20000208
     434:	0000263d 	.word	0x0000263d

00000438 <setTime>:
* \fn setTime(int tempo)
* \param[in] tempo Valor que sera setado ao timer.
* \brief Funcao que seta um valor ao timer. Utilizada para reinicializar o timer.
*/
void setTime(int tempo)
{
     438:	b510      	push	{r4, lr}
     43a:	0001      	movs	r1, r0
	tcc_set_count_value(&tcc_timer, tempo);
     43c:	4801      	ldr	r0, [pc, #4]	; (444 <setTime+0xc>)
     43e:	4b02      	ldr	r3, [pc, #8]	; (448 <setTime+0x10>)
     440:	4798      	blx	r3
     442:	bd10      	pop	{r4, pc}
     444:	20000208 	.word	0x20000208
     448:	0000260d 	.word	0x0000260d

0000044c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     44c:	b570      	push	{r4, r5, r6, lr}
     44e:	b082      	sub	sp, #8
     450:	0005      	movs	r5, r0
     452:	000e      	movs	r6, r1
	uint16_t temp = 0;
     454:	2200      	movs	r2, #0
     456:	466b      	mov	r3, sp
     458:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     45a:	4c06      	ldr	r4, [pc, #24]	; (474 <usart_serial_getchar+0x28>)
     45c:	466b      	mov	r3, sp
     45e:	1d99      	adds	r1, r3, #6
     460:	0028      	movs	r0, r5
     462:	47a0      	blx	r4
     464:	2800      	cmp	r0, #0
     466:	d1f9      	bne.n	45c <usart_serial_getchar+0x10>

	*c = temp;
     468:	466b      	mov	r3, sp
     46a:	3306      	adds	r3, #6
     46c:	881b      	ldrh	r3, [r3, #0]
     46e:	7033      	strb	r3, [r6, #0]
}
     470:	b002      	add	sp, #8
     472:	bd70      	pop	{r4, r5, r6, pc}
     474:	000016d5 	.word	0x000016d5

00000478 <usart_serial_putchar>:
{
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     47c:	b28c      	uxth	r4, r1
     47e:	4e03      	ldr	r6, [pc, #12]	; (48c <usart_serial_putchar+0x14>)
     480:	0021      	movs	r1, r4
     482:	0028      	movs	r0, r5
     484:	47b0      	blx	r6
     486:	2800      	cmp	r0, #0
     488:	d1fa      	bne.n	480 <usart_serial_putchar+0x8>
}
     48a:	bd70      	pop	{r4, r5, r6, pc}
     48c:	000016a9 	.word	0x000016a9

00000490 <usartConfig>:
/**
* \fn usartConfig()
* \Configura e habilita o modulo USART definindo a baudrate como 9600
* \param[out] &usart_instance Endereco de memoria da instancia da USART configurada
*/
int usartConfig(){
     490:	b570      	push	{r4, r5, r6, lr}
     492:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     494:	2380      	movs	r3, #128	; 0x80
     496:	05db      	lsls	r3, r3, #23
     498:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     49a:	2300      	movs	r3, #0
     49c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     49e:	22ff      	movs	r2, #255	; 0xff
     4a0:	4669      	mov	r1, sp
     4a2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     4a4:	2200      	movs	r2, #0
     4a6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     4a8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     4aa:	2196      	movs	r1, #150	; 0x96
     4ac:	0189      	lsls	r1, r1, #6
     4ae:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     4b0:	2101      	movs	r1, #1
     4b2:	2024      	movs	r0, #36	; 0x24
     4b4:	466c      	mov	r4, sp
     4b6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     4b8:	3001      	adds	r0, #1
     4ba:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     4bc:	3125      	adds	r1, #37	; 0x25
     4be:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     4c0:	3101      	adds	r1, #1
     4c2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     4c4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     4c6:	3105      	adds	r1, #5
     4c8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     4ca:	3101      	adds	r1, #1
     4cc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     4ce:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     4d0:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     4d2:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     4d4:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     4d6:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     4d8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     4da:	2313      	movs	r3, #19
     4dc:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     4de:	7762      	strb	r2, [r4, #29]
	
	struct usart_config usart_conf;
	
	usart_get_config_defaults(&usart_conf);
	usart_conf.baudrate    = 9600;
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     4e0:	2380      	movs	r3, #128	; 0x80
     4e2:	035b      	lsls	r3, r3, #13
     4e4:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     4e6:	4b1e      	ldr	r3, [pc, #120]	; (560 <usartConfig+0xd0>)
     4e8:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     4ea:	4b1e      	ldr	r3, [pc, #120]	; (564 <usartConfig+0xd4>)
     4ec:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     4ee:	2301      	movs	r3, #1
     4f0:	425b      	negs	r3, r3
     4f2:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     4f4:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance,
     4f6:	4d1c      	ldr	r5, [pc, #112]	; (568 <usartConfig+0xd8>)
     4f8:	4c1c      	ldr	r4, [pc, #112]	; (56c <usartConfig+0xdc>)
     4fa:	466a      	mov	r2, sp
     4fc:	491c      	ldr	r1, [pc, #112]	; (570 <usartConfig+0xe0>)
     4fe:	0028      	movs	r0, r5
     500:	47a0      	blx	r4
     502:	2800      	cmp	r0, #0
     504:	d1f9      	bne.n	4fa <usartConfig+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     506:	4c18      	ldr	r4, [pc, #96]	; (568 <usartConfig+0xd8>)
     508:	4b1a      	ldr	r3, [pc, #104]	; (574 <usartConfig+0xe4>)
     50a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     50c:	4a1a      	ldr	r2, [pc, #104]	; (578 <usartConfig+0xe8>)
     50e:	4b1b      	ldr	r3, [pc, #108]	; (57c <usartConfig+0xec>)
     510:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     512:	4a1b      	ldr	r2, [pc, #108]	; (580 <usartConfig+0xf0>)
     514:	4b1b      	ldr	r3, [pc, #108]	; (584 <usartConfig+0xf4>)
     516:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     518:	466a      	mov	r2, sp
     51a:	4915      	ldr	r1, [pc, #84]	; (570 <usartConfig+0xe0>)
     51c:	0020      	movs	r0, r4
     51e:	4b13      	ldr	r3, [pc, #76]	; (56c <usartConfig+0xdc>)
     520:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     522:	4e19      	ldr	r6, [pc, #100]	; (588 <usartConfig+0xf8>)
     524:	6833      	ldr	r3, [r6, #0]
     526:	6898      	ldr	r0, [r3, #8]
     528:	2100      	movs	r1, #0
     52a:	4d18      	ldr	r5, [pc, #96]	; (58c <usartConfig+0xfc>)
     52c:	47a8      	blx	r5
	setbuf(stdin, NULL);
     52e:	6833      	ldr	r3, [r6, #0]
     530:	6858      	ldr	r0, [r3, #4]
     532:	2100      	movs	r1, #0
     534:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     536:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     538:	0028      	movs	r0, r5
     53a:	4b15      	ldr	r3, [pc, #84]	; (590 <usartConfig+0x100>)
     53c:	4798      	blx	r3
     53e:	231f      	movs	r3, #31
     540:	4018      	ands	r0, r3
     542:	3b1e      	subs	r3, #30
     544:	4083      	lsls	r3, r0
     546:	4a13      	ldr	r2, [pc, #76]	; (594 <usartConfig+0x104>)
     548:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     54a:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     54c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     54e:	2b00      	cmp	r3, #0
     550:	d1fc      	bne.n	54c <usartConfig+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     552:	682b      	ldr	r3, [r5, #0]
     554:	2202      	movs	r2, #2
     556:	4313      	orrs	r3, r2
     558:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
	
	usart_enable(&usart_instance);
	return &usart_instance;
}
     55a:	4803      	ldr	r0, [pc, #12]	; (568 <usartConfig+0xd8>)
     55c:	b010      	add	sp, #64	; 0x40
     55e:	bd70      	pop	{r4, r5, r6, pc}
     560:	00160002 	.word	0x00160002
     564:	00170002 	.word	0x00170002
     568:	20000248 	.word	0x20000248
     56c:	00001365 	.word	0x00001365
     570:	42001400 	.word	0x42001400
     574:	200002ac 	.word	0x200002ac
     578:	00000479 	.word	0x00000479
     57c:	200002a8 	.word	0x200002a8
     580:	0000044d 	.word	0x0000044d
     584:	200002a4 	.word	0x200002a4
     588:	20000004 	.word	0x20000004
     58c:	000044c5 	.word	0x000044c5
     590:	000012d5 	.word	0x000012d5
     594:	e000e100 	.word	0xe000e100

00000598 <configure_usart_callbacks>:
/**
* \fn configure_usart_callbacks()
* \brief Funcao que define e inicializa a interrupcao causada pelo recebimento de 5 caracteres pela USART
*/
void configure_usart_callbacks(void)
{
     598:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     59a:	4c06      	ldr	r4, [pc, #24]	; (5b4 <configure_usart_callbacks+0x1c>)
     59c:	2201      	movs	r2, #1
     59e:	4906      	ldr	r1, [pc, #24]	; (5b8 <configure_usart_callbacks+0x20>)
     5a0:	0020      	movs	r0, r4
     5a2:	4b06      	ldr	r3, [pc, #24]	; (5bc <configure_usart_callbacks+0x24>)
     5a4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5a6:	2231      	movs	r2, #49	; 0x31
     5a8:	5ca3      	ldrb	r3, [r4, r2]
     5aa:	2102      	movs	r1, #2
     5ac:	430b      	orrs	r3, r1
     5ae:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
     5b0:	bd10      	pop	{r4, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	20000248 	.word	0x20000248
     5b8:	00003229 	.word	0x00003229
     5bc:	00001795 	.word	0x00001795

000005c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     5c0:	4b0c      	ldr	r3, [pc, #48]	; (5f4 <cpu_irq_enter_critical+0x34>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d106      	bne.n	5d6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5cc:	2b00      	cmp	r3, #0
     5ce:	d007      	beq.n	5e0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     5d0:	2200      	movs	r2, #0
     5d2:	4b09      	ldr	r3, [pc, #36]	; (5f8 <cpu_irq_enter_critical+0x38>)
     5d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5d6:	4a07      	ldr	r2, [pc, #28]	; (5f4 <cpu_irq_enter_critical+0x34>)
     5d8:	6813      	ldr	r3, [r2, #0]
     5da:	3301      	adds	r3, #1
     5dc:	6013      	str	r3, [r2, #0]
}
     5de:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     5e0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     5e6:	2200      	movs	r2, #0
     5e8:	4b04      	ldr	r3, [pc, #16]	; (5fc <cpu_irq_enter_critical+0x3c>)
     5ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     5ec:	3201      	adds	r2, #1
     5ee:	4b02      	ldr	r3, [pc, #8]	; (5f8 <cpu_irq_enter_critical+0x38>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e7f0      	b.n	5d6 <cpu_irq_enter_critical+0x16>
     5f4:	20000088 	.word	0x20000088
     5f8:	2000008c 	.word	0x2000008c
     5fc:	20000000 	.word	0x20000000

00000600 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     600:	4b08      	ldr	r3, [pc, #32]	; (624 <cpu_irq_leave_critical+0x24>)
     602:	681a      	ldr	r2, [r3, #0]
     604:	3a01      	subs	r2, #1
     606:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     608:	681b      	ldr	r3, [r3, #0]
     60a:	2b00      	cmp	r3, #0
     60c:	d109      	bne.n	622 <cpu_irq_leave_critical+0x22>
     60e:	4b06      	ldr	r3, [pc, #24]	; (628 <cpu_irq_leave_critical+0x28>)
     610:	781b      	ldrb	r3, [r3, #0]
     612:	2b00      	cmp	r3, #0
     614:	d005      	beq.n	622 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     616:	2201      	movs	r2, #1
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <cpu_irq_leave_critical+0x2c>)
     61a:	701a      	strb	r2, [r3, #0]
     61c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     620:	b662      	cpsie	i
	}
}
     622:	4770      	bx	lr
     624:	20000088 	.word	0x20000088
     628:	2000008c 	.word	0x2000008c
     62c:	20000000 	.word	0x20000000

00000630 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
     632:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     634:	ac01      	add	r4, sp, #4
     636:	2501      	movs	r5, #1
     638:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     63a:	2700      	movs	r7, #0
     63c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     63e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     640:	0021      	movs	r1, r4
     642:	203e      	movs	r0, #62	; 0x3e
     644:	4e06      	ldr	r6, [pc, #24]	; (660 <system_board_init+0x30>)
     646:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     648:	2280      	movs	r2, #128	; 0x80
     64a:	05d2      	lsls	r2, r2, #23
     64c:	4b05      	ldr	r3, [pc, #20]	; (664 <system_board_init+0x34>)
     64e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     650:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     652:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     654:	0021      	movs	r1, r4
     656:	200f      	movs	r0, #15
     658:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     65a:	b003      	add	sp, #12
     65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	00000efd 	.word	0x00000efd
     664:	41004480 	.word	0x41004480

00000668 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     668:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     66a:	2200      	movs	r2, #0
     66c:	2300      	movs	r3, #0
     66e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     670:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     672:	2100      	movs	r1, #0
     674:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     676:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     678:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     67a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     67c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     67e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     680:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     682:	24c0      	movs	r4, #192	; 0xc0
     684:	0164      	lsls	r4, r4, #5
     686:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     688:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     68a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     68c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     68e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     690:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     692:	242a      	movs	r4, #42	; 0x2a
     694:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     696:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     698:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     69a:	3c06      	subs	r4, #6
     69c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     69e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     6a0:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     6a2:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     6a4:	232b      	movs	r3, #43	; 0x2b
     6a6:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     6a8:	3301      	adds	r3, #1
     6aa:	54c1      	strb	r1, [r0, r3]
}
     6ac:	bd10      	pop	{r4, pc}
	...

000006b0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b2:	46d6      	mov	lr, sl
     6b4:	464f      	mov	r7, r9
     6b6:	4646      	mov	r6, r8
     6b8:	b5c0      	push	{r6, r7, lr}
     6ba:	b096      	sub	sp, #88	; 0x58
     6bc:	0007      	movs	r7, r0
     6be:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     6c0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6c2:	4ac6      	ldr	r2, [pc, #792]	; (9dc <adc_init+0x32c>)
     6c4:	6a10      	ldr	r0, [r2, #32]
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	025b      	lsls	r3, r3, #9
     6ca:	4303      	orrs	r3, r0
     6cc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     6ce:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6d0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     6d2:	07db      	lsls	r3, r3, #31
     6d4:	d505      	bpl.n	6e2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     6d6:	b016      	add	sp, #88	; 0x58
     6d8:	bc1c      	pop	{r2, r3, r4}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6e2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     6e4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6e6:	079b      	lsls	r3, r3, #30
     6e8:	d4f5      	bmi.n	6d6 <adc_init+0x26>
	module_inst->reference = config->reference;
     6ea:	7873      	ldrb	r3, [r6, #1]
     6ec:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     6ee:	2b00      	cmp	r3, #0
     6f0:	d104      	bne.n	6fc <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     6f2:	4abb      	ldr	r2, [pc, #748]	; (9e0 <adc_init+0x330>)
     6f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     6f6:	2104      	movs	r1, #4
     6f8:	430b      	orrs	r3, r1
     6fa:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     6fc:	2300      	movs	r3, #0
     6fe:	60bb      	str	r3, [r7, #8]
     700:	60fb      	str	r3, [r7, #12]
     702:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     704:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     706:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     708:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     70a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     70c:	4bb5      	ldr	r3, [pc, #724]	; (9e4 <adc_init+0x334>)
     70e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     710:	232a      	movs	r3, #42	; 0x2a
     712:	5cf3      	ldrb	r3, [r6, r3]
     714:	2b00      	cmp	r3, #0
     716:	d105      	bne.n	724 <adc_init+0x74>
     718:	7d33      	ldrb	r3, [r6, #20]
     71a:	2b00      	cmp	r3, #0
     71c:	d102      	bne.n	724 <adc_init+0x74>
		module_inst->software_trigger = true;
     71e:	3301      	adds	r3, #1
     720:	777b      	strb	r3, [r7, #29]
     722:	e001      	b.n	728 <adc_init+0x78>
		module_inst->software_trigger = false;
     724:	2300      	movs	r3, #0
     726:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     728:	683b      	ldr	r3, [r7, #0]
     72a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     72c:	7833      	ldrb	r3, [r6, #0]
     72e:	466a      	mov	r2, sp
     730:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     732:	4669      	mov	r1, sp
     734:	201e      	movs	r0, #30
     736:	4bac      	ldr	r3, [pc, #688]	; (9e8 <adc_init+0x338>)
     738:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     73a:	201e      	movs	r0, #30
     73c:	4bab      	ldr	r3, [pc, #684]	; (9ec <adc_init+0x33c>)
     73e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     740:	232c      	movs	r3, #44	; 0x2c
     742:	5cf2      	ldrb	r2, [r6, r3]
     744:	2a00      	cmp	r2, #0
     746:	d054      	beq.n	7f2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     748:	3b01      	subs	r3, #1
     74a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     74c:	7b33      	ldrb	r3, [r6, #12]
     74e:	18eb      	adds	r3, r5, r3
     750:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     752:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     754:	b2c9      	uxtb	r1, r1
     756:	428b      	cmp	r3, r1
     758:	d221      	bcs.n	79e <adc_init+0xee>
     75a:	1952      	adds	r2, r2, r5
     75c:	b2d3      	uxtb	r3, r2
     75e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     760:	4ba3      	ldr	r3, [pc, #652]	; (9f0 <adc_init+0x340>)
     762:	469a      	mov	sl, r3
     764:	e003      	b.n	76e <adc_init+0xbe>
			offset++;
     766:	3501      	adds	r5, #1
     768:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     76a:	454d      	cmp	r5, r9
     76c:	d017      	beq.n	79e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     76e:	240f      	movs	r4, #15
     770:	402c      	ands	r4, r5
     772:	7b33      	ldrb	r3, [r6, #12]
     774:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     776:	2250      	movs	r2, #80	; 0x50
     778:	499e      	ldr	r1, [pc, #632]	; (9f4 <adc_init+0x344>)
     77a:	a802      	add	r0, sp, #8
     77c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     77e:	2c13      	cmp	r4, #19
     780:	d8f1      	bhi.n	766 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     782:	00a4      	lsls	r4, r4, #2
     784:	ab02      	add	r3, sp, #8
     786:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     788:	a901      	add	r1, sp, #4
     78a:	2300      	movs	r3, #0
     78c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     78e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     790:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     792:	3301      	adds	r3, #1
     794:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     796:	b2c0      	uxtb	r0, r0
     798:	4b97      	ldr	r3, [pc, #604]	; (9f8 <adc_init+0x348>)
     79a:	4798      	blx	r3
     79c:	e7e3      	b.n	766 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     79e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     7a0:	2250      	movs	r2, #80	; 0x50
     7a2:	4994      	ldr	r1, [pc, #592]	; (9f4 <adc_init+0x344>)
     7a4:	a802      	add	r0, sp, #8
     7a6:	4b92      	ldr	r3, [pc, #584]	; (9f0 <adc_init+0x340>)
     7a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7aa:	2c13      	cmp	r4, #19
     7ac:	d913      	bls.n	7d6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     7ae:	7d73      	ldrb	r3, [r6, #21]
     7b0:	009b      	lsls	r3, r3, #2
     7b2:	b2db      	uxtb	r3, r3
     7b4:	4642      	mov	r2, r8
     7b6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     7b8:	7db3      	ldrb	r3, [r6, #22]
     7ba:	01db      	lsls	r3, r3, #7
     7bc:	7872      	ldrb	r2, [r6, #1]
     7be:	4313      	orrs	r3, r2
     7c0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     7c2:	4642      	mov	r2, r8
     7c4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     7c6:	7933      	ldrb	r3, [r6, #4]
     7c8:	2b34      	cmp	r3, #52	; 0x34
     7ca:	d900      	bls.n	7ce <adc_init+0x11e>
     7cc:	e17b      	b.n	ac6 <adc_init+0x416>
     7ce:	009b      	lsls	r3, r3, #2
     7d0:	4a8a      	ldr	r2, [pc, #552]	; (9fc <adc_init+0x34c>)
     7d2:	58d3      	ldr	r3, [r2, r3]
     7d4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     7d6:	00a4      	lsls	r4, r4, #2
     7d8:	ab02      	add	r3, sp, #8
     7da:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7dc:	a901      	add	r1, sp, #4
     7de:	2300      	movs	r3, #0
     7e0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     7e2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     7e4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     7e6:	3301      	adds	r3, #1
     7e8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     7ea:	b2c0      	uxtb	r0, r0
     7ec:	4b82      	ldr	r3, [pc, #520]	; (9f8 <adc_init+0x348>)
     7ee:	4798      	blx	r3
     7f0:	e7dd      	b.n	7ae <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     7f2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     7f4:	2250      	movs	r2, #80	; 0x50
     7f6:	497f      	ldr	r1, [pc, #508]	; (9f4 <adc_init+0x344>)
     7f8:	a802      	add	r0, sp, #8
     7fa:	4b7d      	ldr	r3, [pc, #500]	; (9f0 <adc_init+0x340>)
     7fc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7fe:	2c13      	cmp	r4, #19
     800:	d915      	bls.n	82e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     802:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     804:	2250      	movs	r2, #80	; 0x50
     806:	497b      	ldr	r1, [pc, #492]	; (9f4 <adc_init+0x344>)
     808:	a802      	add	r0, sp, #8
     80a:	4b79      	ldr	r3, [pc, #484]	; (9f0 <adc_init+0x340>)
     80c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     80e:	2c13      	cmp	r4, #19
     810:	d8cd      	bhi.n	7ae <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     812:	00a4      	lsls	r4, r4, #2
     814:	ab02      	add	r3, sp, #8
     816:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     818:	a901      	add	r1, sp, #4
     81a:	2300      	movs	r3, #0
     81c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     81e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     820:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     822:	3301      	adds	r3, #1
     824:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     826:	b2c0      	uxtb	r0, r0
     828:	4b73      	ldr	r3, [pc, #460]	; (9f8 <adc_init+0x348>)
     82a:	4798      	blx	r3
     82c:	e7bf      	b.n	7ae <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     82e:	00a4      	lsls	r4, r4, #2
     830:	ab02      	add	r3, sp, #8
     832:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     834:	a901      	add	r1, sp, #4
     836:	2300      	movs	r3, #0
     838:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     83a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     83c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     83e:	3301      	adds	r3, #1
     840:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     842:	b2c0      	uxtb	r0, r0
     844:	4b6c      	ldr	r3, [pc, #432]	; (9f8 <adc_init+0x348>)
     846:	4798      	blx	r3
     848:	e7db      	b.n	802 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     84a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     84c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     84e:	2102      	movs	r1, #2
     850:	e01a      	b.n	888 <adc_init+0x1d8>
		adjres = config->divide_result;
     852:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     854:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     856:	2410      	movs	r4, #16
     858:	e016      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     85a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     85c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     85e:	2101      	movs	r1, #1
     860:	e012      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     862:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     864:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     866:	2100      	movs	r1, #0
     868:	e00e      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     86a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     86c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     86e:	2100      	movs	r1, #0
     870:	e00a      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     872:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     874:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     876:	2100      	movs	r1, #0
     878:	e006      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     87a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     87c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     87e:	2100      	movs	r1, #0
     880:	e002      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     882:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     884:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     886:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     888:	0109      	lsls	r1, r1, #4
     88a:	2270      	movs	r2, #112	; 0x70
     88c:	400a      	ands	r2, r1
     88e:	4313      	orrs	r3, r2
     890:	4642      	mov	r2, r8
     892:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     894:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     896:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     898:	2b3f      	cmp	r3, #63	; 0x3f
     89a:	d900      	bls.n	89e <adc_init+0x1ee>
     89c:	e71b      	b.n	6d6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     89e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     8a0:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     8a4:	b25b      	sxtb	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	dbfb      	blt.n	8a2 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     8aa:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8ac:	8872      	ldrh	r2, [r6, #2]
     8ae:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     8b0:	2224      	movs	r2, #36	; 0x24
     8b2:	5cb2      	ldrb	r2, [r6, r2]
     8b4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8b6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     8b8:	7d32      	ldrb	r2, [r6, #20]
     8ba:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8bc:	4313      	orrs	r3, r2
     8be:	7cb2      	ldrb	r2, [r6, #18]
     8c0:	0052      	lsls	r2, r2, #1
     8c2:	4313      	orrs	r3, r2
     8c4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     8c6:	4642      	mov	r2, r8
     8c8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     8ca:	7e33      	ldrb	r3, [r6, #24]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d020      	beq.n	912 <adc_init+0x262>
		switch (resolution) {
     8d0:	2c10      	cmp	r4, #16
     8d2:	d100      	bne.n	8d6 <adc_init+0x226>
     8d4:	e0d9      	b.n	a8a <adc_init+0x3da>
     8d6:	d800      	bhi.n	8da <adc_init+0x22a>
     8d8:	e098      	b.n	a0c <adc_init+0x35c>
     8da:	2c20      	cmp	r4, #32
     8dc:	d100      	bne.n	8e0 <adc_init+0x230>
     8de:	e0b6      	b.n	a4e <adc_init+0x39e>
     8e0:	2c30      	cmp	r4, #48	; 0x30
     8e2:	d116      	bne.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     8e4:	7cf2      	ldrb	r2, [r6, #19]
     8e6:	2a00      	cmp	r2, #0
     8e8:	d00a      	beq.n	900 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     8ea:	69f2      	ldr	r2, [r6, #28]
     8ec:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     8ee:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8f0:	2aff      	cmp	r2, #255	; 0xff
     8f2:	d900      	bls.n	8f6 <adc_init+0x246>
     8f4:	e6ef      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     8f6:	6a32      	ldr	r2, [r6, #32]
     8f8:	3280      	adds	r2, #128	; 0x80
     8fa:	2aff      	cmp	r2, #255	; 0xff
     8fc:	d900      	bls.n	900 <adc_init+0x250>
     8fe:	e6ea      	b.n	6d6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     900:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     902:	69f2      	ldr	r2, [r6, #28]
     904:	2aff      	cmp	r2, #255	; 0xff
     906:	dd00      	ble.n	90a <adc_init+0x25a>
     908:	e6e5      	b.n	6d6 <adc_init+0x26>
     90a:	6a32      	ldr	r2, [r6, #32]
     90c:	2aff      	cmp	r2, #255	; 0xff
     90e:	dd00      	ble.n	912 <adc_init+0x262>
     910:	e6e1      	b.n	6d6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     912:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     914:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     916:	b252      	sxtb	r2, r2
     918:	2a00      	cmp	r2, #0
     91a:	dbfb      	blt.n	914 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     91c:	4642      	mov	r2, r8
     91e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     920:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     922:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     924:	b25b      	sxtb	r3, r3
     926:	2b00      	cmp	r3, #0
     928:	dbfb      	blt.n	922 <adc_init+0x272>
	adc_module->WINLT.reg =
     92a:	8bb3      	ldrh	r3, [r6, #28]
     92c:	4642      	mov	r2, r8
     92e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     930:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     932:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     934:	b25b      	sxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	dbfb      	blt.n	932 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     93a:	8c33      	ldrh	r3, [r6, #32]
     93c:	4642      	mov	r2, r8
     93e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     940:	232c      	movs	r3, #44	; 0x2c
     942:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     944:	2b00      	cmp	r3, #0
     946:	d005      	beq.n	954 <adc_init+0x2a4>
		inputs_to_scan--;
     948:	3b01      	subs	r3, #1
     94a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     94c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     94e:	2b0f      	cmp	r3, #15
     950:	d900      	bls.n	954 <adc_init+0x2a4>
     952:	e6c0      	b.n	6d6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     954:	222b      	movs	r2, #43	; 0x2b
     956:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     958:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     95a:	290f      	cmp	r1, #15
     95c:	d900      	bls.n	960 <adc_init+0x2b0>
     95e:	e6ba      	b.n	6d6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     960:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     962:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     964:	b252      	sxtb	r2, r2
     966:	2a00      	cmp	r2, #0
     968:	dbfb      	blt.n	962 <adc_init+0x2b2>
			config->negative_input |
     96a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     96c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     96e:	4302      	orrs	r2, r0
     970:	68b0      	ldr	r0, [r6, #8]
     972:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     974:	0509      	lsls	r1, r1, #20
			config->negative_input |
     976:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     978:	041b      	lsls	r3, r3, #16
			config->negative_input |
     97a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     97c:	4642      	mov	r2, r8
     97e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     980:	232a      	movs	r3, #42	; 0x2a
     982:	5cf3      	ldrb	r3, [r6, r3]
     984:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     986:	230f      	movs	r3, #15
     988:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     98a:	3315      	adds	r3, #21
     98c:	5cf3      	ldrb	r3, [r6, r3]
     98e:	2b00      	cmp	r3, #0
     990:	d012      	beq.n	9b8 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     992:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     994:	4a1a      	ldr	r2, [pc, #104]	; (a00 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     996:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     998:	4293      	cmp	r3, r2
     99a:	d900      	bls.n	99e <adc_init+0x2ee>
     99c:	e69b      	b.n	6d6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     99e:	4642      	mov	r2, r8
     9a0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     9a2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     9a4:	2380      	movs	r3, #128	; 0x80
     9a6:	011b      	lsls	r3, r3, #4
     9a8:	18d3      	adds	r3, r2, r3
     9aa:	4915      	ldr	r1, [pc, #84]	; (a00 <adc_init+0x350>)
     9ac:	b29b      	uxth	r3, r3
     9ae:	428b      	cmp	r3, r1
     9b0:	d900      	bls.n	9b4 <adc_init+0x304>
     9b2:	e690      	b.n	6d6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     9b4:	4643      	mov	r3, r8
     9b6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <adc_init+0x354>)
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	015b      	lsls	r3, r3, #5
     9be:	22e0      	movs	r2, #224	; 0xe0
     9c0:	00d2      	lsls	r2, r2, #3
     9c2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     9c4:	4a10      	ldr	r2, [pc, #64]	; (a08 <adc_init+0x358>)
     9c6:	6851      	ldr	r1, [r2, #4]
     9c8:	0149      	lsls	r1, r1, #5
     9ca:	6812      	ldr	r2, [r2, #0]
     9cc:	0ed2      	lsrs	r2, r2, #27
     9ce:	430a      	orrs	r2, r1
     9d0:	b2d2      	uxtb	r2, r2
			) |
     9d2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     9d4:	4642      	mov	r2, r8
     9d6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     9d8:	2000      	movs	r0, #0
     9da:	e67c      	b.n	6d6 <adc_init+0x26>
     9dc:	40000400 	.word	0x40000400
     9e0:	40000800 	.word	0x40000800
     9e4:	2000027c 	.word	0x2000027c
     9e8:	00001eb5 	.word	0x00001eb5
     9ec:	00001e29 	.word	0x00001e29
     9f0:	00004225 	.word	0x00004225
     9f4:	000053c8 	.word	0x000053c8
     9f8:	00001fad 	.word	0x00001fad
     9fc:	000052f4 	.word	0x000052f4
     a00:	00000fff 	.word	0x00000fff
     a04:	00806024 	.word	0x00806024
     a08:	00806020 	.word	0x00806020
		switch (resolution) {
     a0c:	2c00      	cmp	r4, #0
     a0e:	d000      	beq.n	a12 <adc_init+0x362>
     a10:	e77f      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a12:	7cf2      	ldrb	r2, [r6, #19]
     a14:	2a00      	cmp	r2, #0
     a16:	d00f      	beq.n	a38 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     a18:	69f2      	ldr	r2, [r6, #28]
     a1a:	2180      	movs	r1, #128	; 0x80
     a1c:	0109      	lsls	r1, r1, #4
     a1e:	468c      	mov	ip, r1
     a20:	4462      	add	r2, ip
			if (config->differential_mode &&
     a22:	492a      	ldr	r1, [pc, #168]	; (acc <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     a24:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a26:	428a      	cmp	r2, r1
     a28:	d900      	bls.n	a2c <adc_init+0x37c>
     a2a:	e654      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     a2c:	6a32      	ldr	r2, [r6, #32]
     a2e:	4462      	add	r2, ip
     a30:	4926      	ldr	r1, [pc, #152]	; (acc <adc_init+0x41c>)
     a32:	428a      	cmp	r2, r1
     a34:	d900      	bls.n	a38 <adc_init+0x388>
     a36:	e64e      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     a38:	4a24      	ldr	r2, [pc, #144]	; (acc <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     a3a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     a3c:	69f1      	ldr	r1, [r6, #28]
     a3e:	4291      	cmp	r1, r2
     a40:	dd00      	ble.n	a44 <adc_init+0x394>
     a42:	e648      	b.n	6d6 <adc_init+0x26>
     a44:	6a31      	ldr	r1, [r6, #32]
     a46:	4291      	cmp	r1, r2
     a48:	dd00      	ble.n	a4c <adc_init+0x39c>
     a4a:	e644      	b.n	6d6 <adc_init+0x26>
     a4c:	e761      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a4e:	7cf2      	ldrb	r2, [r6, #19]
     a50:	2a00      	cmp	r2, #0
     a52:	d00f      	beq.n	a74 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     a54:	69f2      	ldr	r2, [r6, #28]
     a56:	2180      	movs	r1, #128	; 0x80
     a58:	0089      	lsls	r1, r1, #2
     a5a:	468c      	mov	ip, r1
     a5c:	4462      	add	r2, ip
			if (config->differential_mode &&
     a5e:	491c      	ldr	r1, [pc, #112]	; (ad0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a60:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a62:	428a      	cmp	r2, r1
     a64:	d900      	bls.n	a68 <adc_init+0x3b8>
     a66:	e636      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     a68:	6a32      	ldr	r2, [r6, #32]
     a6a:	4462      	add	r2, ip
     a6c:	4918      	ldr	r1, [pc, #96]	; (ad0 <adc_init+0x420>)
     a6e:	428a      	cmp	r2, r1
     a70:	d900      	bls.n	a74 <adc_init+0x3c4>
     a72:	e630      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     a74:	4a16      	ldr	r2, [pc, #88]	; (ad0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a76:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     a78:	69f1      	ldr	r1, [r6, #28]
     a7a:	4291      	cmp	r1, r2
     a7c:	dd00      	ble.n	a80 <adc_init+0x3d0>
     a7e:	e62a      	b.n	6d6 <adc_init+0x26>
     a80:	6a31      	ldr	r1, [r6, #32]
     a82:	4291      	cmp	r1, r2
     a84:	dd00      	ble.n	a88 <adc_init+0x3d8>
     a86:	e626      	b.n	6d6 <adc_init+0x26>
     a88:	e743      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a8a:	7cf2      	ldrb	r2, [r6, #19]
     a8c:	2a00      	cmp	r2, #0
     a8e:	d00f      	beq.n	ab0 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     a90:	69f2      	ldr	r2, [r6, #28]
     a92:	2180      	movs	r1, #128	; 0x80
     a94:	0209      	lsls	r1, r1, #8
     a96:	468c      	mov	ip, r1
     a98:	4462      	add	r2, ip
			if (config->differential_mode &&
     a9a:	490e      	ldr	r1, [pc, #56]	; (ad4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     a9c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a9e:	428a      	cmp	r2, r1
     aa0:	d900      	bls.n	aa4 <adc_init+0x3f4>
     aa2:	e618      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     aa4:	6a32      	ldr	r2, [r6, #32]
     aa6:	4462      	add	r2, ip
     aa8:	490a      	ldr	r1, [pc, #40]	; (ad4 <adc_init+0x424>)
     aaa:	428a      	cmp	r2, r1
     aac:	d900      	bls.n	ab0 <adc_init+0x400>
     aae:	e612      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     ab0:	4a08      	ldr	r2, [pc, #32]	; (ad4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     ab2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     ab4:	69f1      	ldr	r1, [r6, #28]
     ab6:	4291      	cmp	r1, r2
     ab8:	dd00      	ble.n	abc <adc_init+0x40c>
     aba:	e60c      	b.n	6d6 <adc_init+0x26>
     abc:	6a31      	ldr	r1, [r6, #32]
     abe:	4291      	cmp	r1, r2
     ac0:	dd00      	ble.n	ac4 <adc_init+0x414>
     ac2:	e608      	b.n	6d6 <adc_init+0x26>
     ac4:	e725      	b.n	912 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     ac6:	2017      	movs	r0, #23
     ac8:	e605      	b.n	6d6 <adc_init+0x26>
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	00000fff 	.word	0x00000fff
     ad0:	000003ff 	.word	0x000003ff
     ad4:	0000ffff 	.word	0x0000ffff

00000ad8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     ad8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     ada:	4b2e      	ldr	r3, [pc, #184]	; (b94 <ADC_Handler+0xbc>)
     adc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     ade:	6823      	ldr	r3, [r4, #0]
     ae0:	7e1d      	ldrb	r5, [r3, #24]
     ae2:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     ae4:	07ea      	lsls	r2, r5, #31
     ae6:	d505      	bpl.n	af4 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     ae8:	7ee2      	ldrb	r2, [r4, #27]
     aea:	07d2      	lsls	r2, r2, #31
     aec:	d502      	bpl.n	af4 <ADC_Handler+0x1c>
     aee:	7ea2      	ldrb	r2, [r4, #26]
     af0:	07d2      	lsls	r2, r2, #31
     af2:	d416      	bmi.n	b22 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     af4:	076b      	lsls	r3, r5, #29
     af6:	d508      	bpl.n	b0a <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     af8:	2304      	movs	r3, #4
     afa:	6822      	ldr	r2, [r4, #0]
     afc:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     afe:	7ee3      	ldrb	r3, [r4, #27]
     b00:	079b      	lsls	r3, r3, #30
     b02:	d502      	bpl.n	b0a <ADC_Handler+0x32>
     b04:	7ea3      	ldrb	r3, [r4, #26]
     b06:	079b      	lsls	r3, r3, #30
     b08:	d43c      	bmi.n	b84 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     b0a:	07ab      	lsls	r3, r5, #30
     b0c:	d508      	bpl.n	b20 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b0e:	2302      	movs	r3, #2
     b10:	6822      	ldr	r2, [r4, #0]
     b12:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b14:	7ee3      	ldrb	r3, [r4, #27]
     b16:	075b      	lsls	r3, r3, #29
     b18:	d502      	bpl.n	b20 <ADC_Handler+0x48>
     b1a:	7ea3      	ldrb	r3, [r4, #26]
     b1c:	075b      	lsls	r3, r3, #29
     b1e:	d435      	bmi.n	b8c <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     b20:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     b22:	2201      	movs	r2, #1
     b24:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     b26:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b28:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     b2a:	b25b      	sxtb	r3, r3
     b2c:	2b00      	cmp	r3, #0
     b2e:	dbfb      	blt.n	b28 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     b30:	6961      	ldr	r1, [r4, #20]
     b32:	1c8b      	adds	r3, r1, #2
     b34:	6163      	str	r3, [r4, #20]
     b36:	8b53      	ldrh	r3, [r2, #26]
     b38:	b29b      	uxth	r3, r3
     b3a:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     b3c:	8b23      	ldrh	r3, [r4, #24]
     b3e:	3b01      	subs	r3, #1
     b40:	b29b      	uxth	r3, r3
     b42:	8323      	strh	r3, [r4, #24]
     b44:	2b00      	cmp	r3, #0
     b46:	d011      	beq.n	b6c <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     b48:	7f63      	ldrb	r3, [r4, #29]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d0d2      	beq.n	af4 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     b4e:	6822      	ldr	r2, [r4, #0]
     b50:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b52:	b25b      	sxtb	r3, r3
     b54:	2b00      	cmp	r3, #0
     b56:	dbfb      	blt.n	b50 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     b58:	7b13      	ldrb	r3, [r2, #12]
     b5a:	2102      	movs	r1, #2
     b5c:	430b      	orrs	r3, r1
     b5e:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     b60:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b62:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b64:	b25b      	sxtb	r3, r3
     b66:	2b00      	cmp	r3, #0
     b68:	dbfb      	blt.n	b62 <ADC_Handler+0x8a>
     b6a:	e7c3      	b.n	af4 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     b6c:	7f23      	ldrb	r3, [r4, #28]
     b6e:	2b05      	cmp	r3, #5
     b70:	d1c0      	bne.n	af4 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     b72:	2300      	movs	r3, #0
     b74:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     b76:	3301      	adds	r3, #1
     b78:	6822      	ldr	r2, [r4, #0]
     b7a:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     b7c:	0020      	movs	r0, r4
     b7e:	68a3      	ldr	r3, [r4, #8]
     b80:	4798      	blx	r3
     b82:	e7b7      	b.n	af4 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     b84:	0020      	movs	r0, r4
     b86:	68e3      	ldr	r3, [r4, #12]
     b88:	4798      	blx	r3
     b8a:	e7be      	b.n	b0a <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b8c:	6923      	ldr	r3, [r4, #16]
     b8e:	0020      	movs	r0, r4
     b90:	4798      	blx	r3
}
     b92:	e7c5      	b.n	b20 <ADC_Handler+0x48>
     b94:	2000027c 	.word	0x2000027c

00000b98 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
     b98:	b510      	push	{r4, lr}
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
     b9a:	4b1b      	ldr	r3, [pc, #108]	; (c08 <bod_set_config+0x70>)
     b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     b9e:	079b      	lsls	r3, r3, #30
     ba0:	d504      	bpl.n	bac <bod_set_config+0x14>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
     ba2:	4a19      	ldr	r2, [pc, #100]	; (c08 <bod_set_config+0x70>)
     ba4:	6b53      	ldr	r3, [r2, #52]	; 0x34
     ba6:	2402      	movs	r4, #2
     ba8:	43a3      	bics	r3, r4
     baa:	6353      	str	r3, [r2, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
			(uint32_t)conf->mode;
     bac:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
     bae:	880b      	ldrh	r3, [r1, #0]
     bb0:	790c      	ldrb	r4, [r1, #4]
     bb2:	4323      	orrs	r3, r4
     bb4:	4313      	orrs	r3, r2

	if (conf->mode == BOD_MODE_SAMPLED) {
     bb6:	2480      	movs	r4, #128	; 0x80
     bb8:	0064      	lsls	r4, r4, #1
     bba:	42a2      	cmp	r2, r4
     bbc:	d00d      	beq.n	bda <bod_set_config+0x42>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
     bbe:	798a      	ldrb	r2, [r1, #6]
     bc0:	2a00      	cmp	r2, #0
     bc2:	d001      	beq.n	bc8 <bod_set_config+0x30>
		temp |= SYSCTRL_BOD33_HYST;
     bc4:	2204      	movs	r2, #4
     bc6:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
     bc8:	79ca      	ldrb	r2, [r1, #7]
     bca:	2a00      	cmp	r2, #0
     bcc:	d001      	beq.n	bd2 <bod_set_config+0x3a>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
     bd2:	2800      	cmp	r0, #0
     bd4:	d005      	beq.n	be2 <bod_set_config+0x4a>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
     bd6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     bd8:	bd10      	pop	{r4, pc}
		temp |= SYSCTRL_BOD33_CEN;
     bda:	2280      	movs	r2, #128	; 0x80
     bdc:	0092      	lsls	r2, r2, #2
     bde:	4313      	orrs	r3, r2
     be0:	e7ed      	b.n	bbe <bod_set_config+0x26>
			if (conf->level > 0x3F) {
     be2:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
     be4:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
     be6:	2a3f      	cmp	r2, #63	; 0x3f
     be8:	d8f6      	bhi.n	bd8 <bod_set_config+0x40>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
     bea:	0412      	lsls	r2, r2, #16
     bec:	21fc      	movs	r1, #252	; 0xfc
     bee:	0389      	lsls	r1, r1, #14
     bf0:	400a      	ands	r2, r1
     bf2:	4313      	orrs	r3, r2
     bf4:	4a04      	ldr	r2, [pc, #16]	; (c08 <bod_set_config+0x70>)
     bf6:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
     bf8:	0011      	movs	r1, r2
     bfa:	2280      	movs	r2, #128	; 0x80
     bfc:	0112      	lsls	r2, r2, #4
     bfe:	68cb      	ldr	r3, [r1, #12]
     c00:	4213      	tst	r3, r2
     c02:	d0fc      	beq.n	bfe <bod_set_config+0x66>
	return STATUS_OK;
     c04:	2000      	movs	r0, #0
     c06:	e7e7      	b.n	bd8 <bod_set_config+0x40>
     c08:	40000800 	.word	0x40000800

00000c0c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     c0c:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
     c0e:	4a1e      	ldr	r2, [pc, #120]	; (c88 <nvm_set_config+0x7c>)
     c10:	69d3      	ldr	r3, [r2, #28]
     c12:	2104      	movs	r1, #4
     c14:	430b      	orrs	r3, r1
     c16:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     c18:	4b1c      	ldr	r3, [pc, #112]	; (c8c <nvm_set_config+0x80>)
     c1a:	2220      	movs	r2, #32
     c1c:	32ff      	adds	r2, #255	; 0xff
     c1e:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     c20:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     c22:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     c24:	07d2      	lsls	r2, r2, #31
     c26:	d401      	bmi.n	c2c <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     c28:	0018      	movs	r0, r3
     c2a:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     c2c:	7803      	ldrb	r3, [r0, #0]
     c2e:	021b      	lsls	r3, r3, #8
     c30:	22c0      	movs	r2, #192	; 0xc0
     c32:	0092      	lsls	r2, r2, #2
     c34:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     c36:	7841      	ldrb	r1, [r0, #1]
     c38:	01c9      	lsls	r1, r1, #7
     c3a:	22ff      	movs	r2, #255	; 0xff
     c3c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     c3e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     c40:	7881      	ldrb	r1, [r0, #2]
     c42:	0049      	lsls	r1, r1, #1
     c44:	221e      	movs	r2, #30
     c46:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     c48:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     c4a:	78c2      	ldrb	r2, [r0, #3]
     c4c:	0492      	lsls	r2, r2, #18
     c4e:	2180      	movs	r1, #128	; 0x80
     c50:	02c9      	lsls	r1, r1, #11
     c52:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     c54:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     c56:	7902      	ldrb	r2, [r0, #4]
     c58:	0412      	lsls	r2, r2, #16
     c5a:	21c0      	movs	r1, #192	; 0xc0
     c5c:	0289      	lsls	r1, r1, #10
     c5e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     c60:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     c62:	4a0a      	ldr	r2, [pc, #40]	; (c8c <nvm_set_config+0x80>)
     c64:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     c66:	6893      	ldr	r3, [r2, #8]
     c68:	035b      	lsls	r3, r3, #13
     c6a:	0f5b      	lsrs	r3, r3, #29
     c6c:	4908      	ldr	r1, [pc, #32]	; (c90 <nvm_set_config+0x84>)
     c6e:	2408      	movs	r4, #8
     c70:	409c      	lsls	r4, r3
     c72:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     c74:	6893      	ldr	r3, [r2, #8]
     c76:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     c78:	7843      	ldrb	r3, [r0, #1]
     c7a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     c7c:	8b13      	ldrh	r3, [r2, #24]
     c7e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     c80:	0fdb      	lsrs	r3, r3, #31
     c82:	011b      	lsls	r3, r3, #4
     c84:	e7d0      	b.n	c28 <nvm_set_config+0x1c>
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	40000400 	.word	0x40000400
     c8c:	41004000 	.word	0x41004000
     c90:	20000090 	.word	0x20000090

00000c94 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     c94:	b530      	push	{r4, r5, lr}
     c96:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     c98:	4a22      	ldr	r2, [pc, #136]	; (d24 <nvm_execute_command+0x90>)
     c9a:	8810      	ldrh	r0, [r2, #0]
     c9c:	8853      	ldrh	r3, [r2, #2]
     c9e:	4343      	muls	r3, r0
     ca0:	428b      	cmp	r3, r1
     ca2:	d206      	bcs.n	cb2 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     ca4:	2280      	movs	r2, #128	; 0x80
     ca6:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     ca8:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     caa:	4b1f      	ldr	r3, [pc, #124]	; (d28 <nvm_execute_command+0x94>)
     cac:	18cb      	adds	r3, r1, r3
     cae:	4293      	cmp	r3, r2
     cb0:	d80e      	bhi.n	cd0 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     cb2:	4b1e      	ldr	r3, [pc, #120]	; (d2c <nvm_execute_command+0x98>)
     cb4:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     cb6:	2280      	movs	r2, #128	; 0x80
     cb8:	02d2      	lsls	r2, r2, #11
     cba:	432a      	orrs	r2, r5
     cbc:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     cbe:	2220      	movs	r2, #32
     cc0:	32ff      	adds	r2, #255	; 0xff
     cc2:	831a      	strh	r2, [r3, #24]
     cc4:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     cc6:	07db      	lsls	r3, r3, #31
     cc8:	d403      	bmi.n	cd2 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     cca:	4b18      	ldr	r3, [pc, #96]	; (d2c <nvm_execute_command+0x98>)
     ccc:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     cce:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     cd0:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     cd2:	2c45      	cmp	r4, #69	; 0x45
     cd4:	d822      	bhi.n	d1c <nvm_execute_command+0x88>
     cd6:	00a3      	lsls	r3, r4, #2
     cd8:	4a15      	ldr	r2, [pc, #84]	; (d30 <nvm_execute_command+0x9c>)
     cda:	58d3      	ldr	r3, [r2, r3]
     cdc:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     cde:	4b13      	ldr	r3, [pc, #76]	; (d2c <nvm_execute_command+0x98>)
     ce0:	8b1b      	ldrh	r3, [r3, #24]
     ce2:	05db      	lsls	r3, r3, #23
     ce4:	d503      	bpl.n	cee <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     ce6:	4b11      	ldr	r3, [pc, #68]	; (d2c <nvm_execute_command+0x98>)
     ce8:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     cea:	2010      	movs	r0, #16
     cec:	e7f0      	b.n	cd0 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     cee:	0889      	lsrs	r1, r1, #2
     cf0:	0049      	lsls	r1, r1, #1
     cf2:	4b0e      	ldr	r3, [pc, #56]	; (d2c <nvm_execute_command+0x98>)
     cf4:	61d9      	str	r1, [r3, #28]
			break;
     cf6:	e003      	b.n	d00 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     cf8:	0889      	lsrs	r1, r1, #2
     cfa:	0049      	lsls	r1, r1, #1
     cfc:	4b0b      	ldr	r3, [pc, #44]	; (d2c <nvm_execute_command+0x98>)
     cfe:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     d00:	20a5      	movs	r0, #165	; 0xa5
     d02:	0200      	lsls	r0, r0, #8
     d04:	4304      	orrs	r4, r0
     d06:	4b09      	ldr	r3, [pc, #36]	; (d2c <nvm_execute_command+0x98>)
     d08:	801c      	strh	r4, [r3, #0]
     d0a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     d0c:	2201      	movs	r2, #1
     d0e:	7d0b      	ldrb	r3, [r1, #20]
     d10:	4213      	tst	r3, r2
     d12:	d0fc      	beq.n	d0e <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <nvm_execute_command+0x98>)
     d16:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     d18:	2000      	movs	r0, #0
     d1a:	e7d9      	b.n	cd0 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     d1c:	4b03      	ldr	r3, [pc, #12]	; (d2c <nvm_execute_command+0x98>)
     d1e:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     d20:	2017      	movs	r0, #23
     d22:	e7d5      	b.n	cd0 <nvm_execute_command+0x3c>
     d24:	20000090 	.word	0x20000090
     d28:	ff7fc000 	.word	0xff7fc000
     d2c:	41004000 	.word	0x41004000
     d30:	00005418 	.word	0x00005418

00000d34 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     d36:	4b25      	ldr	r3, [pc, #148]	; (dcc <nvm_write_buffer+0x98>)
     d38:	881d      	ldrh	r5, [r3, #0]
     d3a:	885b      	ldrh	r3, [r3, #2]
     d3c:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     d3e:	2418      	movs	r4, #24
	if (destination_address >
     d40:	4283      	cmp	r3, r0
     d42:	d201      	bcs.n	d48 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     d44:	0020      	movs	r0, r4
     d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     d48:	1e6b      	subs	r3, r5, #1
     d4a:	4218      	tst	r0, r3
     d4c:	d1fa      	bne.n	d44 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     d4e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     d50:	4295      	cmp	r5, r2
     d52:	d3f7      	bcc.n	d44 <nvm_write_buffer+0x10>
     d54:	4b1e      	ldr	r3, [pc, #120]	; (dd0 <nvm_write_buffer+0x9c>)
     d56:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     d58:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     d5a:	07db      	lsls	r3, r3, #31
     d5c:	d5f2      	bpl.n	d44 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     d5e:	4c1d      	ldr	r4, [pc, #116]	; (dd4 <nvm_write_buffer+0xa0>)
     d60:	4b1b      	ldr	r3, [pc, #108]	; (dd0 <nvm_write_buffer+0x9c>)
     d62:	801c      	strh	r4, [r3, #0]
     d64:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     d66:	2401      	movs	r4, #1
     d68:	7d2b      	ldrb	r3, [r5, #20]
     d6a:	4223      	tst	r3, r4
     d6c:	d0fc      	beq.n	d68 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     d6e:	2420      	movs	r4, #32
     d70:	34ff      	adds	r4, #255	; 0xff
     d72:	4b17      	ldr	r3, [pc, #92]	; (dd0 <nvm_write_buffer+0x9c>)
     d74:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     d76:	2a00      	cmp	r2, #0
     d78:	d022      	beq.n	dc0 <nvm_write_buffer+0x8c>
     d7a:	2301      	movs	r3, #1
     d7c:	0005      	movs	r5, r0
     d7e:	439d      	bics	r5, r3
     d80:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     d82:	1e57      	subs	r7, r2, #1
     d84:	e009      	b.n	d9a <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     d86:	18ce      	adds	r6, r1, r3
     d88:	7876      	ldrb	r6, [r6, #1]
     d8a:	0236      	lsls	r6, r6, #8
     d8c:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     d8e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     d90:	3302      	adds	r3, #2
     d92:	b29b      	uxth	r3, r3
     d94:	3502      	adds	r5, #2
     d96:	429a      	cmp	r2, r3
     d98:	d904      	bls.n	da4 <nvm_write_buffer+0x70>
		data = buffer[i];
     d9a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     d9c:	42bb      	cmp	r3, r7
     d9e:	dbf2      	blt.n	d86 <nvm_write_buffer+0x52>
		data = buffer[i];
     da0:	b2a4      	uxth	r4, r4
     da2:	e7f4      	b.n	d8e <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     da4:	4b09      	ldr	r3, [pc, #36]	; (dcc <nvm_write_buffer+0x98>)
     da6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     da8:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     daa:	2b00      	cmp	r3, #0
     dac:	d1ca      	bne.n	d44 <nvm_write_buffer+0x10>
     dae:	2a3f      	cmp	r2, #63	; 0x3f
     db0:	d8c8      	bhi.n	d44 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     db2:	2200      	movs	r2, #0
     db4:	0001      	movs	r1, r0
     db6:	2004      	movs	r0, #4
     db8:	4b07      	ldr	r3, [pc, #28]	; (dd8 <nvm_write_buffer+0xa4>)
     dba:	4798      	blx	r3
     dbc:	0004      	movs	r4, r0
     dbe:	e7c1      	b.n	d44 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     dc0:	4b02      	ldr	r3, [pc, #8]	; (dcc <nvm_write_buffer+0x98>)
     dc2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     dc4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     dc6:	2b00      	cmp	r3, #0
     dc8:	d0f3      	beq.n	db2 <nvm_write_buffer+0x7e>
     dca:	e7bb      	b.n	d44 <nvm_write_buffer+0x10>
     dcc:	20000090 	.word	0x20000090
     dd0:	41004000 	.word	0x41004000
     dd4:	ffffa544 	.word	0xffffa544
     dd8:	00000c95 	.word	0x00000c95

00000ddc <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     ddc:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     dde:	4b18      	ldr	r3, [pc, #96]	; (e40 <nvm_read_buffer+0x64>)
     de0:	881d      	ldrh	r5, [r3, #0]
     de2:	885b      	ldrh	r3, [r3, #2]
     de4:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     de6:	2418      	movs	r4, #24
	if (source_address >
     de8:	4283      	cmp	r3, r0
     dea:	d201      	bcs.n	df0 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     dec:	0020      	movs	r0, r4
     dee:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     df0:	1e6b      	subs	r3, r5, #1
     df2:	4218      	tst	r0, r3
     df4:	d1fa      	bne.n	dec <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     df6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     df8:	4295      	cmp	r5, r2
     dfa:	d3f7      	bcc.n	dec <nvm_read_buffer+0x10>
     dfc:	4b11      	ldr	r3, [pc, #68]	; (e44 <nvm_read_buffer+0x68>)
     dfe:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     e00:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     e02:	07db      	lsls	r3, r3, #31
     e04:	d5f2      	bpl.n	dec <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     e06:	2420      	movs	r4, #32
     e08:	34ff      	adds	r4, #255	; 0xff
     e0a:	4b0e      	ldr	r3, [pc, #56]	; (e44 <nvm_read_buffer+0x68>)
     e0c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     e0e:	2a00      	cmp	r2, #0
     e10:	d014      	beq.n	e3c <nvm_read_buffer+0x60>
     e12:	2301      	movs	r3, #1
     e14:	4398      	bics	r0, r3
     e16:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     e18:	1e56      	subs	r6, r2, #1
     e1a:	e004      	b.n	e26 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     e1c:	3302      	adds	r3, #2
     e1e:	b29b      	uxth	r3, r3
     e20:	3002      	adds	r0, #2
     e22:	429a      	cmp	r2, r3
     e24:	d908      	bls.n	e38 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     e26:	8804      	ldrh	r4, [r0, #0]
     e28:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     e2a:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     e2c:	42b3      	cmp	r3, r6
     e2e:	daf5      	bge.n	e1c <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     e30:	18cd      	adds	r5, r1, r3
     e32:	0a24      	lsrs	r4, r4, #8
     e34:	706c      	strb	r4, [r5, #1]
     e36:	e7f1      	b.n	e1c <nvm_read_buffer+0x40>
	return STATUS_OK;
     e38:	2400      	movs	r4, #0
     e3a:	e7d7      	b.n	dec <nvm_read_buffer+0x10>
     e3c:	2400      	movs	r4, #0
     e3e:	e7d5      	b.n	dec <nvm_read_buffer+0x10>
     e40:	20000090 	.word	0x20000090
     e44:	41004000 	.word	0x41004000

00000e48 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     e48:	4b13      	ldr	r3, [pc, #76]	; (e98 <nvm_erase_row+0x50>)
     e4a:	881a      	ldrh	r2, [r3, #0]
     e4c:	885b      	ldrh	r3, [r3, #2]
     e4e:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     e50:	2118      	movs	r1, #24
	if (row_address >
     e52:	4283      	cmp	r3, r0
     e54:	d201      	bcs.n	e5a <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     e56:	0008      	movs	r0, r1
     e58:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     e5a:	0092      	lsls	r2, r2, #2
     e5c:	3a01      	subs	r2, #1
     e5e:	4210      	tst	r0, r2
     e60:	d1f9      	bne.n	e56 <nvm_erase_row+0xe>
     e62:	4b0e      	ldr	r3, [pc, #56]	; (e9c <nvm_erase_row+0x54>)
     e64:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     e66:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     e68:	07db      	lsls	r3, r3, #31
     e6a:	d5f4      	bpl.n	e56 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     e6c:	4b0b      	ldr	r3, [pc, #44]	; (e9c <nvm_erase_row+0x54>)
     e6e:	2220      	movs	r2, #32
     e70:	32ff      	adds	r2, #255	; 0xff
     e72:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     e74:	0880      	lsrs	r0, r0, #2
     e76:	0040      	lsls	r0, r0, #1
     e78:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     e7a:	4a09      	ldr	r2, [pc, #36]	; (ea0 <nvm_erase_row+0x58>)
     e7c:	801a      	strh	r2, [r3, #0]
     e7e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     e80:	2201      	movs	r2, #1
     e82:	7d0b      	ldrb	r3, [r1, #20]
     e84:	4213      	tst	r3, r2
     e86:	d0fc      	beq.n	e82 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     e88:	4b04      	ldr	r3, [pc, #16]	; (e9c <nvm_erase_row+0x54>)
     e8a:	8b19      	ldrh	r1, [r3, #24]
     e8c:	201c      	movs	r0, #28
     e8e:	4001      	ands	r1, r0
	return STATUS_OK;
     e90:	1e48      	subs	r0, r1, #1
     e92:	4181      	sbcs	r1, r0
     e94:	0089      	lsls	r1, r1, #2
     e96:	e7de      	b.n	e56 <nvm_erase_row+0xe>
     e98:	20000090 	.word	0x20000090
     e9c:	41004000 	.word	0x41004000
     ea0:	ffffa502 	.word	0xffffa502

00000ea4 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     ea4:	4b13      	ldr	r3, [pc, #76]	; (ef4 <nvm_get_parameters+0x50>)
     ea6:	2220      	movs	r2, #32
     ea8:	32ff      	adds	r2, #255	; 0xff
     eaa:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     eac:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     eae:	034a      	lsls	r2, r1, #13
     eb0:	0f52      	lsrs	r2, r2, #29
     eb2:	2308      	movs	r3, #8
     eb4:	4093      	lsls	r3, r2
	parameters->page_size =
     eb6:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     eb8:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     eba:	4b0f      	ldr	r3, [pc, #60]	; (ef8 <nvm_get_parameters+0x54>)
     ebc:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     ebe:	065b      	lsls	r3, r3, #25
     ec0:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     ec2:	2b07      	cmp	r3, #7
     ec4:	d010      	beq.n	ee8 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     ec6:	2206      	movs	r2, #6
     ec8:	1ad2      	subs	r2, r2, r3
     eca:	2304      	movs	r3, #4
     ecc:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     ece:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     ed0:	4b09      	ldr	r3, [pc, #36]	; (ef8 <nvm_get_parameters+0x54>)
     ed2:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     ed4:	2207      	movs	r2, #7
     ed6:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     ed8:	2b07      	cmp	r3, #7
     eda:	d008      	beq.n	eee <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     edc:	2207      	movs	r2, #7
     ede:	1ad2      	subs	r2, r2, r3
     ee0:	2304      	movs	r3, #4
     ee2:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     ee4:	6083      	str	r3, [r0, #8]
	}
}
     ee6:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     ee8:	2300      	movs	r3, #0
     eea:	6043      	str	r3, [r0, #4]
     eec:	e7f0      	b.n	ed0 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
     eee:	2300      	movs	r3, #0
     ef0:	6083      	str	r3, [r0, #8]
     ef2:	e7f8      	b.n	ee6 <nvm_get_parameters+0x42>
     ef4:	41004000 	.word	0x41004000
     ef8:	00804000 	.word	0x00804000

00000efc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     efc:	b500      	push	{lr}
     efe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f00:	ab01      	add	r3, sp, #4
     f02:	2280      	movs	r2, #128	; 0x80
     f04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f06:	780a      	ldrb	r2, [r1, #0]
     f08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f0a:	784a      	ldrb	r2, [r1, #1]
     f0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f0e:	788a      	ldrb	r2, [r1, #2]
     f10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f12:	0019      	movs	r1, r3
     f14:	4b01      	ldr	r3, [pc, #4]	; (f1c <port_pin_set_config+0x20>)
     f16:	4798      	blx	r3
}
     f18:	b003      	add	sp, #12
     f1a:	bd00      	pop	{pc}
     f1c:	00001fad 	.word	0x00001fad

00000f20 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     f20:	b5f0      	push	{r4, r5, r6, r7, lr}
     f22:	46de      	mov	lr, fp
     f24:	4657      	mov	r7, sl
     f26:	464e      	mov	r6, r9
     f28:	4645      	mov	r5, r8
     f2a:	b5e0      	push	{r5, r6, r7, lr}
     f2c:	b087      	sub	sp, #28
     f2e:	4680      	mov	r8, r0
     f30:	9104      	str	r1, [sp, #16]
     f32:	0016      	movs	r6, r2
     f34:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     f36:	2200      	movs	r2, #0
     f38:	2300      	movs	r3, #0
     f3a:	2100      	movs	r1, #0
     f3c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     f3e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     f40:	2001      	movs	r0, #1
     f42:	0021      	movs	r1, r4
     f44:	9600      	str	r6, [sp, #0]
     f46:	9701      	str	r7, [sp, #4]
     f48:	465c      	mov	r4, fp
     f4a:	9403      	str	r4, [sp, #12]
     f4c:	4644      	mov	r4, r8
     f4e:	9405      	str	r4, [sp, #20]
     f50:	e013      	b.n	f7a <long_division+0x5a>
     f52:	2420      	movs	r4, #32
     f54:	1a64      	subs	r4, r4, r1
     f56:	0005      	movs	r5, r0
     f58:	40e5      	lsrs	r5, r4
     f5a:	46a8      	mov	r8, r5
     f5c:	e014      	b.n	f88 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     f5e:	9c00      	ldr	r4, [sp, #0]
     f60:	9d01      	ldr	r5, [sp, #4]
     f62:	1b12      	subs	r2, r2, r4
     f64:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     f66:	465c      	mov	r4, fp
     f68:	464d      	mov	r5, r9
     f6a:	432c      	orrs	r4, r5
     f6c:	46a3      	mov	fp, r4
     f6e:	9c03      	ldr	r4, [sp, #12]
     f70:	4645      	mov	r5, r8
     f72:	432c      	orrs	r4, r5
     f74:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     f76:	3901      	subs	r1, #1
     f78:	d325      	bcc.n	fc6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     f7a:	2420      	movs	r4, #32
     f7c:	4264      	negs	r4, r4
     f7e:	190c      	adds	r4, r1, r4
     f80:	d4e7      	bmi.n	f52 <long_division+0x32>
     f82:	0005      	movs	r5, r0
     f84:	40a5      	lsls	r5, r4
     f86:	46a8      	mov	r8, r5
     f88:	0004      	movs	r4, r0
     f8a:	408c      	lsls	r4, r1
     f8c:	46a1      	mov	r9, r4
		r = r << 1;
     f8e:	1892      	adds	r2, r2, r2
     f90:	415b      	adcs	r3, r3
     f92:	0014      	movs	r4, r2
     f94:	001d      	movs	r5, r3
		if (n & bit_shift) {
     f96:	9e05      	ldr	r6, [sp, #20]
     f98:	464f      	mov	r7, r9
     f9a:	403e      	ands	r6, r7
     f9c:	46b4      	mov	ip, r6
     f9e:	9e04      	ldr	r6, [sp, #16]
     fa0:	4647      	mov	r7, r8
     fa2:	403e      	ands	r6, r7
     fa4:	46b2      	mov	sl, r6
     fa6:	4666      	mov	r6, ip
     fa8:	4657      	mov	r7, sl
     faa:	433e      	orrs	r6, r7
     fac:	d003      	beq.n	fb6 <long_division+0x96>
			r |= 0x01;
     fae:	0006      	movs	r6, r0
     fb0:	4326      	orrs	r6, r4
     fb2:	0032      	movs	r2, r6
     fb4:	002b      	movs	r3, r5
		if (r >= d) {
     fb6:	9c00      	ldr	r4, [sp, #0]
     fb8:	9d01      	ldr	r5, [sp, #4]
     fba:	429d      	cmp	r5, r3
     fbc:	d8db      	bhi.n	f76 <long_division+0x56>
     fbe:	d1ce      	bne.n	f5e <long_division+0x3e>
     fc0:	4294      	cmp	r4, r2
     fc2:	d8d8      	bhi.n	f76 <long_division+0x56>
     fc4:	e7cb      	b.n	f5e <long_division+0x3e>
     fc6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     fc8:	4658      	mov	r0, fp
     fca:	0019      	movs	r1, r3
     fcc:	b007      	add	sp, #28
     fce:	bc3c      	pop	{r2, r3, r4, r5}
     fd0:	4690      	mov	r8, r2
     fd2:	4699      	mov	r9, r3
     fd4:	46a2      	mov	sl, r4
     fd6:	46ab      	mov	fp, r5
     fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fda <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     fda:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     fdc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fde:	2340      	movs	r3, #64	; 0x40
     fe0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     fe2:	4281      	cmp	r1, r0
     fe4:	d202      	bcs.n	fec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     fe6:	0018      	movs	r0, r3
     fe8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     fea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     fec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     fee:	1c63      	adds	r3, r4, #1
     ff0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     ff2:	4288      	cmp	r0, r1
     ff4:	d9f9      	bls.n	fea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ff6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     ff8:	2cff      	cmp	r4, #255	; 0xff
     ffa:	d8f4      	bhi.n	fe6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     ffc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     ffe:	2300      	movs	r3, #0
    1000:	e7f1      	b.n	fe6 <_sercom_get_sync_baud_val+0xc>
	...

00001004 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1004:	b5f0      	push	{r4, r5, r6, r7, lr}
    1006:	b083      	sub	sp, #12
    1008:	000f      	movs	r7, r1
    100a:	0016      	movs	r6, r2
    100c:	aa08      	add	r2, sp, #32
    100e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1010:	0004      	movs	r4, r0
    1012:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1014:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1016:	42bc      	cmp	r4, r7
    1018:	d902      	bls.n	1020 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    101a:	0010      	movs	r0, r2
    101c:	b003      	add	sp, #12
    101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1020:	2b00      	cmp	r3, #0
    1022:	d114      	bne.n	104e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1024:	0002      	movs	r2, r0
    1026:	0008      	movs	r0, r1
    1028:	2100      	movs	r1, #0
    102a:	4c19      	ldr	r4, [pc, #100]	; (1090 <_sercom_get_async_baud_val+0x8c>)
    102c:	47a0      	blx	r4
    102e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1030:	003a      	movs	r2, r7
    1032:	2300      	movs	r3, #0
    1034:	2000      	movs	r0, #0
    1036:	4c17      	ldr	r4, [pc, #92]	; (1094 <_sercom_get_async_baud_val+0x90>)
    1038:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    103a:	2200      	movs	r2, #0
    103c:	2301      	movs	r3, #1
    103e:	1a12      	subs	r2, r2, r0
    1040:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1042:	0c12      	lsrs	r2, r2, #16
    1044:	041b      	lsls	r3, r3, #16
    1046:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1048:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    104a:	2200      	movs	r2, #0
    104c:	e7e5      	b.n	101a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    104e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1050:	2b01      	cmp	r3, #1
    1052:	d1f9      	bne.n	1048 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1054:	000a      	movs	r2, r1
    1056:	2300      	movs	r3, #0
    1058:	2100      	movs	r1, #0
    105a:	4c0d      	ldr	r4, [pc, #52]	; (1090 <_sercom_get_async_baud_val+0x8c>)
    105c:	47a0      	blx	r4
    105e:	0002      	movs	r2, r0
    1060:	000b      	movs	r3, r1
    1062:	9200      	str	r2, [sp, #0]
    1064:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1066:	0038      	movs	r0, r7
    1068:	2100      	movs	r1, #0
    106a:	4c0a      	ldr	r4, [pc, #40]	; (1094 <_sercom_get_async_baud_val+0x90>)
    106c:	47a0      	blx	r4
    106e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1070:	2380      	movs	r3, #128	; 0x80
    1072:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1074:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1076:	4298      	cmp	r0, r3
    1078:	d8cf      	bhi.n	101a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    107a:	0f79      	lsrs	r1, r7, #29
    107c:	00f8      	lsls	r0, r7, #3
    107e:	9a00      	ldr	r2, [sp, #0]
    1080:	9b01      	ldr	r3, [sp, #4]
    1082:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1084:	00ea      	lsls	r2, r5, #3
    1086:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1088:	b2d2      	uxtb	r2, r2
    108a:	0352      	lsls	r2, r2, #13
    108c:	432a      	orrs	r2, r5
    108e:	e7db      	b.n	1048 <_sercom_get_async_baud_val+0x44>
    1090:	00003449 	.word	0x00003449
    1094:	00000f21 	.word	0x00000f21

00001098 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1098:	b510      	push	{r4, lr}
    109a:	b082      	sub	sp, #8
    109c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    109e:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <sercom_set_gclk_generator+0x40>)
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d007      	beq.n	10b6 <sercom_set_gclk_generator+0x1e>
    10a6:	2900      	cmp	r1, #0
    10a8:	d105      	bne.n	10b6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    10aa:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <sercom_set_gclk_generator+0x40>)
    10ac:	785b      	ldrb	r3, [r3, #1]
    10ae:	4283      	cmp	r3, r0
    10b0:	d010      	beq.n	10d4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    10b2:	201d      	movs	r0, #29
    10b4:	e00c      	b.n	10d0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    10b6:	a901      	add	r1, sp, #4
    10b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    10ba:	2013      	movs	r0, #19
    10bc:	4b07      	ldr	r3, [pc, #28]	; (10dc <sercom_set_gclk_generator+0x44>)
    10be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    10c0:	2013      	movs	r0, #19
    10c2:	4b07      	ldr	r3, [pc, #28]	; (10e0 <sercom_set_gclk_generator+0x48>)
    10c4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    10c6:	4b04      	ldr	r3, [pc, #16]	; (10d8 <sercom_set_gclk_generator+0x40>)
    10c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    10ca:	2201      	movs	r2, #1
    10cc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    10ce:	2000      	movs	r0, #0
}
    10d0:	b002      	add	sp, #8
    10d2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    10d4:	2000      	movs	r0, #0
    10d6:	e7fb      	b.n	10d0 <sercom_set_gclk_generator+0x38>
    10d8:	20000098 	.word	0x20000098
    10dc:	00001eb5 	.word	0x00001eb5
    10e0:	00001e29 	.word	0x00001e29

000010e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    10e4:	4b40      	ldr	r3, [pc, #256]	; (11e8 <_sercom_get_default_pad+0x104>)
    10e6:	4298      	cmp	r0, r3
    10e8:	d031      	beq.n	114e <_sercom_get_default_pad+0x6a>
    10ea:	d90a      	bls.n	1102 <_sercom_get_default_pad+0x1e>
    10ec:	4b3f      	ldr	r3, [pc, #252]	; (11ec <_sercom_get_default_pad+0x108>)
    10ee:	4298      	cmp	r0, r3
    10f0:	d04d      	beq.n	118e <_sercom_get_default_pad+0xaa>
    10f2:	4b3f      	ldr	r3, [pc, #252]	; (11f0 <_sercom_get_default_pad+0x10c>)
    10f4:	4298      	cmp	r0, r3
    10f6:	d05a      	beq.n	11ae <_sercom_get_default_pad+0xca>
    10f8:	4b3e      	ldr	r3, [pc, #248]	; (11f4 <_sercom_get_default_pad+0x110>)
    10fa:	4298      	cmp	r0, r3
    10fc:	d037      	beq.n	116e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    10fe:	2000      	movs	r0, #0
}
    1100:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1102:	4b3d      	ldr	r3, [pc, #244]	; (11f8 <_sercom_get_default_pad+0x114>)
    1104:	4298      	cmp	r0, r3
    1106:	d00c      	beq.n	1122 <_sercom_get_default_pad+0x3e>
    1108:	4b3c      	ldr	r3, [pc, #240]	; (11fc <_sercom_get_default_pad+0x118>)
    110a:	4298      	cmp	r0, r3
    110c:	d1f7      	bne.n	10fe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    110e:	2901      	cmp	r1, #1
    1110:	d017      	beq.n	1142 <_sercom_get_default_pad+0x5e>
    1112:	2900      	cmp	r1, #0
    1114:	d05d      	beq.n	11d2 <_sercom_get_default_pad+0xee>
    1116:	2902      	cmp	r1, #2
    1118:	d015      	beq.n	1146 <_sercom_get_default_pad+0x62>
    111a:	2903      	cmp	r1, #3
    111c:	d015      	beq.n	114a <_sercom_get_default_pad+0x66>
	return 0;
    111e:	2000      	movs	r0, #0
    1120:	e7ee      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1122:	2901      	cmp	r1, #1
    1124:	d007      	beq.n	1136 <_sercom_get_default_pad+0x52>
    1126:	2900      	cmp	r1, #0
    1128:	d051      	beq.n	11ce <_sercom_get_default_pad+0xea>
    112a:	2902      	cmp	r1, #2
    112c:	d005      	beq.n	113a <_sercom_get_default_pad+0x56>
    112e:	2903      	cmp	r1, #3
    1130:	d005      	beq.n	113e <_sercom_get_default_pad+0x5a>
	return 0;
    1132:	2000      	movs	r0, #0
    1134:	e7e4      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1136:	4832      	ldr	r0, [pc, #200]	; (1200 <_sercom_get_default_pad+0x11c>)
    1138:	e7e2      	b.n	1100 <_sercom_get_default_pad+0x1c>
    113a:	4832      	ldr	r0, [pc, #200]	; (1204 <_sercom_get_default_pad+0x120>)
    113c:	e7e0      	b.n	1100 <_sercom_get_default_pad+0x1c>
    113e:	4832      	ldr	r0, [pc, #200]	; (1208 <_sercom_get_default_pad+0x124>)
    1140:	e7de      	b.n	1100 <_sercom_get_default_pad+0x1c>
    1142:	4832      	ldr	r0, [pc, #200]	; (120c <_sercom_get_default_pad+0x128>)
    1144:	e7dc      	b.n	1100 <_sercom_get_default_pad+0x1c>
    1146:	4832      	ldr	r0, [pc, #200]	; (1210 <_sercom_get_default_pad+0x12c>)
    1148:	e7da      	b.n	1100 <_sercom_get_default_pad+0x1c>
    114a:	4832      	ldr	r0, [pc, #200]	; (1214 <_sercom_get_default_pad+0x130>)
    114c:	e7d8      	b.n	1100 <_sercom_get_default_pad+0x1c>
    114e:	2901      	cmp	r1, #1
    1150:	d007      	beq.n	1162 <_sercom_get_default_pad+0x7e>
    1152:	2900      	cmp	r1, #0
    1154:	d03f      	beq.n	11d6 <_sercom_get_default_pad+0xf2>
    1156:	2902      	cmp	r1, #2
    1158:	d005      	beq.n	1166 <_sercom_get_default_pad+0x82>
    115a:	2903      	cmp	r1, #3
    115c:	d005      	beq.n	116a <_sercom_get_default_pad+0x86>
	return 0;
    115e:	2000      	movs	r0, #0
    1160:	e7ce      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1162:	482d      	ldr	r0, [pc, #180]	; (1218 <_sercom_get_default_pad+0x134>)
    1164:	e7cc      	b.n	1100 <_sercom_get_default_pad+0x1c>
    1166:	482d      	ldr	r0, [pc, #180]	; (121c <_sercom_get_default_pad+0x138>)
    1168:	e7ca      	b.n	1100 <_sercom_get_default_pad+0x1c>
    116a:	482d      	ldr	r0, [pc, #180]	; (1220 <_sercom_get_default_pad+0x13c>)
    116c:	e7c8      	b.n	1100 <_sercom_get_default_pad+0x1c>
    116e:	2901      	cmp	r1, #1
    1170:	d007      	beq.n	1182 <_sercom_get_default_pad+0x9e>
    1172:	2900      	cmp	r1, #0
    1174:	d031      	beq.n	11da <_sercom_get_default_pad+0xf6>
    1176:	2902      	cmp	r1, #2
    1178:	d005      	beq.n	1186 <_sercom_get_default_pad+0xa2>
    117a:	2903      	cmp	r1, #3
    117c:	d005      	beq.n	118a <_sercom_get_default_pad+0xa6>
	return 0;
    117e:	2000      	movs	r0, #0
    1180:	e7be      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1182:	4828      	ldr	r0, [pc, #160]	; (1224 <_sercom_get_default_pad+0x140>)
    1184:	e7bc      	b.n	1100 <_sercom_get_default_pad+0x1c>
    1186:	4828      	ldr	r0, [pc, #160]	; (1228 <_sercom_get_default_pad+0x144>)
    1188:	e7ba      	b.n	1100 <_sercom_get_default_pad+0x1c>
    118a:	4828      	ldr	r0, [pc, #160]	; (122c <_sercom_get_default_pad+0x148>)
    118c:	e7b8      	b.n	1100 <_sercom_get_default_pad+0x1c>
    118e:	2901      	cmp	r1, #1
    1190:	d007      	beq.n	11a2 <_sercom_get_default_pad+0xbe>
    1192:	2900      	cmp	r1, #0
    1194:	d023      	beq.n	11de <_sercom_get_default_pad+0xfa>
    1196:	2902      	cmp	r1, #2
    1198:	d005      	beq.n	11a6 <_sercom_get_default_pad+0xc2>
    119a:	2903      	cmp	r1, #3
    119c:	d005      	beq.n	11aa <_sercom_get_default_pad+0xc6>
	return 0;
    119e:	2000      	movs	r0, #0
    11a0:	e7ae      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11a2:	4823      	ldr	r0, [pc, #140]	; (1230 <_sercom_get_default_pad+0x14c>)
    11a4:	e7ac      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11a6:	4823      	ldr	r0, [pc, #140]	; (1234 <_sercom_get_default_pad+0x150>)
    11a8:	e7aa      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11aa:	4823      	ldr	r0, [pc, #140]	; (1238 <_sercom_get_default_pad+0x154>)
    11ac:	e7a8      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11ae:	2901      	cmp	r1, #1
    11b0:	d007      	beq.n	11c2 <_sercom_get_default_pad+0xde>
    11b2:	2900      	cmp	r1, #0
    11b4:	d015      	beq.n	11e2 <_sercom_get_default_pad+0xfe>
    11b6:	2902      	cmp	r1, #2
    11b8:	d005      	beq.n	11c6 <_sercom_get_default_pad+0xe2>
    11ba:	2903      	cmp	r1, #3
    11bc:	d005      	beq.n	11ca <_sercom_get_default_pad+0xe6>
	return 0;
    11be:	2000      	movs	r0, #0
    11c0:	e79e      	b.n	1100 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11c2:	481e      	ldr	r0, [pc, #120]	; (123c <_sercom_get_default_pad+0x158>)
    11c4:	e79c      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11c6:	481e      	ldr	r0, [pc, #120]	; (1240 <_sercom_get_default_pad+0x15c>)
    11c8:	e79a      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11ca:	481e      	ldr	r0, [pc, #120]	; (1244 <_sercom_get_default_pad+0x160>)
    11cc:	e798      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11ce:	481e      	ldr	r0, [pc, #120]	; (1248 <_sercom_get_default_pad+0x164>)
    11d0:	e796      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11d2:	2003      	movs	r0, #3
    11d4:	e794      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11d6:	481d      	ldr	r0, [pc, #116]	; (124c <_sercom_get_default_pad+0x168>)
    11d8:	e792      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11da:	481d      	ldr	r0, [pc, #116]	; (1250 <_sercom_get_default_pad+0x16c>)
    11dc:	e790      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11de:	481d      	ldr	r0, [pc, #116]	; (1254 <_sercom_get_default_pad+0x170>)
    11e0:	e78e      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11e2:	481d      	ldr	r0, [pc, #116]	; (1258 <_sercom_get_default_pad+0x174>)
    11e4:	e78c      	b.n	1100 <_sercom_get_default_pad+0x1c>
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	42001000 	.word	0x42001000
    11ec:	42001800 	.word	0x42001800
    11f0:	42001c00 	.word	0x42001c00
    11f4:	42001400 	.word	0x42001400
    11f8:	42000800 	.word	0x42000800
    11fc:	42000c00 	.word	0x42000c00
    1200:	00050003 	.word	0x00050003
    1204:	00060003 	.word	0x00060003
    1208:	00070003 	.word	0x00070003
    120c:	00010003 	.word	0x00010003
    1210:	001e0003 	.word	0x001e0003
    1214:	001f0003 	.word	0x001f0003
    1218:	00090003 	.word	0x00090003
    121c:	000a0003 	.word	0x000a0003
    1220:	000b0003 	.word	0x000b0003
    1224:	00110003 	.word	0x00110003
    1228:	00120003 	.word	0x00120003
    122c:	00130003 	.word	0x00130003
    1230:	000d0003 	.word	0x000d0003
    1234:	000e0003 	.word	0x000e0003
    1238:	000f0003 	.word	0x000f0003
    123c:	00170003 	.word	0x00170003
    1240:	00180003 	.word	0x00180003
    1244:	00190003 	.word	0x00190003
    1248:	00040003 	.word	0x00040003
    124c:	00080003 	.word	0x00080003
    1250:	00100003 	.word	0x00100003
    1254:	000c0003 	.word	0x000c0003
    1258:	00160003 	.word	0x00160003

0000125c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    125c:	b530      	push	{r4, r5, lr}
    125e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1260:	4b0b      	ldr	r3, [pc, #44]	; (1290 <_sercom_get_sercom_inst_index+0x34>)
    1262:	466a      	mov	r2, sp
    1264:	cb32      	ldmia	r3!, {r1, r4, r5}
    1266:	c232      	stmia	r2!, {r1, r4, r5}
    1268:	cb32      	ldmia	r3!, {r1, r4, r5}
    126a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    126c:	9b00      	ldr	r3, [sp, #0]
    126e:	4283      	cmp	r3, r0
    1270:	d00b      	beq.n	128a <_sercom_get_sercom_inst_index+0x2e>
    1272:	2301      	movs	r3, #1
    1274:	009a      	lsls	r2, r3, #2
    1276:	4669      	mov	r1, sp
    1278:	5852      	ldr	r2, [r2, r1]
    127a:	4282      	cmp	r2, r0
    127c:	d006      	beq.n	128c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    127e:	3301      	adds	r3, #1
    1280:	2b06      	cmp	r3, #6
    1282:	d1f7      	bne.n	1274 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1284:	2000      	movs	r0, #0
}
    1286:	b007      	add	sp, #28
    1288:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    128a:	2300      	movs	r3, #0
			return i;
    128c:	b2d8      	uxtb	r0, r3
    128e:	e7fa      	b.n	1286 <_sercom_get_sercom_inst_index+0x2a>
    1290:	00005530 	.word	0x00005530

00001294 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1294:	4770      	bx	lr
	...

00001298 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1298:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    129a:	4b0a      	ldr	r3, [pc, #40]	; (12c4 <_sercom_set_handler+0x2c>)
    129c:	781b      	ldrb	r3, [r3, #0]
    129e:	2b00      	cmp	r3, #0
    12a0:	d10c      	bne.n	12bc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    12a2:	4f09      	ldr	r7, [pc, #36]	; (12c8 <_sercom_set_handler+0x30>)
    12a4:	4e09      	ldr	r6, [pc, #36]	; (12cc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    12a6:	4d0a      	ldr	r5, [pc, #40]	; (12d0 <_sercom_set_handler+0x38>)
    12a8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    12aa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    12ac:	195a      	adds	r2, r3, r5
    12ae:	6014      	str	r4, [r2, #0]
    12b0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12b2:	2b18      	cmp	r3, #24
    12b4:	d1f9      	bne.n	12aa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    12b6:	2201      	movs	r2, #1
    12b8:	4b02      	ldr	r3, [pc, #8]	; (12c4 <_sercom_set_handler+0x2c>)
    12ba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    12bc:	0080      	lsls	r0, r0, #2
    12be:	4b02      	ldr	r3, [pc, #8]	; (12c8 <_sercom_set_handler+0x30>)
    12c0:	50c1      	str	r1, [r0, r3]
}
    12c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c4:	2000009a 	.word	0x2000009a
    12c8:	2000009c 	.word	0x2000009c
    12cc:	00001295 	.word	0x00001295
    12d0:	20000280 	.word	0x20000280

000012d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    12d4:	b500      	push	{lr}
    12d6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12d8:	2309      	movs	r3, #9
    12da:	466a      	mov	r2, sp
    12dc:	7013      	strb	r3, [r2, #0]
    12de:	3301      	adds	r3, #1
    12e0:	7053      	strb	r3, [r2, #1]
    12e2:	3301      	adds	r3, #1
    12e4:	7093      	strb	r3, [r2, #2]
    12e6:	3301      	adds	r3, #1
    12e8:	70d3      	strb	r3, [r2, #3]
    12ea:	3301      	adds	r3, #1
    12ec:	7113      	strb	r3, [r2, #4]
    12ee:	3301      	adds	r3, #1
    12f0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12f2:	4b03      	ldr	r3, [pc, #12]	; (1300 <_sercom_get_interrupt_vector+0x2c>)
    12f4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    12f6:	466b      	mov	r3, sp
    12f8:	5618      	ldrsb	r0, [r3, r0]
}
    12fa:	b003      	add	sp, #12
    12fc:	bd00      	pop	{pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	0000125d 	.word	0x0000125d

00001304 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1304:	b510      	push	{r4, lr}
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <SERCOM0_Handler+0xc>)
    1308:	681b      	ldr	r3, [r3, #0]
    130a:	2000      	movs	r0, #0
    130c:	4798      	blx	r3
    130e:	bd10      	pop	{r4, pc}
    1310:	2000009c 	.word	0x2000009c

00001314 <SERCOM1_Handler>:
    1314:	b510      	push	{r4, lr}
    1316:	4b02      	ldr	r3, [pc, #8]	; (1320 <SERCOM1_Handler+0xc>)
    1318:	685b      	ldr	r3, [r3, #4]
    131a:	2001      	movs	r0, #1
    131c:	4798      	blx	r3
    131e:	bd10      	pop	{r4, pc}
    1320:	2000009c 	.word	0x2000009c

00001324 <SERCOM2_Handler>:
    1324:	b510      	push	{r4, lr}
    1326:	4b02      	ldr	r3, [pc, #8]	; (1330 <SERCOM2_Handler+0xc>)
    1328:	689b      	ldr	r3, [r3, #8]
    132a:	2002      	movs	r0, #2
    132c:	4798      	blx	r3
    132e:	bd10      	pop	{r4, pc}
    1330:	2000009c 	.word	0x2000009c

00001334 <SERCOM3_Handler>:
    1334:	b510      	push	{r4, lr}
    1336:	4b02      	ldr	r3, [pc, #8]	; (1340 <SERCOM3_Handler+0xc>)
    1338:	68db      	ldr	r3, [r3, #12]
    133a:	2003      	movs	r0, #3
    133c:	4798      	blx	r3
    133e:	bd10      	pop	{r4, pc}
    1340:	2000009c 	.word	0x2000009c

00001344 <SERCOM4_Handler>:
    1344:	b510      	push	{r4, lr}
    1346:	4b02      	ldr	r3, [pc, #8]	; (1350 <SERCOM4_Handler+0xc>)
    1348:	691b      	ldr	r3, [r3, #16]
    134a:	2004      	movs	r0, #4
    134c:	4798      	blx	r3
    134e:	bd10      	pop	{r4, pc}
    1350:	2000009c 	.word	0x2000009c

00001354 <SERCOM5_Handler>:
    1354:	b510      	push	{r4, lr}
    1356:	4b02      	ldr	r3, [pc, #8]	; (1360 <SERCOM5_Handler+0xc>)
    1358:	695b      	ldr	r3, [r3, #20]
    135a:	2005      	movs	r0, #5
    135c:	4798      	blx	r3
    135e:	bd10      	pop	{r4, pc}
    1360:	2000009c 	.word	0x2000009c

00001364 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1364:	b5f0      	push	{r4, r5, r6, r7, lr}
    1366:	46de      	mov	lr, fp
    1368:	4657      	mov	r7, sl
    136a:	464e      	mov	r6, r9
    136c:	4645      	mov	r5, r8
    136e:	b5e0      	push	{r5, r6, r7, lr}
    1370:	b091      	sub	sp, #68	; 0x44
    1372:	0005      	movs	r5, r0
    1374:	000c      	movs	r4, r1
    1376:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1378:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    137a:	0008      	movs	r0, r1
    137c:	4bbc      	ldr	r3, [pc, #752]	; (1670 <usart_init+0x30c>)
    137e:	4798      	blx	r3
    1380:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1382:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1384:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1386:	07db      	lsls	r3, r3, #31
    1388:	d506      	bpl.n	1398 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    138a:	b011      	add	sp, #68	; 0x44
    138c:	bc3c      	pop	{r2, r3, r4, r5}
    138e:	4690      	mov	r8, r2
    1390:	4699      	mov	r9, r3
    1392:	46a2      	mov	sl, r4
    1394:	46ab      	mov	fp, r5
    1396:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1398:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    139a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    139c:	079b      	lsls	r3, r3, #30
    139e:	d4f4      	bmi.n	138a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    13a0:	49b4      	ldr	r1, [pc, #720]	; (1674 <usart_init+0x310>)
    13a2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13a4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13a6:	2301      	movs	r3, #1
    13a8:	40bb      	lsls	r3, r7
    13aa:	4303      	orrs	r3, r0
    13ac:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    13ae:	a90f      	add	r1, sp, #60	; 0x3c
    13b0:	272d      	movs	r7, #45	; 0x2d
    13b2:	5df3      	ldrb	r3, [r6, r7]
    13b4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13b6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13b8:	b2d3      	uxtb	r3, r2
    13ba:	9302      	str	r3, [sp, #8]
    13bc:	0018      	movs	r0, r3
    13be:	4bae      	ldr	r3, [pc, #696]	; (1678 <usart_init+0x314>)
    13c0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13c2:	9802      	ldr	r0, [sp, #8]
    13c4:	4bad      	ldr	r3, [pc, #692]	; (167c <usart_init+0x318>)
    13c6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13c8:	5df0      	ldrb	r0, [r6, r7]
    13ca:	2100      	movs	r1, #0
    13cc:	4bac      	ldr	r3, [pc, #688]	; (1680 <usart_init+0x31c>)
    13ce:	4798      	blx	r3
	module->character_size = config->character_size;
    13d0:	7af3      	ldrb	r3, [r6, #11]
    13d2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    13d4:	2324      	movs	r3, #36	; 0x24
    13d6:	5cf3      	ldrb	r3, [r6, r3]
    13d8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    13da:	2325      	movs	r3, #37	; 0x25
    13dc:	5cf3      	ldrb	r3, [r6, r3]
    13de:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    13e0:	7ef3      	ldrb	r3, [r6, #27]
    13e2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    13e4:	7f33      	ldrb	r3, [r6, #28]
    13e6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13e8:	682b      	ldr	r3, [r5, #0]
    13ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13ec:	0018      	movs	r0, r3
    13ee:	4ba0      	ldr	r3, [pc, #640]	; (1670 <usart_init+0x30c>)
    13f0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13f2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    13f4:	2200      	movs	r2, #0
    13f6:	230e      	movs	r3, #14
    13f8:	a906      	add	r1, sp, #24
    13fa:	468c      	mov	ip, r1
    13fc:	4463      	add	r3, ip
    13fe:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1400:	8a32      	ldrh	r2, [r6, #16]
    1402:	9202      	str	r2, [sp, #8]
    1404:	2380      	movs	r3, #128	; 0x80
    1406:	01db      	lsls	r3, r3, #7
    1408:	429a      	cmp	r2, r3
    140a:	d100      	bne.n	140e <usart_init+0xaa>
    140c:	e09e      	b.n	154c <usart_init+0x1e8>
    140e:	d90f      	bls.n	1430 <usart_init+0xcc>
    1410:	23c0      	movs	r3, #192	; 0xc0
    1412:	01db      	lsls	r3, r3, #7
    1414:	9a02      	ldr	r2, [sp, #8]
    1416:	429a      	cmp	r2, r3
    1418:	d100      	bne.n	141c <usart_init+0xb8>
    141a:	e092      	b.n	1542 <usart_init+0x1de>
    141c:	2380      	movs	r3, #128	; 0x80
    141e:	021b      	lsls	r3, r3, #8
    1420:	429a      	cmp	r2, r3
    1422:	d000      	beq.n	1426 <usart_init+0xc2>
    1424:	e11f      	b.n	1666 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1426:	2303      	movs	r3, #3
    1428:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    142a:	2300      	movs	r3, #0
    142c:	9307      	str	r3, [sp, #28]
    142e:	e008      	b.n	1442 <usart_init+0xde>
	switch (config->sample_rate) {
    1430:	2380      	movs	r3, #128	; 0x80
    1432:	019b      	lsls	r3, r3, #6
    1434:	429a      	cmp	r2, r3
    1436:	d000      	beq.n	143a <usart_init+0xd6>
    1438:	e115      	b.n	1666 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    143a:	2310      	movs	r3, #16
    143c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    143e:	3b0f      	subs	r3, #15
    1440:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1442:	6833      	ldr	r3, [r6, #0]
    1444:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1446:	68f3      	ldr	r3, [r6, #12]
    1448:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    144a:	6973      	ldr	r3, [r6, #20]
    144c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    144e:	7e33      	ldrb	r3, [r6, #24]
    1450:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1452:	2326      	movs	r3, #38	; 0x26
    1454:	5cf3      	ldrb	r3, [r6, r3]
    1456:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1458:	6873      	ldr	r3, [r6, #4]
    145a:	4699      	mov	r9, r3
	switch (transfer_mode)
    145c:	2b00      	cmp	r3, #0
    145e:	d100      	bne.n	1462 <usart_init+0xfe>
    1460:	e0a0      	b.n	15a4 <usart_init+0x240>
    1462:	2380      	movs	r3, #128	; 0x80
    1464:	055b      	lsls	r3, r3, #21
    1466:	4599      	cmp	r9, r3
    1468:	d100      	bne.n	146c <usart_init+0x108>
    146a:	e084      	b.n	1576 <usart_init+0x212>
	if(config->encoding_format_enable) {
    146c:	7e73      	ldrb	r3, [r6, #25]
    146e:	2b00      	cmp	r3, #0
    1470:	d002      	beq.n	1478 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1472:	7eb3      	ldrb	r3, [r6, #26]
    1474:	4642      	mov	r2, r8
    1476:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1478:	682a      	ldr	r2, [r5, #0]
    147a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    147c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    147e:	2b00      	cmp	r3, #0
    1480:	d1fc      	bne.n	147c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1482:	330e      	adds	r3, #14
    1484:	aa06      	add	r2, sp, #24
    1486:	4694      	mov	ip, r2
    1488:	4463      	add	r3, ip
    148a:	881b      	ldrh	r3, [r3, #0]
    148c:	4642      	mov	r2, r8
    148e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1490:	9b05      	ldr	r3, [sp, #20]
    1492:	9a03      	ldr	r2, [sp, #12]
    1494:	4313      	orrs	r3, r2
    1496:	9a04      	ldr	r2, [sp, #16]
    1498:	4313      	orrs	r3, r2
    149a:	464a      	mov	r2, r9
    149c:	4313      	orrs	r3, r2
    149e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14a0:	465b      	mov	r3, fp
    14a2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    14a4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14a6:	4653      	mov	r3, sl
    14a8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    14aa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    14ac:	2327      	movs	r3, #39	; 0x27
    14ae:	5cf3      	ldrb	r3, [r6, r3]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d101      	bne.n	14b8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14b4:	3304      	adds	r3, #4
    14b6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14b8:	7e73      	ldrb	r3, [r6, #25]
    14ba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14bc:	7f32      	ldrb	r2, [r6, #28]
    14be:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14c0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14c2:	7f72      	ldrb	r2, [r6, #29]
    14c4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14c6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14c8:	2224      	movs	r2, #36	; 0x24
    14ca:	5cb2      	ldrb	r2, [r6, r2]
    14cc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14ce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14d0:	2225      	movs	r2, #37	; 0x25
    14d2:	5cb2      	ldrb	r2, [r6, r2]
    14d4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14d6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    14d8:	7ab1      	ldrb	r1, [r6, #10]
    14da:	7af2      	ldrb	r2, [r6, #11]
    14dc:	4311      	orrs	r1, r2
    14de:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    14e0:	8933      	ldrh	r3, [r6, #8]
    14e2:	2bff      	cmp	r3, #255	; 0xff
    14e4:	d100      	bne.n	14e8 <usart_init+0x184>
    14e6:	e081      	b.n	15ec <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	0452      	lsls	r2, r2, #17
    14ec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    14ee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    14f0:	232c      	movs	r3, #44	; 0x2c
    14f2:	5cf3      	ldrb	r3, [r6, r3]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d103      	bne.n	1500 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14f8:	4b62      	ldr	r3, [pc, #392]	; (1684 <usart_init+0x320>)
    14fa:	789b      	ldrb	r3, [r3, #2]
    14fc:	079b      	lsls	r3, r3, #30
    14fe:	d501      	bpl.n	1504 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1500:	2380      	movs	r3, #128	; 0x80
    1502:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1504:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1506:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1508:	2b00      	cmp	r3, #0
    150a:	d1fc      	bne.n	1506 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    150c:	4643      	mov	r3, r8
    150e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1510:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1512:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1514:	2b00      	cmp	r3, #0
    1516:	d1fc      	bne.n	1512 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1518:	4643      	mov	r3, r8
    151a:	601f      	str	r7, [r3, #0]
    151c:	ab0e      	add	r3, sp, #56	; 0x38
    151e:	2280      	movs	r2, #128	; 0x80
    1520:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1522:	2200      	movs	r2, #0
    1524:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1526:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1528:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    152a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    152c:	930a      	str	r3, [sp, #40]	; 0x28
    152e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1530:	930b      	str	r3, [sp, #44]	; 0x2c
    1532:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1534:	930c      	str	r3, [sp, #48]	; 0x30
    1536:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1538:	9302      	str	r3, [sp, #8]
    153a:	930d      	str	r3, [sp, #52]	; 0x34
    153c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    153e:	ae0a      	add	r6, sp, #40	; 0x28
    1540:	e063      	b.n	160a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1542:	2308      	movs	r3, #8
    1544:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1546:	3b07      	subs	r3, #7
    1548:	9307      	str	r3, [sp, #28]
    154a:	e77a      	b.n	1442 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    154c:	6833      	ldr	r3, [r6, #0]
    154e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1550:	68f3      	ldr	r3, [r6, #12]
    1552:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1554:	6973      	ldr	r3, [r6, #20]
    1556:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1558:	7e33      	ldrb	r3, [r6, #24]
    155a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    155c:	2326      	movs	r3, #38	; 0x26
    155e:	5cf3      	ldrb	r3, [r6, r3]
    1560:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1562:	6873      	ldr	r3, [r6, #4]
    1564:	4699      	mov	r9, r3
	switch (transfer_mode)
    1566:	2b00      	cmp	r3, #0
    1568:	d018      	beq.n	159c <usart_init+0x238>
    156a:	2380      	movs	r3, #128	; 0x80
    156c:	055b      	lsls	r3, r3, #21
    156e:	4599      	cmp	r9, r3
    1570:	d001      	beq.n	1576 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1572:	2000      	movs	r0, #0
    1574:	e025      	b.n	15c2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1576:	2327      	movs	r3, #39	; 0x27
    1578:	5cf3      	ldrb	r3, [r6, r3]
    157a:	2b00      	cmp	r3, #0
    157c:	d000      	beq.n	1580 <usart_init+0x21c>
    157e:	e775      	b.n	146c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1580:	6a33      	ldr	r3, [r6, #32]
    1582:	001f      	movs	r7, r3
    1584:	b2c0      	uxtb	r0, r0
    1586:	4b40      	ldr	r3, [pc, #256]	; (1688 <usart_init+0x324>)
    1588:	4798      	blx	r3
    158a:	0001      	movs	r1, r0
    158c:	220e      	movs	r2, #14
    158e:	ab06      	add	r3, sp, #24
    1590:	469c      	mov	ip, r3
    1592:	4462      	add	r2, ip
    1594:	0038      	movs	r0, r7
    1596:	4b3d      	ldr	r3, [pc, #244]	; (168c <usart_init+0x328>)
    1598:	4798      	blx	r3
    159a:	e012      	b.n	15c2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    159c:	2308      	movs	r3, #8
    159e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15a0:	2300      	movs	r3, #0
    15a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    15a4:	2327      	movs	r3, #39	; 0x27
    15a6:	5cf3      	ldrb	r3, [r6, r3]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d00e      	beq.n	15ca <usart_init+0x266>
				status_code =
    15ac:	9b06      	ldr	r3, [sp, #24]
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	9b07      	ldr	r3, [sp, #28]
    15b2:	220e      	movs	r2, #14
    15b4:	a906      	add	r1, sp, #24
    15b6:	468c      	mov	ip, r1
    15b8:	4462      	add	r2, ip
    15ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15bc:	6a30      	ldr	r0, [r6, #32]
    15be:	4f34      	ldr	r7, [pc, #208]	; (1690 <usart_init+0x32c>)
    15c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    15c2:	2800      	cmp	r0, #0
    15c4:	d000      	beq.n	15c8 <usart_init+0x264>
    15c6:	e6e0      	b.n	138a <usart_init+0x26>
    15c8:	e750      	b.n	146c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    15ca:	6a33      	ldr	r3, [r6, #32]
    15cc:	001f      	movs	r7, r3
    15ce:	b2c0      	uxtb	r0, r0
    15d0:	4b2d      	ldr	r3, [pc, #180]	; (1688 <usart_init+0x324>)
    15d2:	4798      	blx	r3
    15d4:	0001      	movs	r1, r0
				status_code =
    15d6:	9b06      	ldr	r3, [sp, #24]
    15d8:	9300      	str	r3, [sp, #0]
    15da:	9b07      	ldr	r3, [sp, #28]
    15dc:	220e      	movs	r2, #14
    15de:	a806      	add	r0, sp, #24
    15e0:	4684      	mov	ip, r0
    15e2:	4462      	add	r2, ip
    15e4:	0038      	movs	r0, r7
    15e6:	4f2a      	ldr	r7, [pc, #168]	; (1690 <usart_init+0x32c>)
    15e8:	47b8      	blx	r7
    15ea:	e7ea      	b.n	15c2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    15ec:	7ef3      	ldrb	r3, [r6, #27]
    15ee:	2b00      	cmp	r3, #0
    15f0:	d100      	bne.n	15f4 <usart_init+0x290>
    15f2:	e77d      	b.n	14f0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15f4:	2380      	movs	r3, #128	; 0x80
    15f6:	04db      	lsls	r3, r3, #19
    15f8:	431f      	orrs	r7, r3
    15fa:	e779      	b.n	14f0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15fc:	0020      	movs	r0, r4
    15fe:	4b25      	ldr	r3, [pc, #148]	; (1694 <usart_init+0x330>)
    1600:	4798      	blx	r3
    1602:	e007      	b.n	1614 <usart_init+0x2b0>
    1604:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1606:	2f04      	cmp	r7, #4
    1608:	d00d      	beq.n	1626 <usart_init+0x2c2>
    160a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    160c:	00bb      	lsls	r3, r7, #2
    160e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1610:	2800      	cmp	r0, #0
    1612:	d0f3      	beq.n	15fc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1614:	1c43      	adds	r3, r0, #1
    1616:	d0f5      	beq.n	1604 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1618:	a90e      	add	r1, sp, #56	; 0x38
    161a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    161c:	0c00      	lsrs	r0, r0, #16
    161e:	b2c0      	uxtb	r0, r0
    1620:	4b1d      	ldr	r3, [pc, #116]	; (1698 <usart_init+0x334>)
    1622:	4798      	blx	r3
    1624:	e7ee      	b.n	1604 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1626:	2300      	movs	r3, #0
    1628:	60eb      	str	r3, [r5, #12]
    162a:	612b      	str	r3, [r5, #16]
    162c:	616b      	str	r3, [r5, #20]
    162e:	61ab      	str	r3, [r5, #24]
    1630:	61eb      	str	r3, [r5, #28]
    1632:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1634:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1636:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1638:	2200      	movs	r2, #0
    163a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    163c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    163e:	3330      	adds	r3, #48	; 0x30
    1640:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1642:	3301      	adds	r3, #1
    1644:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1646:	3301      	adds	r3, #1
    1648:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    164a:	3301      	adds	r3, #1
    164c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    164e:	6828      	ldr	r0, [r5, #0]
    1650:	4b07      	ldr	r3, [pc, #28]	; (1670 <usart_init+0x30c>)
    1652:	4798      	blx	r3
    1654:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1656:	4911      	ldr	r1, [pc, #68]	; (169c <usart_init+0x338>)
    1658:	4b11      	ldr	r3, [pc, #68]	; (16a0 <usart_init+0x33c>)
    165a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    165c:	00a4      	lsls	r4, r4, #2
    165e:	4b11      	ldr	r3, [pc, #68]	; (16a4 <usart_init+0x340>)
    1660:	50e5      	str	r5, [r4, r3]
	return status_code;
    1662:	2000      	movs	r0, #0
    1664:	e691      	b.n	138a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1666:	2310      	movs	r3, #16
    1668:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    166a:	2300      	movs	r3, #0
    166c:	9307      	str	r3, [sp, #28]
    166e:	e6e8      	b.n	1442 <usart_init+0xde>
    1670:	0000125d 	.word	0x0000125d
    1674:	40000400 	.word	0x40000400
    1678:	00001eb5 	.word	0x00001eb5
    167c:	00001e29 	.word	0x00001e29
    1680:	00001099 	.word	0x00001099
    1684:	41002000 	.word	0x41002000
    1688:	00001ed1 	.word	0x00001ed1
    168c:	00000fdb 	.word	0x00000fdb
    1690:	00001005 	.word	0x00001005
    1694:	000010e5 	.word	0x000010e5
    1698:	00001fad 	.word	0x00001fad
    169c:	000017cd 	.word	0x000017cd
    16a0:	00001299 	.word	0x00001299
    16a4:	20000280 	.word	0x20000280

000016a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    16a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    16aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    16ac:	2a00      	cmp	r2, #0
    16ae:	d101      	bne.n	16b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    16b0:	0018      	movs	r0, r3
    16b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    16b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    16b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    16ba:	2a00      	cmp	r2, #0
    16bc:	d1f8      	bne.n	16b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16be:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    16c0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    16c2:	2a00      	cmp	r2, #0
    16c4:	d1fc      	bne.n	16c0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    16c6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    16c8:	2102      	movs	r1, #2
    16ca:	7e1a      	ldrb	r2, [r3, #24]
    16cc:	420a      	tst	r2, r1
    16ce:	d0fc      	beq.n	16ca <usart_write_wait+0x22>
	return STATUS_OK;
    16d0:	2300      	movs	r3, #0
    16d2:	e7ed      	b.n	16b0 <usart_write_wait+0x8>

000016d4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16d4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    16d6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    16d8:	2a00      	cmp	r2, #0
    16da:	d101      	bne.n	16e0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    16dc:	0018      	movs	r0, r3
    16de:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    16e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    16e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16e4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    16e6:	2a00      	cmp	r2, #0
    16e8:	d1f8      	bne.n	16dc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16ea:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16ec:	7e10      	ldrb	r0, [r2, #24]
    16ee:	0740      	lsls	r0, r0, #29
    16f0:	d5f4      	bpl.n	16dc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    16f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    16f4:	2b00      	cmp	r3, #0
    16f6:	d1fc      	bne.n	16f2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16f8:	8b53      	ldrh	r3, [r2, #26]
    16fa:	b2db      	uxtb	r3, r3
	if (error_code) {
    16fc:	0698      	lsls	r0, r3, #26
    16fe:	d01d      	beq.n	173c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1700:	0798      	lsls	r0, r3, #30
    1702:	d503      	bpl.n	170c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1704:	2302      	movs	r3, #2
    1706:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1708:	3318      	adds	r3, #24
    170a:	e7e7      	b.n	16dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    170c:	0758      	lsls	r0, r3, #29
    170e:	d503      	bpl.n	1718 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1710:	2304      	movs	r3, #4
    1712:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1714:	331a      	adds	r3, #26
    1716:	e7e1      	b.n	16dc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1718:	07d8      	lsls	r0, r3, #31
    171a:	d503      	bpl.n	1724 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    171c:	2301      	movs	r3, #1
    171e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1720:	3312      	adds	r3, #18
    1722:	e7db      	b.n	16dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1724:	06d8      	lsls	r0, r3, #27
    1726:	d503      	bpl.n	1730 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1728:	2310      	movs	r3, #16
    172a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    172c:	3332      	adds	r3, #50	; 0x32
    172e:	e7d5      	b.n	16dc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1730:	069b      	lsls	r3, r3, #26
    1732:	d503      	bpl.n	173c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1734:	2320      	movs	r3, #32
    1736:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1738:	3321      	adds	r3, #33	; 0x21
    173a:	e7cf      	b.n	16dc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    173c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    173e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1740:	2300      	movs	r3, #0
    1742:	e7cb      	b.n	16dc <usart_read_wait+0x8>

00001744 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1746:	0004      	movs	r4, r0
    1748:	000d      	movs	r5, r1
    174a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    174c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    174e:	4b0f      	ldr	r3, [pc, #60]	; (178c <_usart_read_buffer+0x48>)
    1750:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1752:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1754:	b29b      	uxth	r3, r3
    1756:	2b00      	cmp	r3, #0
    1758:	d003      	beq.n	1762 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    175a:	4b0d      	ldr	r3, [pc, #52]	; (1790 <_usart_read_buffer+0x4c>)
    175c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    175e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1762:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1764:	4b0a      	ldr	r3, [pc, #40]	; (1790 <_usart_read_buffer+0x4c>)
    1766:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1768:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    176a:	2205      	movs	r2, #5
    176c:	2332      	movs	r3, #50	; 0x32
    176e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1770:	3b2e      	subs	r3, #46	; 0x2e
    1772:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1774:	7a23      	ldrb	r3, [r4, #8]
    1776:	2b00      	cmp	r3, #0
    1778:	d001      	beq.n	177e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    177a:	2320      	movs	r3, #32
    177c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    177e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1780:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1782:	2b00      	cmp	r3, #0
    1784:	d0ec      	beq.n	1760 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1786:	2308      	movs	r3, #8
    1788:	75bb      	strb	r3, [r7, #22]
    178a:	e7e9      	b.n	1760 <_usart_read_buffer+0x1c>
    178c:	000005c1 	.word	0x000005c1
    1790:	00000601 	.word	0x00000601

00001794 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1794:	1c93      	adds	r3, r2, #2
    1796:	009b      	lsls	r3, r3, #2
    1798:	18c3      	adds	r3, r0, r3
    179a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    179c:	2130      	movs	r1, #48	; 0x30
    179e:	2301      	movs	r3, #1
    17a0:	4093      	lsls	r3, r2
    17a2:	001a      	movs	r2, r3
    17a4:	5c43      	ldrb	r3, [r0, r1]
    17a6:	4313      	orrs	r3, r2
    17a8:	5443      	strb	r3, [r0, r1]
}
    17aa:	4770      	bx	lr

000017ac <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    17ae:	2317      	movs	r3, #23
	if (length == 0) {
    17b0:	2a00      	cmp	r2, #0
    17b2:	d101      	bne.n	17b8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    17b4:	0018      	movs	r0, r3
    17b6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    17b8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    17ba:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    17bc:	2c00      	cmp	r4, #0
    17be:	d0f9      	beq.n	17b4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    17c0:	4b01      	ldr	r3, [pc, #4]	; (17c8 <usart_read_buffer_job+0x1c>)
    17c2:	4798      	blx	r3
    17c4:	0003      	movs	r3, r0
    17c6:	e7f5      	b.n	17b4 <usart_read_buffer_job+0x8>
    17c8:	00001745 	.word	0x00001745

000017cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    17cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    17ce:	0080      	lsls	r0, r0, #2
    17d0:	4b62      	ldr	r3, [pc, #392]	; (195c <_usart_interrupt_handler+0x190>)
    17d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    17d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    17d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    17d8:	2b00      	cmp	r3, #0
    17da:	d1fc      	bne.n	17d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    17de:	7da6      	ldrb	r6, [r4, #22]
    17e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    17e2:	2330      	movs	r3, #48	; 0x30
    17e4:	5ceb      	ldrb	r3, [r5, r3]
    17e6:	2231      	movs	r2, #49	; 0x31
    17e8:	5caf      	ldrb	r7, [r5, r2]
    17ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    17ec:	07f3      	lsls	r3, r6, #31
    17ee:	d522      	bpl.n	1836 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    17f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    17f2:	b29b      	uxth	r3, r3
    17f4:	2b00      	cmp	r3, #0
    17f6:	d01c      	beq.n	1832 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    17fa:	7813      	ldrb	r3, [r2, #0]
    17fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    17fe:	1c51      	adds	r1, r2, #1
    1800:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1802:	7969      	ldrb	r1, [r5, #5]
    1804:	2901      	cmp	r1, #1
    1806:	d00e      	beq.n	1826 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1808:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    180a:	05db      	lsls	r3, r3, #23
    180c:	0ddb      	lsrs	r3, r3, #23
    180e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1810:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1812:	3b01      	subs	r3, #1
    1814:	b29b      	uxth	r3, r3
    1816:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1818:	2b00      	cmp	r3, #0
    181a:	d10c      	bne.n	1836 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    181c:	3301      	adds	r3, #1
    181e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1820:	3301      	adds	r3, #1
    1822:	75a3      	strb	r3, [r4, #22]
    1824:	e007      	b.n	1836 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1826:	7851      	ldrb	r1, [r2, #1]
    1828:	0209      	lsls	r1, r1, #8
    182a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    182c:	3202      	adds	r2, #2
    182e:	62aa      	str	r2, [r5, #40]	; 0x28
    1830:	e7eb      	b.n	180a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1832:	2301      	movs	r3, #1
    1834:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1836:	07b3      	lsls	r3, r6, #30
    1838:	d506      	bpl.n	1848 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    183a:	2302      	movs	r3, #2
    183c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    183e:	2200      	movs	r2, #0
    1840:	3331      	adds	r3, #49	; 0x31
    1842:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1844:	07fb      	lsls	r3, r7, #31
    1846:	d41a      	bmi.n	187e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1848:	0773      	lsls	r3, r6, #29
    184a:	d565      	bpl.n	1918 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    184c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    184e:	b29b      	uxth	r3, r3
    1850:	2b00      	cmp	r3, #0
    1852:	d05f      	beq.n	1914 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1854:	8b63      	ldrh	r3, [r4, #26]
    1856:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1858:	071a      	lsls	r2, r3, #28
    185a:	d414      	bmi.n	1886 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    185c:	223f      	movs	r2, #63	; 0x3f
    185e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1860:	2b00      	cmp	r3, #0
    1862:	d034      	beq.n	18ce <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1864:	079a      	lsls	r2, r3, #30
    1866:	d511      	bpl.n	188c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1868:	221a      	movs	r2, #26
    186a:	2332      	movs	r3, #50	; 0x32
    186c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    186e:	3b30      	subs	r3, #48	; 0x30
    1870:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1872:	077b      	lsls	r3, r7, #29
    1874:	d550      	bpl.n	1918 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1876:	0028      	movs	r0, r5
    1878:	696b      	ldr	r3, [r5, #20]
    187a:	4798      	blx	r3
    187c:	e04c      	b.n	1918 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    187e:	0028      	movs	r0, r5
    1880:	68eb      	ldr	r3, [r5, #12]
    1882:	4798      	blx	r3
    1884:	e7e0      	b.n	1848 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1886:	2237      	movs	r2, #55	; 0x37
    1888:	4013      	ands	r3, r2
    188a:	e7e9      	b.n	1860 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    188c:	075a      	lsls	r2, r3, #29
    188e:	d505      	bpl.n	189c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1890:	221e      	movs	r2, #30
    1892:	2332      	movs	r3, #50	; 0x32
    1894:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1896:	3b2e      	subs	r3, #46	; 0x2e
    1898:	8363      	strh	r3, [r4, #26]
    189a:	e7ea      	b.n	1872 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    189c:	07da      	lsls	r2, r3, #31
    189e:	d505      	bpl.n	18ac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    18a0:	2213      	movs	r2, #19
    18a2:	2332      	movs	r3, #50	; 0x32
    18a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18a6:	3b31      	subs	r3, #49	; 0x31
    18a8:	8363      	strh	r3, [r4, #26]
    18aa:	e7e2      	b.n	1872 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    18ac:	06da      	lsls	r2, r3, #27
    18ae:	d505      	bpl.n	18bc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    18b0:	2242      	movs	r2, #66	; 0x42
    18b2:	2332      	movs	r3, #50	; 0x32
    18b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18b6:	3b22      	subs	r3, #34	; 0x22
    18b8:	8363      	strh	r3, [r4, #26]
    18ba:	e7da      	b.n	1872 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18bc:	2220      	movs	r2, #32
    18be:	421a      	tst	r2, r3
    18c0:	d0d7      	beq.n	1872 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18c2:	3221      	adds	r2, #33	; 0x21
    18c4:	2332      	movs	r3, #50	; 0x32
    18c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18c8:	3b12      	subs	r3, #18
    18ca:	8363      	strh	r3, [r4, #26]
    18cc:	e7d1      	b.n	1872 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    18ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    18d0:	05db      	lsls	r3, r3, #23
    18d2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    18d4:	b2da      	uxtb	r2, r3
    18d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    18d8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    18da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    18dc:	1c51      	adds	r1, r2, #1
    18de:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18e0:	7969      	ldrb	r1, [r5, #5]
    18e2:	2901      	cmp	r1, #1
    18e4:	d010      	beq.n	1908 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    18e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18e8:	3b01      	subs	r3, #1
    18ea:	b29b      	uxth	r3, r3
    18ec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    18ee:	2b00      	cmp	r3, #0
    18f0:	d112      	bne.n	1918 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18f2:	3304      	adds	r3, #4
    18f4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    18f6:	2200      	movs	r2, #0
    18f8:	332e      	adds	r3, #46	; 0x2e
    18fa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    18fc:	07bb      	lsls	r3, r7, #30
    18fe:	d50b      	bpl.n	1918 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1900:	0028      	movs	r0, r5
    1902:	692b      	ldr	r3, [r5, #16]
    1904:	4798      	blx	r3
    1906:	e007      	b.n	1918 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1908:	0a1b      	lsrs	r3, r3, #8
    190a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    190c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    190e:	3301      	adds	r3, #1
    1910:	626b      	str	r3, [r5, #36]	; 0x24
    1912:	e7e8      	b.n	18e6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1914:	2304      	movs	r3, #4
    1916:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1918:	06f3      	lsls	r3, r6, #27
    191a:	d504      	bpl.n	1926 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    191c:	2310      	movs	r3, #16
    191e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1920:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1922:	06fb      	lsls	r3, r7, #27
    1924:	d40e      	bmi.n	1944 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1926:	06b3      	lsls	r3, r6, #26
    1928:	d504      	bpl.n	1934 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    192a:	2320      	movs	r3, #32
    192c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    192e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1930:	073b      	lsls	r3, r7, #28
    1932:	d40b      	bmi.n	194c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1934:	0733      	lsls	r3, r6, #28
    1936:	d504      	bpl.n	1942 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1938:	2308      	movs	r3, #8
    193a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    193c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    193e:	06bb      	lsls	r3, r7, #26
    1940:	d408      	bmi.n	1954 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1944:	0028      	movs	r0, r5
    1946:	69eb      	ldr	r3, [r5, #28]
    1948:	4798      	blx	r3
    194a:	e7ec      	b.n	1926 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    194c:	0028      	movs	r0, r5
    194e:	69ab      	ldr	r3, [r5, #24]
    1950:	4798      	blx	r3
    1952:	e7ef      	b.n	1934 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1954:	6a2b      	ldr	r3, [r5, #32]
    1956:	0028      	movs	r0, r5
    1958:	4798      	blx	r3
}
    195a:	e7f2      	b.n	1942 <_usart_interrupt_handler+0x176>
    195c:	20000280 	.word	0x20000280

00001960 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1960:	b510      	push	{r4, lr}
	switch (clock_source) {
    1962:	2808      	cmp	r0, #8
    1964:	d803      	bhi.n	196e <system_clock_source_get_hz+0xe>
    1966:	0080      	lsls	r0, r0, #2
    1968:	4b1b      	ldr	r3, [pc, #108]	; (19d8 <system_clock_source_get_hz+0x78>)
    196a:	581b      	ldr	r3, [r3, r0]
    196c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    196e:	2000      	movs	r0, #0
    1970:	e030      	b.n	19d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1972:	4b1a      	ldr	r3, [pc, #104]	; (19dc <system_clock_source_get_hz+0x7c>)
    1974:	6918      	ldr	r0, [r3, #16]
    1976:	e02d      	b.n	19d4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1978:	4b19      	ldr	r3, [pc, #100]	; (19e0 <system_clock_source_get_hz+0x80>)
    197a:	6a1b      	ldr	r3, [r3, #32]
    197c:	059b      	lsls	r3, r3, #22
    197e:	0f9b      	lsrs	r3, r3, #30
    1980:	4818      	ldr	r0, [pc, #96]	; (19e4 <system_clock_source_get_hz+0x84>)
    1982:	40d8      	lsrs	r0, r3
    1984:	e026      	b.n	19d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1986:	4b15      	ldr	r3, [pc, #84]	; (19dc <system_clock_source_get_hz+0x7c>)
    1988:	6958      	ldr	r0, [r3, #20]
    198a:	e023      	b.n	19d4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    198c:	4b13      	ldr	r3, [pc, #76]	; (19dc <system_clock_source_get_hz+0x7c>)
    198e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1990:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1992:	079b      	lsls	r3, r3, #30
    1994:	d51e      	bpl.n	19d4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1996:	4912      	ldr	r1, [pc, #72]	; (19e0 <system_clock_source_get_hz+0x80>)
    1998:	2210      	movs	r2, #16
    199a:	68cb      	ldr	r3, [r1, #12]
    199c:	421a      	tst	r2, r3
    199e:	d0fc      	beq.n	199a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19a0:	4b0e      	ldr	r3, [pc, #56]	; (19dc <system_clock_source_get_hz+0x7c>)
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	075b      	lsls	r3, r3, #29
    19a6:	d401      	bmi.n	19ac <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    19a8:	480f      	ldr	r0, [pc, #60]	; (19e8 <system_clock_source_get_hz+0x88>)
    19aa:	e013      	b.n	19d4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19ac:	2000      	movs	r0, #0
    19ae:	4b0f      	ldr	r3, [pc, #60]	; (19ec <system_clock_source_get_hz+0x8c>)
    19b0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19b2:	4b0a      	ldr	r3, [pc, #40]	; (19dc <system_clock_source_get_hz+0x7c>)
    19b4:	689b      	ldr	r3, [r3, #8]
    19b6:	041b      	lsls	r3, r3, #16
    19b8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19ba:	4358      	muls	r0, r3
    19bc:	e00a      	b.n	19d4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19be:	2350      	movs	r3, #80	; 0x50
    19c0:	4a07      	ldr	r2, [pc, #28]	; (19e0 <system_clock_source_get_hz+0x80>)
    19c2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19c4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19c6:	075b      	lsls	r3, r3, #29
    19c8:	d504      	bpl.n	19d4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    19ca:	4b04      	ldr	r3, [pc, #16]	; (19dc <system_clock_source_get_hz+0x7c>)
    19cc:	68d8      	ldr	r0, [r3, #12]
    19ce:	e001      	b.n	19d4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    19d0:	2080      	movs	r0, #128	; 0x80
    19d2:	0200      	lsls	r0, r0, #8
	}
}
    19d4:	bd10      	pop	{r4, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	00005548 	.word	0x00005548
    19dc:	200000b4 	.word	0x200000b4
    19e0:	40000800 	.word	0x40000800
    19e4:	007a1200 	.word	0x007a1200
    19e8:	02dc6c00 	.word	0x02dc6c00
    19ec:	00001ed1 	.word	0x00001ed1

000019f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19f2:	490c      	ldr	r1, [pc, #48]	; (1a24 <system_clock_source_osc8m_set_config+0x34>)
    19f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    19f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    19f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    19fa:	7840      	ldrb	r0, [r0, #1]
    19fc:	2201      	movs	r2, #1
    19fe:	4010      	ands	r0, r2
    1a00:	0180      	lsls	r0, r0, #6
    1a02:	2640      	movs	r6, #64	; 0x40
    1a04:	43b3      	bics	r3, r6
    1a06:	4303      	orrs	r3, r0
    1a08:	402a      	ands	r2, r5
    1a0a:	01d2      	lsls	r2, r2, #7
    1a0c:	2080      	movs	r0, #128	; 0x80
    1a0e:	4383      	bics	r3, r0
    1a10:	4313      	orrs	r3, r2
    1a12:	2203      	movs	r2, #3
    1a14:	4022      	ands	r2, r4
    1a16:	0212      	lsls	r2, r2, #8
    1a18:	4803      	ldr	r0, [pc, #12]	; (1a28 <system_clock_source_osc8m_set_config+0x38>)
    1a1a:	4003      	ands	r3, r0
    1a1c:	4313      	orrs	r3, r2
    1a1e:	620b      	str	r3, [r1, #32]
}
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	40000800 	.word	0x40000800
    1a28:	fffffcff 	.word	0xfffffcff

00001a2c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2e:	46de      	mov	lr, fp
    1a30:	4657      	mov	r7, sl
    1a32:	464e      	mov	r6, r9
    1a34:	4645      	mov	r5, r8
    1a36:	b5e0      	push	{r5, r6, r7, lr}
    1a38:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1a3a:	4b26      	ldr	r3, [pc, #152]	; (1ad4 <system_clock_source_xosc32k_set_config+0xa8>)
    1a3c:	469b      	mov	fp, r3
    1a3e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1a40:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1a42:	7800      	ldrb	r0, [r0, #0]
    1a44:	4242      	negs	r2, r0
    1a46:	4142      	adcs	r2, r0
    1a48:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1a4a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1a4c:	78ca      	ldrb	r2, [r1, #3]
    1a4e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1a50:	790a      	ldrb	r2, [r1, #4]
    1a52:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1a54:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a56:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1a58:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1a5a:	688a      	ldr	r2, [r1, #8]
    1a5c:	491e      	ldr	r1, [pc, #120]	; (1ad8 <system_clock_source_xosc32k_set_config+0xac>)
    1a5e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1a60:	2101      	movs	r1, #1
    1a62:	464a      	mov	r2, r9
    1a64:	0092      	lsls	r2, r2, #2
    1a66:	4691      	mov	r9, r2
    1a68:	2204      	movs	r2, #4
    1a6a:	4393      	bics	r3, r2
    1a6c:	464a      	mov	r2, r9
    1a6e:	4313      	orrs	r3, r2
    1a70:	4642      	mov	r2, r8
    1a72:	400a      	ands	r2, r1
    1a74:	00d2      	lsls	r2, r2, #3
    1a76:	4690      	mov	r8, r2
    1a78:	2208      	movs	r2, #8
    1a7a:	4393      	bics	r3, r2
    1a7c:	4642      	mov	r2, r8
    1a7e:	4313      	orrs	r3, r2
    1a80:	4662      	mov	r2, ip
    1a82:	400a      	ands	r2, r1
    1a84:	0112      	lsls	r2, r2, #4
    1a86:	4694      	mov	ip, r2
    1a88:	2210      	movs	r2, #16
    1a8a:	4393      	bics	r3, r2
    1a8c:	4662      	mov	r2, ip
    1a8e:	4313      	orrs	r3, r2
    1a90:	4008      	ands	r0, r1
    1a92:	0140      	lsls	r0, r0, #5
    1a94:	2220      	movs	r2, #32
    1a96:	4393      	bics	r3, r2
    1a98:	4303      	orrs	r3, r0
    1a9a:	400f      	ands	r7, r1
    1a9c:	01bf      	lsls	r7, r7, #6
    1a9e:	2040      	movs	r0, #64	; 0x40
    1aa0:	4383      	bics	r3, r0
    1aa2:	433b      	orrs	r3, r7
    1aa4:	400e      	ands	r6, r1
    1aa6:	01f6      	lsls	r6, r6, #7
    1aa8:	3040      	adds	r0, #64	; 0x40
    1aaa:	4383      	bics	r3, r0
    1aac:	4333      	orrs	r3, r6
    1aae:	3879      	subs	r0, #121	; 0x79
    1ab0:	4005      	ands	r5, r0
    1ab2:	022d      	lsls	r5, r5, #8
    1ab4:	4809      	ldr	r0, [pc, #36]	; (1adc <system_clock_source_xosc32k_set_config+0xb0>)
    1ab6:	4003      	ands	r3, r0
    1ab8:	432b      	orrs	r3, r5
    1aba:	4021      	ands	r1, r4
    1abc:	0309      	lsls	r1, r1, #12
    1abe:	4808      	ldr	r0, [pc, #32]	; (1ae0 <system_clock_source_xosc32k_set_config+0xb4>)
    1ac0:	4003      	ands	r3, r0
    1ac2:	430b      	orrs	r3, r1
    1ac4:	465a      	mov	r2, fp
    1ac6:	8293      	strh	r3, [r2, #20]
}
    1ac8:	bc3c      	pop	{r2, r3, r4, r5}
    1aca:	4690      	mov	r8, r2
    1acc:	4699      	mov	r9, r3
    1ace:	46a2      	mov	sl, r4
    1ad0:	46ab      	mov	fp, r5
    1ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ad4:	40000800 	.word	0x40000800
    1ad8:	200000b4 	.word	0x200000b4
    1adc:	fffff8ff 	.word	0xfffff8ff
    1ae0:	ffffefff 	.word	0xffffefff

00001ae4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1ae4:	2808      	cmp	r0, #8
    1ae6:	d803      	bhi.n	1af0 <system_clock_source_enable+0xc>
    1ae8:	0080      	lsls	r0, r0, #2
    1aea:	4b25      	ldr	r3, [pc, #148]	; (1b80 <system_clock_source_enable+0x9c>)
    1aec:	581b      	ldr	r3, [r3, r0]
    1aee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1af0:	2017      	movs	r0, #23
    1af2:	e044      	b.n	1b7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1af4:	4a23      	ldr	r2, [pc, #140]	; (1b84 <system_clock_source_enable+0xa0>)
    1af6:	6a13      	ldr	r3, [r2, #32]
    1af8:	2102      	movs	r1, #2
    1afa:	430b      	orrs	r3, r1
    1afc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1afe:	2000      	movs	r0, #0
    1b00:	e03d      	b.n	1b7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b02:	4a20      	ldr	r2, [pc, #128]	; (1b84 <system_clock_source_enable+0xa0>)
    1b04:	6993      	ldr	r3, [r2, #24]
    1b06:	2102      	movs	r1, #2
    1b08:	430b      	orrs	r3, r1
    1b0a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1b0c:	2000      	movs	r0, #0
		break;
    1b0e:	e036      	b.n	1b7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b10:	4a1c      	ldr	r2, [pc, #112]	; (1b84 <system_clock_source_enable+0xa0>)
    1b12:	8a13      	ldrh	r3, [r2, #16]
    1b14:	2102      	movs	r1, #2
    1b16:	430b      	orrs	r3, r1
    1b18:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b1a:	2000      	movs	r0, #0
		break;
    1b1c:	e02f      	b.n	1b7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b1e:	4a19      	ldr	r2, [pc, #100]	; (1b84 <system_clock_source_enable+0xa0>)
    1b20:	8a93      	ldrh	r3, [r2, #20]
    1b22:	2102      	movs	r1, #2
    1b24:	430b      	orrs	r3, r1
    1b26:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b28:	2000      	movs	r0, #0
		break;
    1b2a:	e028      	b.n	1b7e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b2c:	4916      	ldr	r1, [pc, #88]	; (1b88 <system_clock_source_enable+0xa4>)
    1b2e:	680b      	ldr	r3, [r1, #0]
    1b30:	2202      	movs	r2, #2
    1b32:	4313      	orrs	r3, r2
    1b34:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b36:	4b13      	ldr	r3, [pc, #76]	; (1b84 <system_clock_source_enable+0xa0>)
    1b38:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b3a:	0019      	movs	r1, r3
    1b3c:	320e      	adds	r2, #14
    1b3e:	68cb      	ldr	r3, [r1, #12]
    1b40:	421a      	tst	r2, r3
    1b42:	d0fc      	beq.n	1b3e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b44:	4a10      	ldr	r2, [pc, #64]	; (1b88 <system_clock_source_enable+0xa4>)
    1b46:	6891      	ldr	r1, [r2, #8]
    1b48:	4b0e      	ldr	r3, [pc, #56]	; (1b84 <system_clock_source_enable+0xa0>)
    1b4a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b4c:	6852      	ldr	r2, [r2, #4]
    1b4e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1b50:	2200      	movs	r2, #0
    1b52:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b54:	0019      	movs	r1, r3
    1b56:	3210      	adds	r2, #16
    1b58:	68cb      	ldr	r3, [r1, #12]
    1b5a:	421a      	tst	r2, r3
    1b5c:	d0fc      	beq.n	1b58 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b5e:	4b0a      	ldr	r3, [pc, #40]	; (1b88 <system_clock_source_enable+0xa4>)
    1b60:	681b      	ldr	r3, [r3, #0]
    1b62:	b29b      	uxth	r3, r3
    1b64:	4a07      	ldr	r2, [pc, #28]	; (1b84 <system_clock_source_enable+0xa0>)
    1b66:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1b68:	2000      	movs	r0, #0
    1b6a:	e008      	b.n	1b7e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1b6c:	4905      	ldr	r1, [pc, #20]	; (1b84 <system_clock_source_enable+0xa0>)
    1b6e:	2244      	movs	r2, #68	; 0x44
    1b70:	5c8b      	ldrb	r3, [r1, r2]
    1b72:	2002      	movs	r0, #2
    1b74:	4303      	orrs	r3, r0
    1b76:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1b78:	2000      	movs	r0, #0
		break;
    1b7a:	e000      	b.n	1b7e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1b7c:	2000      	movs	r0, #0
}
    1b7e:	4770      	bx	lr
    1b80:	0000556c 	.word	0x0000556c
    1b84:	40000800 	.word	0x40000800
    1b88:	200000b4 	.word	0x200000b4

00001b8c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b90:	22c2      	movs	r2, #194	; 0xc2
    1b92:	00d2      	lsls	r2, r2, #3
    1b94:	4b2f      	ldr	r3, [pc, #188]	; (1c54 <system_clock_init+0xc8>)
    1b96:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b98:	4a2f      	ldr	r2, [pc, #188]	; (1c58 <system_clock_init+0xcc>)
    1b9a:	6853      	ldr	r3, [r2, #4]
    1b9c:	211e      	movs	r1, #30
    1b9e:	438b      	bics	r3, r1
    1ba0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1ba2:	2302      	movs	r3, #2
    1ba4:	466a      	mov	r2, sp
    1ba6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ba8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1baa:	4d2c      	ldr	r5, [pc, #176]	; (1c5c <system_clock_init+0xd0>)
    1bac:	b2e0      	uxtb	r0, r4
    1bae:	4669      	mov	r1, sp
    1bb0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1bb2:	3401      	adds	r4, #1
    1bb4:	2c25      	cmp	r4, #37	; 0x25
    1bb6:	d1f9      	bne.n	1bac <system_clock_init+0x20>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1bb8:	a804      	add	r0, sp, #16
    1bba:	2300      	movs	r3, #0
    1bbc:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1bbe:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1bc0:	2280      	movs	r2, #128	; 0x80
    1bc2:	0212      	lsls	r2, r2, #8
    1bc4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1bc6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1bc8:	2201      	movs	r2, #1
    1bca:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1bcc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1bce:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1bd0:	3205      	adds	r2, #5
    1bd2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1bd4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1bd6:	4b22      	ldr	r3, [pc, #136]	; (1c60 <system_clock_init+0xd4>)
    1bd8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1bda:	2005      	movs	r0, #5
    1bdc:	4b21      	ldr	r3, [pc, #132]	; (1c64 <system_clock_init+0xd8>)
    1bde:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1be0:	491c      	ldr	r1, [pc, #112]	; (1c54 <system_clock_init+0xc8>)
    1be2:	2202      	movs	r2, #2
    1be4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1be6:	421a      	tst	r2, r3
    1be8:	d0fc      	beq.n	1be4 <system_clock_init+0x58>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1bea:	4a1a      	ldr	r2, [pc, #104]	; (1c54 <system_clock_init+0xc8>)
    1bec:	8a93      	ldrh	r3, [r2, #20]
    1bee:	2180      	movs	r1, #128	; 0x80
    1bf0:	430b      	orrs	r3, r1
    1bf2:	8293      	strh	r3, [r2, #20]
	config->run_in_standby  = false;
    1bf4:	a803      	add	r0, sp, #12
    1bf6:	2400      	movs	r4, #0
    1bf8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1bfa:	2501      	movs	r5, #1
    1bfc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1bfe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1c00:	4b19      	ldr	r3, [pc, #100]	; (1c68 <system_clock_init+0xdc>)
    1c02:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1c04:	2006      	movs	r0, #6
    1c06:	4b17      	ldr	r3, [pc, #92]	; (1c64 <system_clock_init+0xd8>)
    1c08:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c0a:	4b18      	ldr	r3, [pc, #96]	; (1c6c <system_clock_init+0xe0>)
    1c0c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1c0e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c10:	466b      	mov	r3, sp
    1c12:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1c14:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1c16:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1c18:	2305      	movs	r3, #5
    1c1a:	466a      	mov	r2, sp
    1c1c:	7013      	strb	r3, [r2, #0]
    1c1e:	4669      	mov	r1, sp
    1c20:	2001      	movs	r0, #1
    1c22:	4f13      	ldr	r7, [pc, #76]	; (1c70 <system_clock_init+0xe4>)
    1c24:	47b8      	blx	r7
    1c26:	2001      	movs	r0, #1
    1c28:	4e12      	ldr	r6, [pc, #72]	; (1c74 <system_clock_init+0xe8>)
    1c2a:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    1c2c:	4b12      	ldr	r3, [pc, #72]	; (1c78 <system_clock_init+0xec>)
    1c2e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1c30:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1c32:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1c34:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1c36:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c38:	466b      	mov	r3, sp
    1c3a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c3c:	2306      	movs	r3, #6
    1c3e:	466a      	mov	r2, sp
    1c40:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1c42:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1c44:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c46:	4669      	mov	r1, sp
    1c48:	2000      	movs	r0, #0
    1c4a:	47b8      	blx	r7
    1c4c:	2000      	movs	r0, #0
    1c4e:	47b0      	blx	r6
#endif
}
    1c50:	b009      	add	sp, #36	; 0x24
    1c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c54:	40000800 	.word	0x40000800
    1c58:	41004000 	.word	0x41004000
    1c5c:	00001eb5 	.word	0x00001eb5
    1c60:	00001a2d 	.word	0x00001a2d
    1c64:	00001ae5 	.word	0x00001ae5
    1c68:	000019f1 	.word	0x000019f1
    1c6c:	00001c7d 	.word	0x00001c7d
    1c70:	00001ca1 	.word	0x00001ca1
    1c74:	00001d59 	.word	0x00001d59
    1c78:	40000400 	.word	0x40000400

00001c7c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c7c:	4a06      	ldr	r2, [pc, #24]	; (1c98 <system_gclk_init+0x1c>)
    1c7e:	6993      	ldr	r3, [r2, #24]
    1c80:	2108      	movs	r1, #8
    1c82:	430b      	orrs	r3, r1
    1c84:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c86:	2201      	movs	r2, #1
    1c88:	4b04      	ldr	r3, [pc, #16]	; (1c9c <system_gclk_init+0x20>)
    1c8a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c8c:	0019      	movs	r1, r3
    1c8e:	780b      	ldrb	r3, [r1, #0]
    1c90:	4213      	tst	r3, r2
    1c92:	d1fc      	bne.n	1c8e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c94:	4770      	bx	lr
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	40000400 	.word	0x40000400
    1c9c:	40000c00 	.word	0x40000c00

00001ca0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ca0:	b570      	push	{r4, r5, r6, lr}
    1ca2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ca4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ca6:	780d      	ldrb	r5, [r1, #0]
    1ca8:	022d      	lsls	r5, r5, #8
    1caa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1cac:	784b      	ldrb	r3, [r1, #1]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d002      	beq.n	1cb8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1cb2:	2380      	movs	r3, #128	; 0x80
    1cb4:	02db      	lsls	r3, r3, #11
    1cb6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1cb8:	7a4b      	ldrb	r3, [r1, #9]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d002      	beq.n	1cc4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1cbe:	2380      	movs	r3, #128	; 0x80
    1cc0:	031b      	lsls	r3, r3, #12
    1cc2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1cc4:	6848      	ldr	r0, [r1, #4]
    1cc6:	2801      	cmp	r0, #1
    1cc8:	d910      	bls.n	1cec <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1cca:	1e43      	subs	r3, r0, #1
    1ccc:	4218      	tst	r0, r3
    1cce:	d134      	bne.n	1d3a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1cd0:	2802      	cmp	r0, #2
    1cd2:	d930      	bls.n	1d36 <system_gclk_gen_set_config+0x96>
    1cd4:	2302      	movs	r3, #2
    1cd6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1cd8:	3201      	adds	r2, #1
						mask <<= 1) {
    1cda:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1cdc:	4298      	cmp	r0, r3
    1cde:	d8fb      	bhi.n	1cd8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ce0:	0212      	lsls	r2, r2, #8
    1ce2:	4332      	orrs	r2, r6
    1ce4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ce6:	2380      	movs	r3, #128	; 0x80
    1ce8:	035b      	lsls	r3, r3, #13
    1cea:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1cec:	7a0b      	ldrb	r3, [r1, #8]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d002      	beq.n	1cf8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1cf2:	2380      	movs	r3, #128	; 0x80
    1cf4:	039b      	lsls	r3, r3, #14
    1cf6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cf8:	4a13      	ldr	r2, [pc, #76]	; (1d48 <system_gclk_gen_set_config+0xa8>)
    1cfa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1cfc:	b25b      	sxtb	r3, r3
    1cfe:	2b00      	cmp	r3, #0
    1d00:	dbfb      	blt.n	1cfa <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1d02:	4b12      	ldr	r3, [pc, #72]	; (1d4c <system_gclk_gen_set_config+0xac>)
    1d04:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d06:	4b12      	ldr	r3, [pc, #72]	; (1d50 <system_gclk_gen_set_config+0xb0>)
    1d08:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <system_gclk_gen_set_config+0xa8>)
    1d0c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1d0e:	b25b      	sxtb	r3, r3
    1d10:	2b00      	cmp	r3, #0
    1d12:	dbfb      	blt.n	1d0c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1d14:	4b0c      	ldr	r3, [pc, #48]	; (1d48 <system_gclk_gen_set_config+0xa8>)
    1d16:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d18:	001a      	movs	r2, r3
    1d1a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1d1c:	b25b      	sxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	dbfb      	blt.n	1d1a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1d22:	4a09      	ldr	r2, [pc, #36]	; (1d48 <system_gclk_gen_set_config+0xa8>)
    1d24:	6853      	ldr	r3, [r2, #4]
    1d26:	2180      	movs	r1, #128	; 0x80
    1d28:	0249      	lsls	r1, r1, #9
    1d2a:	400b      	ands	r3, r1
    1d2c:	431d      	orrs	r5, r3
    1d2e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1d30:	4b08      	ldr	r3, [pc, #32]	; (1d54 <system_gclk_gen_set_config+0xb4>)
    1d32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d34:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1d36:	2200      	movs	r2, #0
    1d38:	e7d2      	b.n	1ce0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1d3a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1d3c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1d3e:	2380      	movs	r3, #128	; 0x80
    1d40:	029b      	lsls	r3, r3, #10
    1d42:	431d      	orrs	r5, r3
    1d44:	e7d2      	b.n	1cec <system_gclk_gen_set_config+0x4c>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	40000c00 	.word	0x40000c00
    1d4c:	000005c1 	.word	0x000005c1
    1d50:	40000c08 	.word	0x40000c08
    1d54:	00000601 	.word	0x00000601

00001d58 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d58:	b510      	push	{r4, lr}
    1d5a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d5c:	4a0b      	ldr	r2, [pc, #44]	; (1d8c <system_gclk_gen_enable+0x34>)
    1d5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d60:	b25b      	sxtb	r3, r3
    1d62:	2b00      	cmp	r3, #0
    1d64:	dbfb      	blt.n	1d5e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1d66:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <system_gclk_gen_enable+0x38>)
    1d68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d6a:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <system_gclk_gen_enable+0x3c>)
    1d6c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d6e:	4a07      	ldr	r2, [pc, #28]	; (1d8c <system_gclk_gen_enable+0x34>)
    1d70:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d72:	b25b      	sxtb	r3, r3
    1d74:	2b00      	cmp	r3, #0
    1d76:	dbfb      	blt.n	1d70 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d78:	4a04      	ldr	r2, [pc, #16]	; (1d8c <system_gclk_gen_enable+0x34>)
    1d7a:	6851      	ldr	r1, [r2, #4]
    1d7c:	2380      	movs	r3, #128	; 0x80
    1d7e:	025b      	lsls	r3, r3, #9
    1d80:	430b      	orrs	r3, r1
    1d82:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d84:	4b04      	ldr	r3, [pc, #16]	; (1d98 <system_gclk_gen_enable+0x40>)
    1d86:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	40000c00 	.word	0x40000c00
    1d90:	000005c1 	.word	0x000005c1
    1d94:	40000c04 	.word	0x40000c04
    1d98:	00000601 	.word	0x00000601

00001d9c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1da0:	4a1a      	ldr	r2, [pc, #104]	; (1e0c <system_gclk_gen_get_hz+0x70>)
    1da2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1da4:	b25b      	sxtb	r3, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	dbfb      	blt.n	1da2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1daa:	4b19      	ldr	r3, [pc, #100]	; (1e10 <system_gclk_gen_get_hz+0x74>)
    1dac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dae:	4b19      	ldr	r3, [pc, #100]	; (1e14 <system_gclk_gen_get_hz+0x78>)
    1db0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1db2:	4a16      	ldr	r2, [pc, #88]	; (1e0c <system_gclk_gen_get_hz+0x70>)
    1db4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1db6:	b25b      	sxtb	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	dbfb      	blt.n	1db4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1dbc:	4e13      	ldr	r6, [pc, #76]	; (1e0c <system_gclk_gen_get_hz+0x70>)
    1dbe:	6870      	ldr	r0, [r6, #4]
    1dc0:	04c0      	lsls	r0, r0, #19
    1dc2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1dc4:	4b14      	ldr	r3, [pc, #80]	; (1e18 <system_gclk_gen_get_hz+0x7c>)
    1dc6:	4798      	blx	r3
    1dc8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dca:	4b12      	ldr	r3, [pc, #72]	; (1e14 <system_gclk_gen_get_hz+0x78>)
    1dcc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1dce:	6876      	ldr	r6, [r6, #4]
    1dd0:	02f6      	lsls	r6, r6, #11
    1dd2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1dd4:	4b11      	ldr	r3, [pc, #68]	; (1e1c <system_gclk_gen_get_hz+0x80>)
    1dd6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dd8:	4a0c      	ldr	r2, [pc, #48]	; (1e0c <system_gclk_gen_get_hz+0x70>)
    1dda:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ddc:	b25b      	sxtb	r3, r3
    1dde:	2b00      	cmp	r3, #0
    1de0:	dbfb      	blt.n	1dda <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1de2:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <system_gclk_gen_get_hz+0x70>)
    1de4:	689c      	ldr	r4, [r3, #8]
    1de6:	0224      	lsls	r4, r4, #8
    1de8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1dea:	4b0d      	ldr	r3, [pc, #52]	; (1e20 <system_gclk_gen_get_hz+0x84>)
    1dec:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1dee:	2e00      	cmp	r6, #0
    1df0:	d107      	bne.n	1e02 <system_gclk_gen_get_hz+0x66>
    1df2:	2c01      	cmp	r4, #1
    1df4:	d907      	bls.n	1e06 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1df6:	0021      	movs	r1, r4
    1df8:	0028      	movs	r0, r5
    1dfa:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <system_gclk_gen_get_hz+0x88>)
    1dfc:	4798      	blx	r3
    1dfe:	0005      	movs	r5, r0
    1e00:	e001      	b.n	1e06 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1e02:	3401      	adds	r4, #1
    1e04:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1e06:	0028      	movs	r0, r5
    1e08:	bd70      	pop	{r4, r5, r6, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	40000c00 	.word	0x40000c00
    1e10:	000005c1 	.word	0x000005c1
    1e14:	40000c04 	.word	0x40000c04
    1e18:	00001961 	.word	0x00001961
    1e1c:	40000c08 	.word	0x40000c08
    1e20:	00000601 	.word	0x00000601
    1e24:	00003331 	.word	0x00003331

00001e28 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e28:	b510      	push	{r4, lr}
    1e2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e2c:	4b06      	ldr	r3, [pc, #24]	; (1e48 <system_gclk_chan_enable+0x20>)
    1e2e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e30:	4b06      	ldr	r3, [pc, #24]	; (1e4c <system_gclk_chan_enable+0x24>)
    1e32:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e34:	4a06      	ldr	r2, [pc, #24]	; (1e50 <system_gclk_chan_enable+0x28>)
    1e36:	8853      	ldrh	r3, [r2, #2]
    1e38:	2180      	movs	r1, #128	; 0x80
    1e3a:	01c9      	lsls	r1, r1, #7
    1e3c:	430b      	orrs	r3, r1
    1e3e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1e40:	4b04      	ldr	r3, [pc, #16]	; (1e54 <system_gclk_chan_enable+0x2c>)
    1e42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e44:	bd10      	pop	{r4, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	000005c1 	.word	0x000005c1
    1e4c:	40000c02 	.word	0x40000c02
    1e50:	40000c00 	.word	0x40000c00
    1e54:	00000601 	.word	0x00000601

00001e58 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e58:	b510      	push	{r4, lr}
    1e5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e5c:	4b0f      	ldr	r3, [pc, #60]	; (1e9c <system_gclk_chan_disable+0x44>)
    1e5e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e60:	4b0f      	ldr	r3, [pc, #60]	; (1ea0 <system_gclk_chan_disable+0x48>)
    1e62:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e64:	4a0f      	ldr	r2, [pc, #60]	; (1ea4 <system_gclk_chan_disable+0x4c>)
    1e66:	8853      	ldrh	r3, [r2, #2]
    1e68:	051b      	lsls	r3, r3, #20
    1e6a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e6c:	8853      	ldrh	r3, [r2, #2]
    1e6e:	490e      	ldr	r1, [pc, #56]	; (1ea8 <system_gclk_chan_disable+0x50>)
    1e70:	400b      	ands	r3, r1
    1e72:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e74:	8853      	ldrh	r3, [r2, #2]
    1e76:	490d      	ldr	r1, [pc, #52]	; (1eac <system_gclk_chan_disable+0x54>)
    1e78:	400b      	ands	r3, r1
    1e7a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e7c:	0011      	movs	r1, r2
    1e7e:	2280      	movs	r2, #128	; 0x80
    1e80:	01d2      	lsls	r2, r2, #7
    1e82:	884b      	ldrh	r3, [r1, #2]
    1e84:	4213      	tst	r3, r2
    1e86:	d1fc      	bne.n	1e82 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e88:	4906      	ldr	r1, [pc, #24]	; (1ea4 <system_gclk_chan_disable+0x4c>)
    1e8a:	884a      	ldrh	r2, [r1, #2]
    1e8c:	0203      	lsls	r3, r0, #8
    1e8e:	4806      	ldr	r0, [pc, #24]	; (1ea8 <system_gclk_chan_disable+0x50>)
    1e90:	4002      	ands	r2, r0
    1e92:	4313      	orrs	r3, r2
    1e94:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e96:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <system_gclk_chan_disable+0x58>)
    1e98:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e9a:	bd10      	pop	{r4, pc}
    1e9c:	000005c1 	.word	0x000005c1
    1ea0:	40000c02 	.word	0x40000c02
    1ea4:	40000c00 	.word	0x40000c00
    1ea8:	fffff0ff 	.word	0xfffff0ff
    1eac:	ffffbfff 	.word	0xffffbfff
    1eb0:	00000601 	.word	0x00000601

00001eb4 <system_gclk_chan_set_config>:
{
    1eb4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1eb6:	780c      	ldrb	r4, [r1, #0]
    1eb8:	0224      	lsls	r4, r4, #8
    1eba:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1ebc:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <system_gclk_chan_set_config+0x14>)
    1ebe:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ec0:	b2a4      	uxth	r4, r4
    1ec2:	4b02      	ldr	r3, [pc, #8]	; (1ecc <system_gclk_chan_set_config+0x18>)
    1ec4:	805c      	strh	r4, [r3, #2]
}
    1ec6:	bd10      	pop	{r4, pc}
    1ec8:	00001e59 	.word	0x00001e59
    1ecc:	40000c00 	.word	0x40000c00

00001ed0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ed0:	b510      	push	{r4, lr}
    1ed2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ed4:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <system_gclk_chan_get_hz+0x20>)
    1ed6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ed8:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <system_gclk_chan_get_hz+0x24>)
    1eda:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1edc:	4b06      	ldr	r3, [pc, #24]	; (1ef8 <system_gclk_chan_get_hz+0x28>)
    1ede:	885c      	ldrh	r4, [r3, #2]
    1ee0:	0524      	lsls	r4, r4, #20
    1ee2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ee4:	4b05      	ldr	r3, [pc, #20]	; (1efc <system_gclk_chan_get_hz+0x2c>)
    1ee6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ee8:	0020      	movs	r0, r4
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <system_gclk_chan_get_hz+0x30>)
    1eec:	4798      	blx	r3
}
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	000005c1 	.word	0x000005c1
    1ef4:	40000c02 	.word	0x40000c02
    1ef8:	40000c00 	.word	0x40000c00
    1efc:	00000601 	.word	0x00000601
    1f00:	00001d9d 	.word	0x00001d9d

00001f04 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f04:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f06:	78d3      	ldrb	r3, [r2, #3]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d135      	bne.n	1f78 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f0c:	7813      	ldrb	r3, [r2, #0]
    1f0e:	2b80      	cmp	r3, #128	; 0x80
    1f10:	d029      	beq.n	1f66 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1f12:	061b      	lsls	r3, r3, #24
    1f14:	2480      	movs	r4, #128	; 0x80
    1f16:	0264      	lsls	r4, r4, #9
    1f18:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f1a:	7854      	ldrb	r4, [r2, #1]
    1f1c:	2502      	movs	r5, #2
    1f1e:	43ac      	bics	r4, r5
    1f20:	d106      	bne.n	1f30 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f22:	7894      	ldrb	r4, [r2, #2]
    1f24:	2c00      	cmp	r4, #0
    1f26:	d120      	bne.n	1f6a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f28:	2480      	movs	r4, #128	; 0x80
    1f2a:	02a4      	lsls	r4, r4, #10
    1f2c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f2e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f30:	7854      	ldrb	r4, [r2, #1]
    1f32:	3c01      	subs	r4, #1
    1f34:	2c01      	cmp	r4, #1
    1f36:	d91c      	bls.n	1f72 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f38:	040d      	lsls	r5, r1, #16
    1f3a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f3c:	24a0      	movs	r4, #160	; 0xa0
    1f3e:	05e4      	lsls	r4, r4, #23
    1f40:	432c      	orrs	r4, r5
    1f42:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f44:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f46:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f48:	24d0      	movs	r4, #208	; 0xd0
    1f4a:	0624      	lsls	r4, r4, #24
    1f4c:	432c      	orrs	r4, r5
    1f4e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f50:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f52:	78d4      	ldrb	r4, [r2, #3]
    1f54:	2c00      	cmp	r4, #0
    1f56:	d122      	bne.n	1f9e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f58:	035b      	lsls	r3, r3, #13
    1f5a:	d51c      	bpl.n	1f96 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f5c:	7893      	ldrb	r3, [r2, #2]
    1f5e:	2b01      	cmp	r3, #1
    1f60:	d01e      	beq.n	1fa0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f62:	6141      	str	r1, [r0, #20]
    1f64:	e017      	b.n	1f96 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1f66:	2300      	movs	r3, #0
    1f68:	e7d7      	b.n	1f1a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f6a:	24c0      	movs	r4, #192	; 0xc0
    1f6c:	02e4      	lsls	r4, r4, #11
    1f6e:	4323      	orrs	r3, r4
    1f70:	e7dd      	b.n	1f2e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f72:	4c0d      	ldr	r4, [pc, #52]	; (1fa8 <_system_pinmux_config+0xa4>)
    1f74:	4023      	ands	r3, r4
    1f76:	e7df      	b.n	1f38 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f78:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f7a:	040c      	lsls	r4, r1, #16
    1f7c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f7e:	23a0      	movs	r3, #160	; 0xa0
    1f80:	05db      	lsls	r3, r3, #23
    1f82:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f84:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f86:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f88:	23d0      	movs	r3, #208	; 0xd0
    1f8a:	061b      	lsls	r3, r3, #24
    1f8c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f8e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f90:	78d3      	ldrb	r3, [r2, #3]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d103      	bne.n	1f9e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f96:	7853      	ldrb	r3, [r2, #1]
    1f98:	3b01      	subs	r3, #1
    1f9a:	2b01      	cmp	r3, #1
    1f9c:	d902      	bls.n	1fa4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f9e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1fa0:	6181      	str	r1, [r0, #24]
    1fa2:	e7f8      	b.n	1f96 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1fa4:	6081      	str	r1, [r0, #8]
}
    1fa6:	e7fa      	b.n	1f9e <_system_pinmux_config+0x9a>
    1fa8:	fffbffff 	.word	0xfffbffff

00001fac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1fac:	b510      	push	{r4, lr}
    1fae:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fb0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1fb2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1fb4:	2900      	cmp	r1, #0
    1fb6:	d104      	bne.n	1fc2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1fb8:	0943      	lsrs	r3, r0, #5
    1fba:	01db      	lsls	r3, r3, #7
    1fbc:	4905      	ldr	r1, [pc, #20]	; (1fd4 <system_pinmux_pin_set_config+0x28>)
    1fbe:	468c      	mov	ip, r1
    1fc0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1fc2:	241f      	movs	r4, #31
    1fc4:	4020      	ands	r0, r4
    1fc6:	2101      	movs	r1, #1
    1fc8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1fca:	0018      	movs	r0, r3
    1fcc:	4b02      	ldr	r3, [pc, #8]	; (1fd8 <system_pinmux_pin_set_config+0x2c>)
    1fce:	4798      	blx	r3
}
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	41004400 	.word	0x41004400
    1fd8:	00001f05 	.word	0x00001f05

00001fdc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1fdc:	4770      	bx	lr
	...

00001fe0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1fe0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <system_init+0x18>)
    1fe4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <system_init+0x1c>)
    1fe8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1fee:	4b05      	ldr	r3, [pc, #20]	; (2004 <STACK_SIZE+0x4>)
    1ff0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff4:	4798      	blx	r3
}
    1ff6:	bd10      	pop	{r4, pc}
    1ff8:	00001b8d 	.word	0x00001b8d
    1ffc:	00000631 	.word	0x00000631
    2000:	00001fdd 	.word	0x00001fdd
    2004:	00001fdd 	.word	0x00001fdd
    2008:	00001fdd 	.word	0x00001fdd

0000200c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    200c:	4b09      	ldr	r3, [pc, #36]	; (2034 <_tcc_get_inst_index+0x28>)
    200e:	4298      	cmp	r0, r3
    2010:	d00c      	beq.n	202c <_tcc_get_inst_index+0x20>
    2012:	4b09      	ldr	r3, [pc, #36]	; (2038 <_tcc_get_inst_index+0x2c>)
    2014:	4298      	cmp	r0, r3
    2016:	d007      	beq.n	2028 <_tcc_get_inst_index+0x1c>
    2018:	4a08      	ldr	r2, [pc, #32]	; (203c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    201a:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    201c:	4290      	cmp	r0, r2
    201e:	d001      	beq.n	2024 <_tcc_get_inst_index+0x18>
}
    2020:	0018      	movs	r0, r3
    2022:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2024:	3302      	adds	r3, #2
    2026:	e002      	b.n	202e <_tcc_get_inst_index+0x22>
    2028:	2301      	movs	r3, #1
    202a:	e000      	b.n	202e <_tcc_get_inst_index+0x22>
    202c:	2300      	movs	r3, #0
			return i;
    202e:	b2db      	uxtb	r3, r3
    2030:	e7f6      	b.n	2020 <_tcc_get_inst_index+0x14>
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	42002000 	.word	0x42002000
    2038:	42002400 	.word	0x42002400
    203c:	42002800 	.word	0x42002800

00002040 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2042:	000f      	movs	r7, r1
    2044:	0015      	movs	r5, r2
    2046:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2048:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    204a:	0020      	movs	r0, r4
    204c:	4b16      	ldr	r3, [pc, #88]	; (20a8 <_tcc_set_compare_value+0x68>)
    204e:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2050:	4b16      	ldr	r3, [pc, #88]	; (20ac <_tcc_set_compare_value+0x6c>)
    2052:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    2054:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2056:	42ba      	cmp	r2, r7
    2058:	d801      	bhi.n	205e <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    205a:	0018      	movs	r0, r3
    205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
    205e:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
    2060:	4b13      	ldr	r3, [pc, #76]	; (20b0 <_tcc_set_compare_value+0x70>)
    2062:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    2064:	2317      	movs	r3, #23
	if (compare > max_count) {
    2066:	42aa      	cmp	r2, r5
    2068:	d3f7      	bcc.n	205a <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
    206a:	2e00      	cmp	r6, #0
    206c:	d010      	beq.n	2090 <_tcc_set_compare_value+0x50>
				(TCC_STATUS_CCBV0 << channel_index)) {
    206e:	2280      	movs	r2, #128	; 0x80
    2070:	0252      	lsls	r2, r2, #9
    2072:	40ba      	lsls	r2, r7
		while(tcc_module->STATUS.reg  &
    2074:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2076:	421a      	tst	r2, r3
    2078:	d1fc      	bne.n	2074 <_tcc_set_compare_value+0x34>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    207a:	2280      	movs	r2, #128	; 0x80
    207c:	0312      	lsls	r2, r2, #12
    207e:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
    2080:	68a3      	ldr	r3, [r4, #8]
    2082:	421a      	tst	r2, r3
    2084:	d1fc      	bne.n	2080 <_tcc_set_compare_value+0x40>
		tcc_module->CCB[channel_index].reg = compare;
    2086:	371c      	adds	r7, #28
    2088:	00bf      	lsls	r7, r7, #2
    208a:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
    208c:	2300      	movs	r3, #0
    208e:	e7e4      	b.n	205a <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2090:	2280      	movs	r2, #128	; 0x80
    2092:	0052      	lsls	r2, r2, #1
    2094:	40ba      	lsls	r2, r7
    2096:	68a3      	ldr	r3, [r4, #8]
    2098:	421a      	tst	r2, r3
    209a:	d1fc      	bne.n	2096 <_tcc_set_compare_value+0x56>
		tcc_module->CC[channel_index].reg = compare;
    209c:	3710      	adds	r7, #16
    209e:	00bf      	lsls	r7, r7, #2
    20a0:	19e4      	adds	r4, r4, r7
    20a2:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
    20a4:	2300      	movs	r3, #0
    20a6:	e7d8      	b.n	205a <_tcc_set_compare_value+0x1a>
    20a8:	0000200d 	.word	0x0000200d
    20ac:	0000559c 	.word	0x0000559c
    20b0:	000055a4 	.word	0x000055a4

000020b4 <tcc_get_config_defaults>:
{
    20b4:	b510      	push	{r4, lr}
    20b6:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    20b8:	0008      	movs	r0, r1
    20ba:	4b4f      	ldr	r3, [pc, #316]	; (21f8 <tcc_get_config_defaults+0x144>)
    20bc:	4798      	blx	r3
	config->counter.count                  = 0;
    20be:	2300      	movs	r3, #0
    20c0:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    20c2:	0080      	lsls	r0, r0, #2
    20c4:	4a4d      	ldr	r2, [pc, #308]	; (21fc <tcc_get_config_defaults+0x148>)
    20c6:	5882      	ldr	r2, [r0, r2]
    20c8:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    20ca:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    20cc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    20ce:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    20d0:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    20d2:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    20d4:	61e3      	str	r3, [r4, #28]
    20d6:	6223      	str	r3, [r4, #32]
    20d8:	6263      	str	r3, [r4, #36]	; 0x24
    20da:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    20dc:	7523      	strb	r3, [r4, #20]
    20de:	7563      	strb	r3, [r4, #21]
    20e0:	75a3      	strb	r3, [r4, #22]
    20e2:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    20e4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    20e6:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    20e8:	7423      	strb	r3, [r4, #16]
    20ea:	7463      	strb	r3, [r4, #17]
    20ec:	74a3      	strb	r3, [r4, #18]
    20ee:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    20f0:	222c      	movs	r2, #44	; 0x2c
    20f2:	54a3      	strb	r3, [r4, r2]
    20f4:	3201      	adds	r2, #1
    20f6:	54a3      	strb	r3, [r4, r2]
    20f8:	3201      	adds	r2, #1
    20fa:	54a3      	strb	r3, [r4, r2]
    20fc:	3201      	adds	r2, #1
    20fe:	54a3      	strb	r3, [r4, r2]
    2100:	3201      	adds	r2, #1
    2102:	54a3      	strb	r3, [r4, r2]
    2104:	3201      	adds	r2, #1
    2106:	54a3      	strb	r3, [r4, r2]
    2108:	3201      	adds	r2, #1
    210a:	54a3      	strb	r3, [r4, r2]
    210c:	3201      	adds	r2, #1
    210e:	54a3      	strb	r3, [r4, r2]
    2110:	3201      	adds	r2, #1
    2112:	54a3      	strb	r3, [r4, r2]
    2114:	3201      	adds	r2, #1
    2116:	54a3      	strb	r3, [r4, r2]
    2118:	3201      	adds	r2, #1
    211a:	54a3      	strb	r3, [r4, r2]
    211c:	3201      	adds	r2, #1
    211e:	54a3      	strb	r3, [r4, r2]
    2120:	3201      	adds	r2, #1
    2122:	54a3      	strb	r3, [r4, r2]
    2124:	3201      	adds	r2, #1
    2126:	54a3      	strb	r3, [r4, r2]
    2128:	3201      	adds	r2, #1
    212a:	54a3      	strb	r3, [r4, r2]
    212c:	3201      	adds	r2, #1
    212e:	54a3      	strb	r3, [r4, r2]
    2130:	3201      	adds	r2, #1
    2132:	54a3      	strb	r3, [r4, r2]
    2134:	3201      	adds	r2, #1
    2136:	54a3      	strb	r3, [r4, r2]
    2138:	3201      	adds	r2, #1
    213a:	54a3      	strb	r3, [r4, r2]
    213c:	3201      	adds	r2, #1
    213e:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    2140:	3201      	adds	r2, #1
    2142:	54a3      	strb	r3, [r4, r2]
    2144:	3201      	adds	r2, #1
    2146:	54a3      	strb	r3, [r4, r2]
    2148:	3201      	adds	r2, #1
    214a:	54a3      	strb	r3, [r4, r2]
    214c:	3201      	adds	r2, #1
    214e:	54a3      	strb	r3, [r4, r2]
    2150:	3201      	adds	r2, #1
    2152:	54a3      	strb	r3, [r4, r2]
    2154:	3201      	adds	r2, #1
    2156:	54a3      	strb	r3, [r4, r2]
    2158:	3201      	adds	r2, #1
    215a:	54a3      	strb	r3, [r4, r2]
    215c:	3201      	adds	r2, #1
    215e:	54a3      	strb	r3, [r4, r2]
    2160:	3201      	adds	r2, #1
    2162:	54a3      	strb	r3, [r4, r2]
    2164:	3201      	adds	r2, #1
    2166:	54a3      	strb	r3, [r4, r2]
    2168:	3201      	adds	r2, #1
    216a:	54a3      	strb	r3, [r4, r2]
    216c:	3201      	adds	r2, #1
    216e:	54a3      	strb	r3, [r4, r2]
    2170:	3201      	adds	r2, #1
    2172:	54a3      	strb	r3, [r4, r2]
    2174:	3201      	adds	r2, #1
    2176:	54a3      	strb	r3, [r4, r2]
    2178:	3201      	adds	r2, #1
    217a:	54a3      	strb	r3, [r4, r2]
    217c:	3201      	adds	r2, #1
    217e:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2180:	3201      	adds	r2, #1
    2182:	54a3      	strb	r3, [r4, r2]
    2184:	3201      	adds	r2, #1
    2186:	54a3      	strb	r3, [r4, r2]
    2188:	3201      	adds	r2, #1
    218a:	54a3      	strb	r3, [r4, r2]
    218c:	3201      	adds	r2, #1
    218e:	54a3      	strb	r3, [r4, r2]
    2190:	3201      	adds	r2, #1
    2192:	54a3      	strb	r3, [r4, r2]
    2194:	3201      	adds	r2, #1
    2196:	54a3      	strb	r3, [r4, r2]
    2198:	3201      	adds	r2, #1
    219a:	54a3      	strb	r3, [r4, r2]
    219c:	3201      	adds	r2, #1
    219e:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    21a0:	3241      	adds	r2, #65	; 0x41
    21a2:	54a3      	strb	r3, [r4, r2]
    21a4:	65a3      	str	r3, [r4, #88]	; 0x58
    21a6:	67a3      	str	r3, [r4, #120]	; 0x78
    21a8:	3201      	adds	r2, #1
    21aa:	54a3      	strb	r3, [r4, r2]
    21ac:	65e3      	str	r3, [r4, #92]	; 0x5c
    21ae:	67e3      	str	r3, [r4, #124]	; 0x7c
    21b0:	3201      	adds	r2, #1
    21b2:	54a3      	strb	r3, [r4, r2]
    21b4:	6623      	str	r3, [r4, #96]	; 0x60
    21b6:	3a1a      	subs	r2, #26
    21b8:	50a3      	str	r3, [r4, r2]
    21ba:	321b      	adds	r2, #27
    21bc:	54a3      	strb	r3, [r4, r2]
    21be:	6663      	str	r3, [r4, #100]	; 0x64
    21c0:	3a17      	subs	r2, #23
    21c2:	50a3      	str	r3, [r4, r2]
    21c4:	3218      	adds	r2, #24
    21c6:	54a3      	strb	r3, [r4, r2]
    21c8:	66a3      	str	r3, [r4, #104]	; 0x68
    21ca:	3a14      	subs	r2, #20
    21cc:	50a3      	str	r3, [r4, r2]
    21ce:	3215      	adds	r2, #21
    21d0:	54a3      	strb	r3, [r4, r2]
    21d2:	66e3      	str	r3, [r4, #108]	; 0x6c
    21d4:	3a11      	subs	r2, #17
    21d6:	50a3      	str	r3, [r4, r2]
    21d8:	3212      	adds	r2, #18
    21da:	54a3      	strb	r3, [r4, r2]
    21dc:	6723      	str	r3, [r4, #112]	; 0x70
    21de:	3a0e      	subs	r2, #14
    21e0:	50a3      	str	r3, [r4, r2]
    21e2:	320f      	adds	r2, #15
    21e4:	54a3      	strb	r3, [r4, r2]
    21e6:	6763      	str	r3, [r4, #116]	; 0x74
    21e8:	3a0b      	subs	r2, #11
    21ea:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    21ec:	2101      	movs	r1, #1
    21ee:	320c      	adds	r2, #12
    21f0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    21f2:	3201      	adds	r2, #1
    21f4:	54a3      	strb	r3, [r4, r2]
}
    21f6:	bd10      	pop	{r4, pc}
    21f8:	0000200d 	.word	0x0000200d
    21fc:	000055a4 	.word	0x000055a4

00002200 <tcc_init>:
{
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	46de      	mov	lr, fp
    2204:	4657      	mov	r7, sl
    2206:	464e      	mov	r6, r9
    2208:	4645      	mov	r5, r8
    220a:	b5e0      	push	{r5, r6, r7, lr}
    220c:	b091      	sub	sp, #68	; 0x44
    220e:	9001      	str	r0, [sp, #4]
    2210:	000c      	movs	r4, r1
    2212:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    2214:	0008      	movs	r0, r1
    2216:	4bc3      	ldr	r3, [pc, #780]	; (2524 <tcc_init+0x324>)
    2218:	4798      	blx	r3
    221a:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    221c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    221e:	48c2      	ldr	r0, [pc, #776]	; (2528 <tcc_init+0x328>)
    2220:	6a02      	ldr	r2, [r0, #32]
    2222:	009e      	lsls	r6, r3, #2
    2224:	4fc1      	ldr	r7, [pc, #772]	; (252c <tcc_init+0x32c>)
    2226:	59f7      	ldr	r7, [r6, r7]
    2228:	433a      	orrs	r2, r7
    222a:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    222c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    222e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2230:	0792      	lsls	r2, r2, #30
    2232:	d506      	bpl.n	2242 <tcc_init+0x42>
}
    2234:	b011      	add	sp, #68	; 0x44
    2236:	bc3c      	pop	{r2, r3, r4, r5}
    2238:	4690      	mov	r8, r2
    223a:	4699      	mov	r9, r3
    223c:	46a2      	mov	sl, r4
    223e:	46ab      	mov	fp, r5
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2242:	6822      	ldr	r2, [r4, #0]
    2244:	2701      	movs	r7, #1
    2246:	4017      	ands	r7, r2
    2248:	d1f4      	bne.n	2234 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    224a:	48b9      	ldr	r0, [pc, #740]	; (2530 <tcc_init+0x330>)
    224c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    224e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    2250:	682e      	ldr	r6, [r5, #0]
    2252:	42b2      	cmp	r2, r6
    2254:	d3ee      	bcc.n	2234 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    2256:	686e      	ldr	r6, [r5, #4]
    2258:	42b2      	cmp	r2, r6
    225a:	d3eb      	bcc.n	2234 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    225c:	69e8      	ldr	r0, [r5, #28]
    225e:	4282      	cmp	r2, r0
    2260:	d200      	bcs.n	2264 <tcc_init+0x64>
    2262:	e1b9      	b.n	25d8 <tcc_init+0x3d8>
    2264:	6a28      	ldr	r0, [r5, #32]
    2266:	4282      	cmp	r2, r0
    2268:	d200      	bcs.n	226c <tcc_init+0x6c>
    226a:	e1b7      	b.n	25dc <tcc_init+0x3dc>
    226c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    226e:	4282      	cmp	r2, r0
    2270:	d200      	bcs.n	2274 <tcc_init+0x74>
    2272:	e1b5      	b.n	25e0 <tcc_init+0x3e0>
    2274:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2276:	4282      	cmp	r2, r0
    2278:	d200      	bcs.n	227c <tcc_init+0x7c>
    227a:	e1b3      	b.n	25e4 <tcc_init+0x3e4>
    227c:	2298      	movs	r2, #152	; 0x98
    227e:	4694      	mov	ip, r2
    2280:	44ac      	add	ip, r5
    2282:	4662      	mov	r2, ip
    2284:	9208      	str	r2, [sp, #32]
    2286:	2000      	movs	r0, #0
    2288:	e003      	b.n	2292 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    228a:	3001      	adds	r0, #1
    228c:	3201      	adds	r2, #1
    228e:	2808      	cmp	r0, #8
    2290:	d008      	beq.n	22a4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    2292:	7816      	ldrb	r6, [r2, #0]
    2294:	2e00      	cmp	r6, #0
    2296:	d0f8      	beq.n	228a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    2298:	4ea6      	ldr	r6, [pc, #664]	; (2534 <tcc_init+0x334>)
    229a:	5c76      	ldrb	r6, [r6, r1]
    229c:	4286      	cmp	r6, r0
    229e:	dcf4      	bgt.n	228a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    22a0:	2017      	movs	r0, #23
    22a2:	e7c7      	b.n	2234 <tcc_init+0x34>
    22a4:	2200      	movs	r2, #0
    22a6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    22a8:	2080      	movs	r0, #128	; 0x80
    22aa:	0440      	lsls	r0, r0, #17
    22ac:	4684      	mov	ip, r0
    22ae:	e002      	b.n	22b6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    22b0:	3201      	adds	r2, #1
    22b2:	2a04      	cmp	r2, #4
    22b4:	d00e      	beq.n	22d4 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    22b6:	18a8      	adds	r0, r5, r2
    22b8:	7c00      	ldrb	r0, [r0, #16]
    22ba:	2801      	cmp	r0, #1
    22bc:	d1f8      	bne.n	22b0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    22be:	489e      	ldr	r0, [pc, #632]	; (2538 <tcc_init+0x338>)
    22c0:	5c40      	ldrb	r0, [r0, r1]
    22c2:	4290      	cmp	r0, r2
    22c4:	da00      	bge.n	22c8 <tcc_init+0xc8>
    22c6:	e18f      	b.n	25e8 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    22c8:	4660      	mov	r0, ip
    22ca:	4090      	lsls	r0, r2
    22cc:	9e02      	ldr	r6, [sp, #8]
    22ce:	4306      	orrs	r6, r0
    22d0:	9602      	str	r6, [sp, #8]
    22d2:	e7ed      	b.n	22b0 <tcc_init+0xb0>
	if (config->run_in_standby) {
    22d4:	329d      	adds	r2, #157	; 0x9d
    22d6:	5caa      	ldrb	r2, [r5, r2]
    22d8:	2a00      	cmp	r2, #0
    22da:	d004      	beq.n	22e6 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    22dc:	2280      	movs	r2, #128	; 0x80
    22de:	0112      	lsls	r2, r2, #4
    22e0:	9902      	ldr	r1, [sp, #8]
    22e2:	4311      	orrs	r1, r2
    22e4:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    22e6:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    22e8:	1e51      	subs	r1, r2, #1
    22ea:	418a      	sbcs	r2, r1
    22ec:	0092      	lsls	r2, r2, #2
    22ee:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    22f0:	7a6a      	ldrb	r2, [r5, #9]
    22f2:	2a01      	cmp	r2, #1
    22f4:	d022      	beq.n	233c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    22f6:	4a90      	ldr	r2, [pc, #576]	; (2538 <tcc_init+0x338>)
    22f8:	5cd2      	ldrb	r2, [r2, r3]
    22fa:	0011      	movs	r1, r2
    22fc:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    22fe:	2235      	movs	r2, #53	; 0x35
    2300:	5caa      	ldrb	r2, [r5, r2]
    2302:	428a      	cmp	r2, r1
    2304:	d300      	bcc.n	2308 <tcc_init+0x108>
    2306:	e179      	b.n	25fc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    2308:	212c      	movs	r1, #44	; 0x2c
    230a:	5c69      	ldrb	r1, [r5, r1]
    230c:	290f      	cmp	r1, #15
    230e:	d900      	bls.n	2312 <tcc_init+0x112>
    2310:	e174      	b.n	25fc <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2312:	7b28      	ldrb	r0, [r5, #12]
    2314:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2316:	7ae8      	ldrb	r0, [r5, #11]
    2318:	900b      	str	r0, [sp, #44]	; 0x2c
    231a:	202d      	movs	r0, #45	; 0x2d
    231c:	4682      	mov	sl, r0
    231e:	44aa      	add	sl, r5
    2320:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2322:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    2324:	ae0e      	add	r6, sp, #56	; 0x38
    2326:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2328:	26c0      	movs	r6, #192	; 0xc0
    232a:	0136      	lsls	r6, r6, #4
    232c:	46b1      	mov	r9, r6
    232e:	4684      	mov	ip, r0
    2330:	46a0      	mov	r8, r4
    2332:	0028      	movs	r0, r5
    2334:	4655      	mov	r5, sl
    2336:	9309      	str	r3, [sp, #36]	; 0x24
    2338:	4682      	mov	sl, r0
    233a:	e035      	b.n	23a8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    233c:	9906      	ldr	r1, [sp, #24]
    233e:	4311      	orrs	r1, r2
    2340:	9106      	str	r1, [sp, #24]
    2342:	e7d8      	b.n	22f6 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2344:	0292      	lsls	r2, r2, #10
    2346:	464f      	mov	r7, r9
    2348:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    234a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    234c:	7919      	ldrb	r1, [r3, #4]
    234e:	468b      	mov	fp, r1
    2350:	2103      	movs	r1, #3
    2352:	465f      	mov	r7, fp
    2354:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2356:	430a      	orrs	r2, r1
    2358:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    235a:	795a      	ldrb	r2, [r3, #5]
    235c:	0152      	lsls	r2, r2, #5
    235e:	2160      	movs	r1, #96	; 0x60
    2360:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2362:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2364:	7999      	ldrb	r1, [r3, #6]
    2366:	0209      	lsls	r1, r1, #8
    2368:	26c0      	movs	r6, #192	; 0xc0
    236a:	00b6      	lsls	r6, r6, #2
    236c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    236e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2370:	79da      	ldrb	r2, [r3, #7]
    2372:	0312      	lsls	r2, r2, #12
    2374:	21e0      	movs	r1, #224	; 0xe0
    2376:	01c9      	lsls	r1, r1, #7
    2378:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    237a:	4316      	orrs	r6, r2
    237c:	4334      	orrs	r4, r6
    237e:	9a03      	ldr	r2, [sp, #12]
    2380:	4314      	orrs	r4, r2
    2382:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    2384:	4662      	mov	r2, ip
    2386:	9907      	ldr	r1, [sp, #28]
    2388:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    238a:	2a04      	cmp	r2, #4
    238c:	d02a      	beq.n	23e4 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    238e:	7c9a      	ldrb	r2, [r3, #18]
    2390:	9905      	ldr	r1, [sp, #20]
    2392:	4291      	cmp	r1, r2
    2394:	d800      	bhi.n	2398 <tcc_init+0x198>
    2396:	e131      	b.n	25fc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    2398:	7a59      	ldrb	r1, [r3, #9]
    239a:	350a      	adds	r5, #10
    239c:	2304      	movs	r3, #4
    239e:	469b      	mov	fp, r3
    23a0:	44dc      	add	ip, fp
    23a2:	290f      	cmp	r1, #15
    23a4:	d900      	bls.n	23a8 <tcc_init+0x1a8>
    23a6:	e129      	b.n	25fc <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    23a8:	0609      	lsls	r1, r1, #24
    23aa:	23f0      	movs	r3, #240	; 0xf0
    23ac:	051b      	lsls	r3, r3, #20
    23ae:	4019      	ands	r1, r3
    23b0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    23b2:	782e      	ldrb	r6, [r5, #0]
    23b4:	0436      	lsls	r6, r6, #16
    23b6:	20ff      	movs	r0, #255	; 0xff
    23b8:	0400      	lsls	r0, r0, #16
    23ba:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    23bc:	7868      	ldrb	r0, [r5, #1]
    23be:	2480      	movs	r4, #128	; 0x80
    23c0:	2800      	cmp	r0, #0
    23c2:	d100      	bne.n	23c6 <tcc_init+0x1c6>
    23c4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    23c6:	7898      	ldrb	r0, [r3, #2]
    23c8:	2708      	movs	r7, #8
    23ca:	9703      	str	r7, [sp, #12]
    23cc:	2800      	cmp	r0, #0
    23ce:	d101      	bne.n	23d4 <tcc_init+0x1d4>
    23d0:	9804      	ldr	r0, [sp, #16]
    23d2:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    23d4:	78d8      	ldrb	r0, [r3, #3]
    23d6:	4683      	mov	fp, r0
    23d8:	2010      	movs	r0, #16
    23da:	465f      	mov	r7, fp
    23dc:	2f00      	cmp	r7, #0
    23de:	d1b1      	bne.n	2344 <tcc_init+0x144>
    23e0:	9804      	ldr	r0, [sp, #16]
    23e2:	e7af      	b.n	2344 <tcc_init+0x144>
    23e4:	4644      	mov	r4, r8
    23e6:	4655      	mov	r5, sl
    23e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    23ea:	4a52      	ldr	r2, [pc, #328]	; (2534 <tcc_init+0x334>)
    23ec:	5cd2      	ldrb	r2, [r2, r3]
    23ee:	4691      	mov	r9, r2
    23f0:	4651      	mov	r1, sl
    23f2:	3150      	adds	r1, #80	; 0x50
    23f4:	4650      	mov	r0, sl
    23f6:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    23f8:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    23fa:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    23fc:	2601      	movs	r6, #1
    23fe:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2400:	2602      	movs	r6, #2
    2402:	36ff      	adds	r6, #255	; 0xff
    2404:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2406:	2680      	movs	r6, #128	; 0x80
    2408:	0276      	lsls	r6, r6, #9
    240a:	46b0      	mov	r8, r6
    240c:	46a4      	mov	ip, r4
    240e:	001c      	movs	r4, r3
    2410:	464b      	mov	r3, r9
    2412:	e00f      	b.n	2434 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2414:	7806      	ldrb	r6, [r0, #0]
    2416:	2e00      	cmp	r6, #0
    2418:	d007      	beq.n	242a <tcc_init+0x22a>
			if (i >= ow_num) {
    241a:	4293      	cmp	r3, r2
    241c:	d800      	bhi.n	2420 <tcc_init+0x220>
    241e:	e0e7      	b.n	25f0 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2420:	2e02      	cmp	r6, #2
    2422:	d014      	beq.n	244e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2424:	4656      	mov	r6, sl
    2426:	4096      	lsls	r6, r2
    2428:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    242a:	3201      	adds	r2, #1
    242c:	3101      	adds	r1, #1
    242e:	3002      	adds	r0, #2
    2430:	2a08      	cmp	r2, #8
    2432:	d010      	beq.n	2456 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    2434:	780e      	ldrb	r6, [r1, #0]
    2436:	2e00      	cmp	r6, #0
    2438:	d0ec      	beq.n	2414 <tcc_init+0x214>
			if (i >= ow_num) {
    243a:	4293      	cmp	r3, r2
    243c:	d800      	bhi.n	2440 <tcc_init+0x240>
    243e:	e0d5      	b.n	25ec <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2440:	4646      	mov	r6, r8
    2442:	4096      	lsls	r6, r2
    2444:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2446:	7806      	ldrb	r6, [r0, #0]
    2448:	2e00      	cmp	r6, #0
    244a:	d1e9      	bne.n	2420 <tcc_init+0x220>
    244c:	e7ed      	b.n	242a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    244e:	465e      	mov	r6, fp
    2450:	4096      	lsls	r6, r2
    2452:	4337      	orrs	r7, r6
    2454:	e7e9      	b.n	242a <tcc_init+0x22a>
    2456:	4699      	mov	r9, r3
    2458:	0023      	movs	r3, r4
    245a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    245c:	7e6a      	ldrb	r2, [r5, #25]
    245e:	0112      	lsls	r2, r2, #4
    2460:	2130      	movs	r1, #48	; 0x30
    2462:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2464:	7e28      	ldrb	r0, [r5, #24]
    2466:	2207      	movs	r2, #7
    2468:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    246a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    246c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    246e:	2080      	movs	r0, #128	; 0x80
    2470:	0240      	lsls	r0, r0, #9
    2472:	000e      	movs	r6, r1
    2474:	e002      	b.n	247c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2476:	3201      	adds	r2, #1
    2478:	2a04      	cmp	r2, #4
    247a:	d00b      	beq.n	2494 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    247c:	18a9      	adds	r1, r5, r2
    247e:	7d09      	ldrb	r1, [r1, #20]
    2480:	2900      	cmp	r1, #0
    2482:	d0f8      	beq.n	2476 <tcc_init+0x276>
			if (n >= cc_num) {
    2484:	9905      	ldr	r1, [sp, #20]
    2486:	4291      	cmp	r1, r2
    2488:	dc00      	bgt.n	248c <tcc_init+0x28c>
    248a:	e0b3      	b.n	25f4 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    248c:	0001      	movs	r1, r0
    248e:	4091      	lsls	r1, r2
    2490:	430e      	orrs	r6, r1
    2492:	e7f0      	b.n	2476 <tcc_init+0x276>
    2494:	46b2      	mov	sl, r6
    2496:	9801      	ldr	r0, [sp, #4]
    2498:	0002      	movs	r2, r0
    249a:	3204      	adds	r2, #4
    249c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    249e:	2100      	movs	r1, #0
    24a0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    24a2:	4282      	cmp	r2, r0
    24a4:	d1fc      	bne.n	24a0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    24a6:	2200      	movs	r2, #0
    24a8:	9801      	ldr	r0, [sp, #4]
    24aa:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    24ac:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    24ae:	0099      	lsls	r1, r3, #2
    24b0:	4a22      	ldr	r2, [pc, #136]	; (253c <tcc_init+0x33c>)
    24b2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    24b4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    24b6:	22a0      	movs	r2, #160	; 0xa0
    24b8:	5ca9      	ldrb	r1, [r5, r2]
    24ba:	3a64      	subs	r2, #100	; 0x64
    24bc:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    24be:	a90d      	add	r1, sp, #52	; 0x34
    24c0:	7aaa      	ldrb	r2, [r5, #10]
    24c2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    24c4:	4a1e      	ldr	r2, [pc, #120]	; (2540 <tcc_init+0x340>)
    24c6:	5cd6      	ldrb	r6, [r2, r3]
    24c8:	0030      	movs	r0, r6
    24ca:	4b1e      	ldr	r3, [pc, #120]	; (2544 <tcc_init+0x344>)
    24cc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    24ce:	0030      	movs	r0, r6
    24d0:	4b1d      	ldr	r3, [pc, #116]	; (2548 <tcc_init+0x348>)
    24d2:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    24d4:	464b      	mov	r3, r9
    24d6:	2b00      	cmp	r3, #0
    24d8:	dd3c      	ble.n	2554 <tcc_init+0x354>
    24da:	002e      	movs	r6, r5
    24dc:	3658      	adds	r6, #88	; 0x58
    24de:	3398      	adds	r3, #152	; 0x98
    24e0:	4698      	mov	r8, r3
    24e2:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    24e4:	2301      	movs	r3, #1
    24e6:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    24e8:	46ab      	mov	fp, r5
    24ea:	4645      	mov	r5, r8
    24ec:	46a0      	mov	r8, r4
    24ee:	9c08      	ldr	r4, [sp, #32]
    24f0:	e003      	b.n	24fa <tcc_init+0x2fa>
    24f2:	3401      	adds	r4, #1
    24f4:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    24f6:	42ac      	cmp	r4, r5
    24f8:	d02a      	beq.n	2550 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    24fa:	7823      	ldrb	r3, [r4, #0]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d0f8      	beq.n	24f2 <tcc_init+0x2f2>
    2500:	ab0c      	add	r3, sp, #48	; 0x30
    2502:	464a      	mov	r2, r9
    2504:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2506:	2300      	movs	r3, #0
    2508:	aa0c      	add	r2, sp, #48	; 0x30
    250a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    250c:	0013      	movs	r3, r2
    250e:	2220      	movs	r2, #32
    2510:	18b2      	adds	r2, r6, r2
    2512:	7812      	ldrb	r2, [r2, #0]
    2514:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2516:	464a      	mov	r2, r9
    2518:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    251a:	7830      	ldrb	r0, [r6, #0]
    251c:	0019      	movs	r1, r3
    251e:	4b0b      	ldr	r3, [pc, #44]	; (254c <tcc_init+0x34c>)
    2520:	4798      	blx	r3
    2522:	e7e6      	b.n	24f2 <tcc_init+0x2f2>
    2524:	0000200d 	.word	0x0000200d
    2528:	40000400 	.word	0x40000400
    252c:	00005590 	.word	0x00005590
    2530:	000055a4 	.word	0x000055a4
    2534:	000055b0 	.word	0x000055b0
    2538:	0000559c 	.word	0x0000559c
    253c:	20000298 	.word	0x20000298
    2540:	000055a0 	.word	0x000055a0
    2544:	00001eb5 	.word	0x00001eb5
    2548:	00001e29 	.word	0x00001e29
    254c:	00001fad 	.word	0x00001fad
    2550:	4644      	mov	r4, r8
    2552:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2556:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    255a:	0212      	lsls	r2, r2, #8
    255c:	4313      	orrs	r3, r2
    255e:	9a02      	ldr	r2, [sp, #8]
    2560:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    2562:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2564:	2204      	movs	r2, #4
    2566:	68a3      	ldr	r3, [r4, #8]
    2568:	421a      	tst	r2, r3
    256a:	d1fc      	bne.n	2566 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    256c:	23ff      	movs	r3, #255	; 0xff
    256e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2570:	2204      	movs	r2, #4
    2572:	68a3      	ldr	r3, [r4, #8]
    2574:	421a      	tst	r2, r3
    2576:	d1fc      	bne.n	2572 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    2578:	466b      	mov	r3, sp
    257a:	7e1b      	ldrb	r3, [r3, #24]
    257c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    257e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2580:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    2582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2584:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    2586:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2588:	4a1d      	ldr	r2, [pc, #116]	; (2600 <tcc_init+0x400>)
    258a:	68a3      	ldr	r3, [r4, #8]
    258c:	4213      	tst	r3, r2
    258e:	d1fc      	bne.n	258a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    2590:	4653      	mov	r3, sl
    2592:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2594:	2210      	movs	r2, #16
    2596:	68a3      	ldr	r3, [r4, #8]
    2598:	421a      	tst	r2, r3
    259a:	d1fc      	bne.n	2596 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    259c:	682b      	ldr	r3, [r5, #0]
    259e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    25a0:	4a18      	ldr	r2, [pc, #96]	; (2604 <tcc_init+0x404>)
    25a2:	68a3      	ldr	r3, [r4, #8]
    25a4:	4213      	tst	r3, r2
    25a6:	d1fc      	bne.n	25a2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    25a8:	686b      	ldr	r3, [r5, #4]
    25aa:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    25ac:	9805      	ldr	r0, [sp, #20]
    25ae:	2800      	cmp	r0, #0
    25b0:	dd22      	ble.n	25f8 <tcc_init+0x3f8>
    25b2:	351c      	adds	r5, #28
    25b4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    25b6:	4e14      	ldr	r6, [pc, #80]	; (2608 <tcc_init+0x408>)
    25b8:	0032      	movs	r2, r6
    25ba:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    25bc:	68a3      	ldr	r3, [r4, #8]
    25be:	421a      	tst	r2, r3
    25c0:	d1fc      	bne.n	25bc <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    25c2:	cd04      	ldmia	r5!, {r2}
    25c4:	000b      	movs	r3, r1
    25c6:	3310      	adds	r3, #16
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	18e3      	adds	r3, r4, r3
    25cc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    25ce:	3101      	adds	r1, #1
    25d0:	4288      	cmp	r0, r1
    25d2:	dcf1      	bgt.n	25b8 <tcc_init+0x3b8>
	return STATUS_OK;
    25d4:	2000      	movs	r0, #0
    25d6:	e62d      	b.n	2234 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    25d8:	2017      	movs	r0, #23
    25da:	e62b      	b.n	2234 <tcc_init+0x34>
    25dc:	2017      	movs	r0, #23
    25de:	e629      	b.n	2234 <tcc_init+0x34>
    25e0:	2017      	movs	r0, #23
    25e2:	e627      	b.n	2234 <tcc_init+0x34>
    25e4:	2017      	movs	r0, #23
    25e6:	e625      	b.n	2234 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    25e8:	2017      	movs	r0, #23
    25ea:	e623      	b.n	2234 <tcc_init+0x34>
			if (i >= ow_num) {
    25ec:	2017      	movs	r0, #23
    25ee:	e621      	b.n	2234 <tcc_init+0x34>
			if (i >= ow_num) {
    25f0:	2017      	movs	r0, #23
    25f2:	e61f      	b.n	2234 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    25f4:	2017      	movs	r0, #23
    25f6:	e61d      	b.n	2234 <tcc_init+0x34>
	return STATUS_OK;
    25f8:	2000      	movs	r0, #0
    25fa:	e61b      	b.n	2234 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    25fc:	2017      	movs	r0, #23
    25fe:	e619      	b.n	2234 <tcc_init+0x34>
    2600:	00020040 	.word	0x00020040
    2604:	00040080 	.word	0x00040080
    2608:	00080100 	.word	0x00080100

0000260c <tcc_set_count_value>:
{
    260c:	b570      	push	{r4, r5, r6, lr}
    260e:	000d      	movs	r5, r1
	Tcc *const tcc_module = module_inst->hw;
    2610:	6804      	ldr	r4, [r0, #0]
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2612:	0020      	movs	r0, r4
    2614:	4b07      	ldr	r3, [pc, #28]	; (2634 <tcc_set_count_value+0x28>)
    2616:	4798      	blx	r3
	uint32_t max_count = _tcc_maxs[module_index];
    2618:	0080      	lsls	r0, r0, #2
	if (count > max_count) {
    261a:	4b07      	ldr	r3, [pc, #28]	; (2638 <tcc_set_count_value+0x2c>)
    261c:	58c3      	ldr	r3, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    261e:	2017      	movs	r0, #23
	if (count > max_count) {
    2620:	42ab      	cmp	r3, r5
    2622:	d200      	bcs.n	2626 <tcc_set_count_value+0x1a>
}
    2624:	bd70      	pop	{r4, r5, r6, pc}
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2626:	2210      	movs	r2, #16
    2628:	68a3      	ldr	r3, [r4, #8]
    262a:	421a      	tst	r2, r3
    262c:	d1fc      	bne.n	2628 <tcc_set_count_value+0x1c>
	tcc_module->COUNT.reg = (count);
    262e:	6365      	str	r5, [r4, #52]	; 0x34
	return STATUS_OK;
    2630:	2000      	movs	r0, #0
    2632:	e7f7      	b.n	2624 <tcc_set_count_value+0x18>
    2634:	0000200d 	.word	0x0000200d
    2638:	000055a4 	.word	0x000055a4

0000263c <tcc_get_count_value>:
	Tcc *const tcc_module = module_inst->hw;
    263c:	6802      	ldr	r2, [r0, #0]
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    263e:	2104      	movs	r1, #4
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    2640:	201f      	movs	r0, #31
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2642:	6893      	ldr	r3, [r2, #8]
    2644:	4219      	tst	r1, r3
    2646:	d1fc      	bne.n	2642 <tcc_get_count_value+0x6>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    2648:	7953      	ldrb	r3, [r2, #5]
    264a:	4383      	bics	r3, r0
		if (TCC_CTRLBSET_CMD_NONE == last_cmd) {
    264c:	d002      	beq.n	2654 <tcc_get_count_value+0x18>
		} else if (TCC_CTRLBSET_CMD_READSYNC == last_cmd) {
    264e:	2b80      	cmp	r3, #128	; 0x80
    2650:	d1f7      	bne.n	2642 <tcc_get_count_value+0x6>
    2652:	e009      	b.n	2668 <tcc_get_count_value+0x2c>
			tcc_module->CTRLBSET.bit.CMD = TCC_CTRLBSET_CMD_READSYNC_Val;
    2654:	7951      	ldrb	r1, [r2, #5]
    2656:	331f      	adds	r3, #31
    2658:	4019      	ands	r1, r3
    265a:	3b9f      	subs	r3, #159	; 0x9f
    265c:	430b      	orrs	r3, r1
    265e:	7153      	strb	r3, [r2, #5]
			while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2660:	2104      	movs	r1, #4
    2662:	6893      	ldr	r3, [r2, #8]
    2664:	4219      	tst	r1, r3
    2666:	d1fc      	bne.n	2662 <tcc_get_count_value+0x26>
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2668:	2110      	movs	r1, #16
    266a:	6893      	ldr	r3, [r2, #8]
    266c:	4219      	tst	r1, r3
    266e:	d1fc      	bne.n	266a <tcc_get_count_value+0x2e>
	return (tcc_module->COUNT.reg);
    2670:	6b50      	ldr	r0, [r2, #52]	; 0x34
}
    2672:	4770      	bx	lr

00002674 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    2674:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    2676:	233c      	movs	r3, #60	; 0x3c
    2678:	5cc3      	ldrb	r3, [r0, r3]
    267a:	4c01      	ldr	r4, [pc, #4]	; (2680 <tcc_set_compare_value+0xc>)
    267c:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    267e:	bd10      	pop	{r4, pc}
    2680:	00002041 	.word	0x00002041

00002684 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2684:	0092      	lsls	r2, r2, #2
    2686:	1883      	adds	r3, r0, r2
    2688:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    268a:	4b03      	ldr	r3, [pc, #12]	; (2698 <tcc_register_callback+0x14>)
    268c:	58d3      	ldr	r3, [r2, r3]
    268e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2690:	4313      	orrs	r3, r2
    2692:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    2694:	2000      	movs	r0, #0
    2696:	4770      	bx	lr
    2698:	000055b4 	.word	0x000055b4

0000269c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    269c:	b570      	push	{r4, r5, r6, lr}
    269e:	0004      	movs	r4, r0
    26a0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    26a2:	6800      	ldr	r0, [r0, #0]
    26a4:	4b09      	ldr	r3, [pc, #36]	; (26cc <tcc_enable_callback+0x30>)
    26a6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    26a8:	4b09      	ldr	r3, [pc, #36]	; (26d0 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26aa:	5c1b      	ldrb	r3, [r3, r0]
    26ac:	221f      	movs	r2, #31
    26ae:	401a      	ands	r2, r3
    26b0:	2301      	movs	r3, #1
    26b2:	4093      	lsls	r3, r2
    26b4:	4a07      	ldr	r2, [pc, #28]	; (26d4 <tcc_enable_callback+0x38>)
    26b6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    26b8:	00ad      	lsls	r5, r5, #2
    26ba:	4b07      	ldr	r3, [pc, #28]	; (26d8 <tcc_enable_callback+0x3c>)
    26bc:	58ea      	ldr	r2, [r5, r3]
    26be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    26c0:	4313      	orrs	r3, r2
    26c2:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    26c4:	6823      	ldr	r3, [r4, #0]
    26c6:	629a      	str	r2, [r3, #40]	; 0x28
}
    26c8:	bd70      	pop	{r4, r5, r6, pc}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	0000200d 	.word	0x0000200d
    26d0:	000055e4 	.word	0x000055e4
    26d4:	e000e100 	.word	0xe000e100
    26d8:	000055b4 	.word	0x000055b4

000026dc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    26dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26de:	46c6      	mov	lr, r8
    26e0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    26e2:	0080      	lsls	r0, r0, #2
    26e4:	4b0e      	ldr	r3, [pc, #56]	; (2720 <_tcc_interrupt_handler+0x44>)
    26e6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    26e8:	683b      	ldr	r3, [r7, #0]
    26ea:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    26ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    26ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    26f0:	4013      	ands	r3, r2
    26f2:	401e      	ands	r6, r3
    26f4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    26f6:	4b0b      	ldr	r3, [pc, #44]	; (2724 <_tcc_interrupt_handler+0x48>)
    26f8:	4698      	mov	r8, r3
    26fa:	e002      	b.n	2702 <_tcc_interrupt_handler+0x26>
    26fc:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    26fe:	2c30      	cmp	r4, #48	; 0x30
    2700:	d00a      	beq.n	2718 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2702:	4643      	mov	r3, r8
    2704:	58e5      	ldr	r5, [r4, r3]
    2706:	4235      	tst	r5, r6
    2708:	d0f8      	beq.n	26fc <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    270a:	193b      	adds	r3, r7, r4
    270c:	685b      	ldr	r3, [r3, #4]
    270e:	0038      	movs	r0, r7
    2710:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2712:	683b      	ldr	r3, [r7, #0]
    2714:	62dd      	str	r5, [r3, #44]	; 0x2c
    2716:	e7f1      	b.n	26fc <_tcc_interrupt_handler+0x20>
		}
	}
}
    2718:	bc04      	pop	{r2}
    271a:	4690      	mov	r8, r2
    271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	20000298 	.word	0x20000298
    2724:	000055b4 	.word	0x000055b4

00002728 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2728:	b510      	push	{r4, lr}
    272a:	2000      	movs	r0, #0
    272c:	4b01      	ldr	r3, [pc, #4]	; (2734 <TCC0_Handler+0xc>)
    272e:	4798      	blx	r3
    2730:	bd10      	pop	{r4, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	000026dd 	.word	0x000026dd

00002738 <TCC1_Handler>:
    2738:	b510      	push	{r4, lr}
    273a:	2001      	movs	r0, #1
    273c:	4b01      	ldr	r3, [pc, #4]	; (2744 <TCC1_Handler+0xc>)
    273e:	4798      	blx	r3
    2740:	bd10      	pop	{r4, pc}
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	000026dd 	.word	0x000026dd

00002748 <TCC2_Handler>:
    2748:	b510      	push	{r4, lr}
    274a:	2002      	movs	r0, #2
    274c:	4b01      	ldr	r3, [pc, #4]	; (2754 <TCC2_Handler+0xc>)
    274e:	4798      	blx	r3
    2750:	bd10      	pop	{r4, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	000026dd 	.word	0x000026dd

00002758 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    2758:	b570      	push	{r4, r5, r6, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    275a:	0204      	lsls	r4, r0, #8
    275c:	4e03      	ldr	r6, [pc, #12]	; (276c <_eeprom_emulator_nvm_erase_row+0x14>)
		error_code = nvm_erase_row(
    275e:	4d04      	ldr	r5, [pc, #16]	; (2770 <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    2760:	6873      	ldr	r3, [r6, #4]
    2762:	1918      	adds	r0, r3, r4
		error_code = nvm_erase_row(
    2764:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    2766:	2805      	cmp	r0, #5
    2768:	d0fa      	beq.n	2760 <_eeprom_emulator_nvm_erase_row+0x8>
}
    276a:	bd70      	pop	{r4, r5, r6, pc}
    276c:	200000cc 	.word	0x200000cc
    2770:	00000e49 	.word	0x00000e49

00002774 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    2774:	b5f0      	push	{r4, r5, r6, r7, lr}
    2776:	46de      	mov	lr, fp
    2778:	4657      	mov	r7, sl
    277a:	464e      	mov	r6, r9
    277c:	4645      	mov	r5, r8
    277e:	b5e0      	push	{r5, r6, r7, lr}
    2780:	b083      	sub	sp, #12
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    2782:	4b4d      	ldr	r3, [pc, #308]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    2784:	891b      	ldrh	r3, [r3, #8]
    2786:	2b00      	cmp	r3, #0
    2788:	d100      	bne.n	278c <_eeprom_emulator_update_page_mapping+0x18>
    278a:	e08f      	b.n	28ac <_eeprom_emulator_update_page_mapping+0x138>
    278c:	2500      	movs	r5, #0
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    278e:	4b4a      	ldr	r3, [pc, #296]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    2790:	469a      	mov	sl, r3
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    2792:	001f      	movs	r7, r3
    2794:	e027      	b.n	27e6 <_eeprom_emulator_update_page_mapping+0x72>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    2796:	9801      	ldr	r0, [sp, #4]
    2798:	4b48      	ldr	r3, [pc, #288]	; (28bc <_eeprom_emulator_update_page_mapping+0x148>)
    279a:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    279c:	3404      	adds	r4, #4
    279e:	b2a4      	uxth	r4, r4
    27a0:	4b45      	ldr	r3, [pc, #276]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    27a2:	891b      	ldrh	r3, [r3, #8]
    27a4:	42a3      	cmp	r3, r4
    27a6:	d918      	bls.n	27da <_eeprom_emulator_update_page_mapping+0x66>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    27a8:	3b01      	subs	r3, #1
    27aa:	429c      	cmp	r4, r3
    27ac:	d0f6      	beq.n	279c <_eeprom_emulator_update_page_mapping+0x28>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	01a3      	lsls	r3, r4, #6
    27b2:	5cd3      	ldrb	r3, [r2, r3]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    27b4:	2bff      	cmp	r3, #255	; 0xff
    27b6:	d0f1      	beq.n	279c <_eeprom_emulator_update_page_mapping+0x28>
			if(pre_logical_page == next_logical_page) {
    27b8:	429e      	cmp	r6, r3
    27ba:	d1ef      	bne.n	279c <_eeprom_emulator_update_page_mapping+0x28>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    27bc:	464b      	mov	r3, r9
    27be:	5cd3      	ldrb	r3, [r2, r3]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    27c0:	4641      	mov	r1, r8
    27c2:	5c51      	ldrb	r1, [r2, r1]
    27c4:	4299      	cmp	r1, r3
    27c6:	d0e6      	beq.n	2796 <_eeprom_emulator_update_page_mapping+0x22>
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
    27c8:	4659      	mov	r1, fp
    27ca:	5c52      	ldrb	r2, [r2, r1]
    27cc:	429a      	cmp	r2, r3
    27ce:	d0e2      	beq.n	2796 <_eeprom_emulator_update_page_mapping+0x22>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    27d0:	08a0      	lsrs	r0, r4, #2
    27d2:	b2c0      	uxtb	r0, r0
    27d4:	4b39      	ldr	r3, [pc, #228]	; (28bc <_eeprom_emulator_update_page_mapping+0x148>)
    27d6:	4798      	blx	r3
    27d8:	e7e0      	b.n	279c <_eeprom_emulator_update_page_mapping+0x28>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    27da:	3504      	adds	r5, #4
    27dc:	b2ad      	uxth	r5, r5
    27de:	4b36      	ldr	r3, [pc, #216]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    27e0:	891b      	ldrh	r3, [r3, #8]
    27e2:	429d      	cmp	r5, r3
    27e4:	d217      	bcs.n	2816 <_eeprom_emulator_update_page_mapping+0xa2>
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    27e6:	01ab      	lsls	r3, r5, #6
    27e8:	4698      	mov	r8, r3
    27ea:	4653      	mov	r3, sl
    27ec:	685b      	ldr	r3, [r3, #4]
    27ee:	4642      	mov	r2, r8
    27f0:	5c9e      	ldrb	r6, [r3, r2]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    27f2:	2eff      	cmp	r6, #255	; 0xff
    27f4:	d0f1      	beq.n	27da <_eeprom_emulator_update_page_mapping+0x66>
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    27f6:	1d2c      	adds	r4, r5, #4
    27f8:	b2a4      	uxth	r4, r4
    27fa:	4b2f      	ldr	r3, [pc, #188]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    27fc:	891b      	ldrh	r3, [r3, #8]
    27fe:	429c      	cmp	r4, r3
    2800:	d209      	bcs.n	2816 <_eeprom_emulator_update_page_mapping+0xa2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    2802:	2280      	movs	r2, #128	; 0x80
    2804:	4442      	add	r2, r8
    2806:	4691      	mov	r9, r2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    2808:	2240      	movs	r2, #64	; 0x40
    280a:	4442      	add	r2, r8
    280c:	4693      	mov	fp, r2
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    280e:	08aa      	lsrs	r2, r5, #2
    2810:	b2d2      	uxtb	r2, r2
    2812:	9201      	str	r2, [sp, #4]
    2814:	e7c8      	b.n	27a8 <_eeprom_emulator_update_page_mapping+0x34>
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    2816:	2b00      	cmp	r3, #0
    2818:	d043      	beq.n	28a2 <_eeprom_emulator_update_page_mapping+0x12e>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    281a:	4a27      	ldr	r2, [pc, #156]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    281c:	7a97      	ldrb	r7, [r2, #10]
    281e:	6851      	ldr	r1, [r2, #4]
    2820:	2200      	movs	r2, #0
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    2822:	1e5e      	subs	r6, r3, #1
			_eeprom_instance.page_map[logical_page] = c;
    2824:	4d24      	ldr	r5, [pc, #144]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    2826:	e004      	b.n	2832 <_eeprom_emulator_update_page_mapping+0xbe>
    2828:	3201      	adds	r2, #1
    282a:	3140      	adds	r1, #64	; 0x40
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    282c:	b290      	uxth	r0, r2
    282e:	4298      	cmp	r0, r3
    2830:	d20a      	bcs.n	2848 <_eeprom_emulator_update_page_mapping+0xd4>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    2832:	4296      	cmp	r6, r2
    2834:	d0f8      	beq.n	2828 <_eeprom_emulator_update_page_mapping+0xb4>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    2836:	7808      	ldrb	r0, [r1, #0]
    2838:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    283a:	2cff      	cmp	r4, #255	; 0xff
    283c:	d0f4      	beq.n	2828 <_eeprom_emulator_update_page_mapping+0xb4>
    283e:	42bc      	cmp	r4, r7
    2840:	d2f2      	bcs.n	2828 <_eeprom_emulator_update_page_mapping+0xb4>
			_eeprom_instance.page_map[logical_page] = c;
    2842:	1828      	adds	r0, r5, r0
    2844:	72c2      	strb	r2, [r0, #11]
    2846:	e7ef      	b.n	2828 <_eeprom_emulator_update_page_mapping+0xb4>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    2848:	203f      	movs	r0, #63	; 0x3f
    284a:	2287      	movs	r2, #135	; 0x87
    284c:	491a      	ldr	r1, [pc, #104]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    284e:	5488      	strb	r0, [r1, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    2850:	089d      	lsrs	r5, r3, #2
    2852:	d01f      	beq.n	2894 <_eeprom_emulator_update_page_mapping+0x120>

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    2854:	684c      	ldr	r4, [r1, #4]
    2856:	2104      	movs	r1, #4
    2858:	2700      	movs	r7, #0
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    285a:	3b01      	subs	r3, #1
    285c:	e013      	b.n	2886 <_eeprom_emulator_update_page_mapping+0x112>
    285e:	3201      	adds	r2, #1
    2860:	b292      	uxth	r2, r2
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    2862:	4291      	cmp	r1, r2
    2864:	d007      	beq.n	2876 <_eeprom_emulator_update_page_mapping+0x102>
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    2866:	429a      	cmp	r2, r3
    2868:	d0f9      	beq.n	285e <_eeprom_emulator_update_page_mapping+0xea>
			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    286a:	0190      	lsls	r0, r2, #6
    286c:	5d00      	ldrb	r0, [r0, r4]
    286e:	28ff      	cmp	r0, #255	; 0xff
    2870:	d0f5      	beq.n	285e <_eeprom_emulator_update_page_mapping+0xea>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    2872:	2600      	movs	r6, #0
    2874:	e7f3      	b.n	285e <_eeprom_emulator_update_page_mapping+0xea>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    2876:	2e00      	cmp	r6, #0
    2878:	d109      	bne.n	288e <_eeprom_emulator_update_page_mapping+0x11a>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    287a:	3701      	adds	r7, #1
    287c:	b2bf      	uxth	r7, r7
    287e:	3104      	adds	r1, #4
    2880:	b289      	uxth	r1, r1
    2882:	42bd      	cmp	r5, r7
    2884:	d006      	beq.n	2894 <_eeprom_emulator_update_page_mapping+0x120>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    2886:	1f0a      	subs	r2, r1, #4
    2888:	b292      	uxth	r2, r2
    288a:	2601      	movs	r6, #1
    288c:	e7eb      	b.n	2866 <_eeprom_emulator_update_page_mapping+0xf2>
			_eeprom_instance.spare_row = c;
    288e:	2387      	movs	r3, #135	; 0x87
    2890:	4a09      	ldr	r2, [pc, #36]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    2892:	54d7      	strb	r7, [r2, r3]
			break;
		}
	}
}
    2894:	b003      	add	sp, #12
    2896:	bc3c      	pop	{r2, r3, r4, r5}
    2898:	4690      	mov	r8, r2
    289a:	4699      	mov	r9, r3
    289c:	46a2      	mov	sl, r4
    289e:	46ab      	mov	fp, r5
    28a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    28a2:	213f      	movs	r1, #63	; 0x3f
    28a4:	2387      	movs	r3, #135	; 0x87
    28a6:	4a04      	ldr	r2, [pc, #16]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    28a8:	54d1      	strb	r1, [r2, r3]
    28aa:	e7f3      	b.n	2894 <_eeprom_emulator_update_page_mapping+0x120>
    28ac:	213f      	movs	r1, #63	; 0x3f
    28ae:	2387      	movs	r3, #135	; 0x87
    28b0:	4a01      	ldr	r2, [pc, #4]	; (28b8 <_eeprom_emulator_update_page_mapping+0x144>)
    28b2:	54d1      	strb	r1, [r2, r3]
    28b4:	e7ee      	b.n	2894 <_eeprom_emulator_update_page_mapping+0x120>
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	200000cc 	.word	0x200000cc
    28bc:	00002759 	.word	0x00002759

000028c0 <_eeprom_emulator_nvm_read_page>:
{
    28c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28c2:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    28c4:	0184      	lsls	r4, r0, #6
    28c6:	4f05      	ldr	r7, [pc, #20]	; (28dc <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    28c8:	4e05      	ldr	r6, [pc, #20]	; (28e0 <_eeprom_emulator_nvm_read_page+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	1918      	adds	r0, r3, r4
		error_code = nvm_read_buffer(
    28ce:	2240      	movs	r2, #64	; 0x40
    28d0:	0029      	movs	r1, r5
    28d2:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    28d4:	2805      	cmp	r0, #5
    28d6:	d0f8      	beq.n	28ca <_eeprom_emulator_nvm_read_page+0xa>
}
    28d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	200000cc 	.word	0x200000cc
    28e0:	00000ddd 	.word	0x00000ddd

000028e4 <_eeprom_emulator_nvm_fill_cache>:
{
    28e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28e6:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    28e8:	0184      	lsls	r4, r0, #6
    28ea:	4f05      	ldr	r7, [pc, #20]	; (2900 <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    28ec:	4e05      	ldr	r6, [pc, #20]	; (2904 <_eeprom_emulator_nvm_fill_cache+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	1918      	adds	r0, r3, r4
		error_code = nvm_write_buffer(
    28f2:	2240      	movs	r2, #64	; 0x40
    28f4:	0029      	movs	r1, r5
    28f6:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    28f8:	2805      	cmp	r0, #5
    28fa:	d0f8      	beq.n	28ee <_eeprom_emulator_nvm_fill_cache+0xa>
}
    28fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	200000cc 	.word	0x200000cc
    2904:	00000d35 	.word	0x00000d35

00002908 <_eeprom_emulator_nvm_commit_cache>:
{
    2908:	b570      	push	{r4, r5, r6, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    290a:	0184      	lsls	r4, r0, #6
    290c:	4e04      	ldr	r6, [pc, #16]	; (2920 <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    290e:	4d05      	ldr	r5, [pc, #20]	; (2924 <_eeprom_emulator_nvm_commit_cache+0x1c>)
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    2910:	6873      	ldr	r3, [r6, #4]
    2912:	1919      	adds	r1, r3, r4
		error_code = nvm_execute_command(
    2914:	2200      	movs	r2, #0
    2916:	2004      	movs	r0, #4
    2918:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    291a:	2805      	cmp	r0, #5
    291c:	d0f8      	beq.n	2910 <_eeprom_emulator_nvm_commit_cache+0x8>
}
    291e:	bd70      	pop	{r4, r5, r6, pc}
    2920:	200000cc 	.word	0x200000cc
    2924:	00000c95 	.word	0x00000c95

00002928 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    2928:	b510      	push	{r4, lr}
    292a:	b098      	sub	sp, #96	; 0x60
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    292c:	ab16      	add	r3, sp, #88	; 0x58
    292e:	2100      	movs	r1, #0
    2930:	7019      	strb	r1, [r3, #0]
	config->manual_page_write = true;
    2932:	2201      	movs	r2, #1
    2934:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2936:	4a2e      	ldr	r2, [pc, #184]	; (29f0 <eeprom_emulator_init+0xc8>)
    2938:	6852      	ldr	r2, [r2, #4]
    293a:	06d2      	lsls	r2, r2, #27
    293c:	0f12      	lsrs	r2, r2, #28
    293e:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    2940:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2942:	7119      	strb	r1, [r3, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    2944:	4c2b      	ldr	r4, [pc, #172]	; (29f4 <eeprom_emulator_init+0xcc>)
    2946:	a816      	add	r0, sp, #88	; 0x58
    2948:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    294a:	2805      	cmp	r0, #5
    294c:	d0fb      	beq.n	2946 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    294e:	a813      	add	r0, sp, #76	; 0x4c
    2950:	4b29      	ldr	r3, [pc, #164]	; (29f8 <eeprom_emulator_init+0xd0>)
    2952:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    2954:	9b14      	ldr	r3, [sp, #80]	; 0x50
		return STATUS_ERR_NO_MEMORY;
    2956:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    2958:	2b0b      	cmp	r3, #11
    295a:	d801      	bhi.n	2960 <eeprom_emulator_init+0x38>

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
}
    295c:	b018      	add	sp, #96	; 0x60
    295e:	bd10      	pop	{r4, pc}
	_eeprom_instance.physical_pages =
    2960:	4c26      	ldr	r4, [pc, #152]	; (29fc <eeprom_emulator_init+0xd4>)
    2962:	8123      	strh	r3, [r4, #8]
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    2964:	001a      	movs	r2, r3
    2966:	3a08      	subs	r2, #8
    2968:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    296a:	72a2      	strb	r2, [r4, #10]
			(void*)(FLASH_SIZE -
    296c:	041b      	lsls	r3, r3, #16
    296e:	0a9b      	lsrs	r3, r3, #10
    2970:	425b      	negs	r3, r3
    2972:	2280      	movs	r2, #128	; 0x80
    2974:	02d2      	lsls	r2, r2, #11
    2976:	4694      	mov	ip, r2
    2978:	4463      	add	r3, ip
	_eeprom_instance.flash =
    297a:	6063      	str	r3, [r4, #4]
	_eeprom_instance.cache_active = false;
    297c:	2200      	movs	r2, #0
    297e:	23c8      	movs	r3, #200	; 0xc8
    2980:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_update_page_mapping();
    2982:	4b1f      	ldr	r3, [pc, #124]	; (2a00 <eeprom_emulator_init+0xd8>)
    2984:	4798      	blx	r3
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    2986:	2387      	movs	r3, #135	; 0x87
    2988:	5ce3      	ldrb	r3, [r4, r3]
		return STATUS_ERR_BAD_FORMAT;
    298a:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    298c:	2b3f      	cmp	r3, #63	; 0x3f
    298e:	d0e5      	beq.n	295c <eeprom_emulator_init+0x34>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    2990:	466a      	mov	r2, sp
    2992:	4b1c      	ldr	r3, [pc, #112]	; (2a04 <eeprom_emulator_init+0xdc>)
    2994:	cb13      	ldmia	r3!, {r0, r1, r4}
    2996:	c213      	stmia	r2!, {r0, r1, r4}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    2998:	4b18      	ldr	r3, [pc, #96]	; (29fc <eeprom_emulator_init+0xd4>)
    299a:	8918      	ldrh	r0, [r3, #8]
    299c:	3801      	subs	r0, #1
    299e:	b280      	uxth	r0, r0
    29a0:	0011      	movs	r1, r2
    29a2:	4b19      	ldr	r3, [pc, #100]	; (2a08 <eeprom_emulator_init+0xe0>)
    29a4:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    29a6:	9b03      	ldr	r3, [sp, #12]
    29a8:	9a00      	ldr	r2, [sp, #0]
    29aa:	4293      	cmp	r3, r2
    29ac:	d119      	bne.n	29e2 <eeprom_emulator_init+0xba>
    29ae:	9b04      	ldr	r3, [sp, #16]
    29b0:	9a01      	ldr	r2, [sp, #4]
    29b2:	4293      	cmp	r3, r2
    29b4:	d117      	bne.n	29e6 <eeprom_emulator_init+0xbe>
    29b6:	9b05      	ldr	r3, [sp, #20]
    29b8:	9a02      	ldr	r2, [sp, #8]
    29ba:	4293      	cmp	r3, r2
    29bc:	d115      	bne.n	29ea <eeprom_emulator_init+0xc2>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    29be:	ab03      	add	r3, sp, #12
    29c0:	7bdb      	ldrb	r3, [r3, #15]
		return STATUS_ERR_IO;
    29c2:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    29c4:	2b01      	cmp	r3, #1
    29c6:	d1c9      	bne.n	295c <eeprom_emulator_init+0x34>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    29c8:	ab03      	add	r3, sp, #12
    29ca:	7b1b      	ldrb	r3, [r3, #12]
    29cc:	2b01      	cmp	r3, #1
    29ce:	d1c5      	bne.n	295c <eeprom_emulator_init+0x34>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    29d0:	ab03      	add	r3, sp, #12
    29d2:	7b5b      	ldrb	r3, [r3, #13]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d1c1      	bne.n	295c <eeprom_emulator_init+0x34>
	_eeprom_instance.initialized = true;
    29d8:	2201      	movs	r2, #1
    29da:	4b08      	ldr	r3, [pc, #32]	; (29fc <eeprom_emulator_init+0xd4>)
    29dc:	701a      	strb	r2, [r3, #0]
	return error_code;
    29de:	2000      	movs	r0, #0
    29e0:	e7bc      	b.n	295c <eeprom_emulator_init+0x34>
			return STATUS_ERR_BAD_FORMAT;
    29e2:	201a      	movs	r0, #26
    29e4:	e7ba      	b.n	295c <eeprom_emulator_init+0x34>
    29e6:	201a      	movs	r0, #26
    29e8:	e7b8      	b.n	295c <eeprom_emulator_init+0x34>
    29ea:	201a      	movs	r0, #26
    29ec:	e7b6      	b.n	295c <eeprom_emulator_init+0x34>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	41004000 	.word	0x41004000
    29f4:	00000c0d 	.word	0x00000c0d
    29f8:	00000ea5 	.word	0x00000ea5
    29fc:	200000cc 	.word	0x200000cc
    2a00:	00002775 	.word	0x00002775
    2a04:	000055e8 	.word	0x000055e8
    2a08:	000028c1 	.word	0x000028c1

00002a0c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
    2a0e:	b094      	sub	sp, #80	; 0x50
	_eeprom_instance.spare_row = 0;
    2a10:	4c2f      	ldr	r4, [pc, #188]	; (2ad0 <eeprom_emulator_erase_memory+0xc4>)
    2a12:	2200      	movs	r2, #0
    2a14:	2387      	movs	r3, #135	; 0x87
    2a16:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    2a18:	2000      	movs	r0, #0
    2a1a:	4b2e      	ldr	r3, [pc, #184]	; (2ad4 <eeprom_emulator_erase_memory+0xc8>)
    2a1c:	4798      	blx	r3
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    2a1e:	8925      	ldrh	r5, [r4, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    2a20:	2d04      	cmp	r5, #4
    2a22:	d925      	bls.n	2a70 <eeprom_emulator_erase_memory+0x64>
    2a24:	2600      	movs	r6, #0
    2a26:	2404      	movs	r4, #4
    2a28:	e019      	b.n	2a5e <eeprom_emulator_erase_memory+0x52>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    2a2a:	08a0      	lsrs	r0, r4, #2
    2a2c:	b2c0      	uxtb	r0, r0
    2a2e:	4b29      	ldr	r3, [pc, #164]	; (2ad4 <eeprom_emulator_erase_memory+0xc8>)
    2a30:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    2a32:	ad04      	add	r5, sp, #16
    2a34:	2240      	movs	r2, #64	; 0x40
    2a36:	21ff      	movs	r1, #255	; 0xff
    2a38:	0028      	movs	r0, r5
    2a3a:	4b27      	ldr	r3, [pc, #156]	; (2ad8 <eeprom_emulator_erase_memory+0xcc>)
    2a3c:	4798      	blx	r3
			data.header.logical_page = logical_page;
    2a3e:	702e      	strb	r6, [r5, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    2a40:	0029      	movs	r1, r5
    2a42:	0020      	movs	r0, r4
    2a44:	4b25      	ldr	r3, [pc, #148]	; (2adc <eeprom_emulator_erase_memory+0xd0>)
    2a46:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    2a48:	0020      	movs	r0, r4
    2a4a:	4b25      	ldr	r3, [pc, #148]	; (2ae0 <eeprom_emulator_erase_memory+0xd4>)
    2a4c:	4798      	blx	r3
			logical_page++;
    2a4e:	3601      	adds	r6, #1
    2a50:	b2b6      	uxth	r6, r6
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    2a52:	3401      	adds	r4, #1
    2a54:	b2a4      	uxth	r4, r4
    2a56:	4b1e      	ldr	r3, [pc, #120]	; (2ad0 <eeprom_emulator_erase_memory+0xc4>)
    2a58:	891d      	ldrh	r5, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    2a5a:	42a5      	cmp	r5, r4
    2a5c:	d908      	bls.n	2a70 <eeprom_emulator_erase_memory+0x64>
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    2a5e:	3d01      	subs	r5, #1
    2a60:	42ac      	cmp	r4, r5
    2a62:	d0f6      	beq.n	2a52 <eeprom_emulator_erase_memory+0x46>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    2a64:	2303      	movs	r3, #3
    2a66:	4023      	ands	r3, r4
    2a68:	d0df      	beq.n	2a2a <eeprom_emulator_erase_memory+0x1e>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    2a6a:	2b01      	cmp	r3, #1
    2a6c:	d8f1      	bhi.n	2a52 <eeprom_emulator_erase_memory+0x46>
    2a6e:	e7e0      	b.n	2a32 <eeprom_emulator_erase_memory+0x26>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    2a70:	ae01      	add	r6, sp, #4
    2a72:	4b1c      	ldr	r3, [pc, #112]	; (2ae4 <eeprom_emulator_erase_memory+0xd8>)
    2a74:	0032      	movs	r2, r6
    2a76:	cb13      	ldmia	r3!, {r0, r1, r4}
    2a78:	c213      	stmia	r2!, {r0, r1, r4}
	memset(&master_page, 0xFF, sizeof(master_page));
    2a7a:	ac04      	add	r4, sp, #16
    2a7c:	2240      	movs	r2, #64	; 0x40
    2a7e:	21ff      	movs	r1, #255	; 0xff
    2a80:	0020      	movs	r0, r4
    2a82:	4b15      	ldr	r3, [pc, #84]	; (2ad8 <eeprom_emulator_erase_memory+0xcc>)
    2a84:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    2a86:	9b01      	ldr	r3, [sp, #4]
    2a88:	9304      	str	r3, [sp, #16]
    2a8a:	6873      	ldr	r3, [r6, #4]
    2a8c:	6063      	str	r3, [r4, #4]
    2a8e:	68b3      	ldr	r3, [r6, #8]
    2a90:	60a3      	str	r3, [r4, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    2a92:	2301      	movs	r3, #1
    2a94:	73e3      	strb	r3, [r4, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    2a96:	7323      	strb	r3, [r4, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    2a98:	2300      	movs	r3, #0
    2a9a:	7363      	strb	r3, [r4, #13]
	master_page.revision      = EEPROM_REVISION;
    2a9c:	73a3      	strb	r3, [r4, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    2a9e:	3d01      	subs	r5, #1
    2aa0:	17eb      	asrs	r3, r5, #31
    2aa2:	2003      	movs	r0, #3
    2aa4:	4018      	ands	r0, r3
    2aa6:	1945      	adds	r5, r0, r5
    2aa8:	10ad      	asrs	r5, r5, #2
	_eeprom_emulator_nvm_erase_row(
    2aaa:	b2e8      	uxtb	r0, r5
    2aac:	4b09      	ldr	r3, [pc, #36]	; (2ad4 <eeprom_emulator_erase_memory+0xc8>)
    2aae:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    2ab0:	4d07      	ldr	r5, [pc, #28]	; (2ad0 <eeprom_emulator_erase_memory+0xc4>)
    2ab2:	8928      	ldrh	r0, [r5, #8]
    2ab4:	3801      	subs	r0, #1
    2ab6:	b280      	uxth	r0, r0
    2ab8:	0021      	movs	r1, r4
    2aba:	4b08      	ldr	r3, [pc, #32]	; (2adc <eeprom_emulator_erase_memory+0xd0>)
    2abc:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    2abe:	8928      	ldrh	r0, [r5, #8]
    2ac0:	3801      	subs	r0, #1
    2ac2:	b280      	uxth	r0, r0
    2ac4:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <eeprom_emulator_erase_memory+0xd4>)
    2ac6:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    2ac8:	4b07      	ldr	r3, [pc, #28]	; (2ae8 <eeprom_emulator_erase_memory+0xdc>)
    2aca:	4798      	blx	r3
}
    2acc:	b014      	add	sp, #80	; 0x50
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    2ad0:	200000cc 	.word	0x200000cc
    2ad4:	00002759 	.word	0x00002759
    2ad8:	00004237 	.word	0x00004237
    2adc:	000028e5 	.word	0x000028e5
    2ae0:	00002909 	.word	0x00002909
    2ae4:	000055e8 	.word	0x000055e8
    2ae8:	00002775 	.word	0x00002775

00002aec <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    2aec:	b510      	push	{r4, lr}
    2aee:	b090      	sub	sp, #64	; 0x40
    2af0:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    2af2:	4b15      	ldr	r3, [pc, #84]	; (2b48 <eeprom_emulator_read_page+0x5c>)
    2af4:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    2af6:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    2af8:	2a00      	cmp	r2, #0
    2afa:	d102      	bne.n	2b02 <eeprom_emulator_read_page+0x16>
		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
	}

	return STATUS_OK;
}
    2afc:	0018      	movs	r0, r3
    2afe:	b010      	add	sp, #64	; 0x40
    2b00:	bd10      	pop	{r4, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    2b02:	4b11      	ldr	r3, [pc, #68]	; (2b48 <eeprom_emulator_read_page+0x5c>)
    2b04:	7a9a      	ldrb	r2, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    2b06:	2318      	movs	r3, #24
	if (logical_page >= _eeprom_instance.logical_pages) {
    2b08:	4282      	cmp	r2, r0
    2b0a:	d9f7      	bls.n	2afc <eeprom_emulator_read_page+0x10>
	if ((_eeprom_instance.cache_active == true) &&
    2b0c:	33b0      	adds	r3, #176	; 0xb0
    2b0e:	4a0e      	ldr	r2, [pc, #56]	; (2b48 <eeprom_emulator_read_page+0x5c>)
    2b10:	5cd3      	ldrb	r3, [r2, r3]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d003      	beq.n	2b1e <eeprom_emulator_read_page+0x32>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    2b16:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    2b18:	5cd3      	ldrb	r3, [r2, r3]
    2b1a:	4283      	cmp	r3, r0
    2b1c:	d00c      	beq.n	2b38 <eeprom_emulator_read_page+0x4c>
				_eeprom_instance.page_map[logical_page], &temp);
    2b1e:	4b0a      	ldr	r3, [pc, #40]	; (2b48 <eeprom_emulator_read_page+0x5c>)
    2b20:	1818      	adds	r0, r3, r0
		_eeprom_emulator_nvm_read_page(
    2b22:	7ac0      	ldrb	r0, [r0, #11]
    2b24:	4669      	mov	r1, sp
    2b26:	4b09      	ldr	r3, [pc, #36]	; (2b4c <eeprom_emulator_read_page+0x60>)
    2b28:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    2b2a:	223c      	movs	r2, #60	; 0x3c
    2b2c:	a901      	add	r1, sp, #4
    2b2e:	0020      	movs	r0, r4
    2b30:	4b07      	ldr	r3, [pc, #28]	; (2b50 <eeprom_emulator_read_page+0x64>)
    2b32:	4798      	blx	r3
	return STATUS_OK;
    2b34:	2300      	movs	r3, #0
    2b36:	e7e1      	b.n	2afc <eeprom_emulator_read_page+0x10>
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    2b38:	223c      	movs	r2, #60	; 0x3c
    2b3a:	4903      	ldr	r1, [pc, #12]	; (2b48 <eeprom_emulator_read_page+0x5c>)
    2b3c:	318c      	adds	r1, #140	; 0x8c
    2b3e:	0020      	movs	r0, r4
    2b40:	4b03      	ldr	r3, [pc, #12]	; (2b50 <eeprom_emulator_read_page+0x64>)
    2b42:	4798      	blx	r3
	return STATUS_OK;
    2b44:	2300      	movs	r3, #0
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    2b46:	e7d9      	b.n	2afc <eeprom_emulator_read_page+0x10>
    2b48:	200000cc 	.word	0x200000cc
    2b4c:	000028c1 	.word	0x000028c1
    2b50:	00004225 	.word	0x00004225

00002b54 <eeprom_emulator_read_buffer>:
 */
enum status_code eeprom_emulator_read_buffer(
		const uint16_t offset,
		uint8_t *const data,
		const uint16_t length)
{
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	46de      	mov	lr, fp
    2b58:	4657      	mov	r7, sl
    2b5a:	464e      	mov	r6, r9
    2b5c:	4645      	mov	r5, r8
    2b5e:	b5e0      	push	{r5, r6, r7, lr}
    2b60:	b093      	sub	sp, #76	; 0x4c
    2b62:	0005      	movs	r5, r0
    2b64:	4689      	mov	r9, r1
    2b66:	0017      	movs	r7, r2
	enum status_code error_code;
	uint8_t buffer[EEPROM_PAGE_SIZE];
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    2b68:	213c      	movs	r1, #60	; 0x3c
    2b6a:	4b23      	ldr	r3, [pc, #140]	; (2bf8 <eeprom_emulator_read_buffer+0xa4>)
    2b6c:	4798      	blx	r3
    2b6e:	b2c3      	uxtb	r3, r0
    2b70:	9300      	str	r3, [sp, #0]
	uint16_t c = offset;

	/** Perform the initial page read  */
	error_code = eeprom_emulator_read_page(logical_page, buffer);
    2b72:	a903      	add	r1, sp, #12
    2b74:	0018      	movs	r0, r3
    2b76:	4b21      	ldr	r3, [pc, #132]	; (2bfc <eeprom_emulator_read_buffer+0xa8>)
    2b78:	4798      	blx	r3
    2b7a:	9001      	str	r0, [sp, #4]
	if (error_code != STATUS_OK) {
    2b7c:	2800      	cmp	r0, #0
    2b7e:	d132      	bne.n	2be6 <eeprom_emulator_read_buffer+0x92>
		return error_code;
	}

	/* To avoid entering into the initial if in the loop the first time */
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    2b80:	213c      	movs	r1, #60	; 0x3c
    2b82:	0028      	movs	r0, r5
    2b84:	4b1e      	ldr	r3, [pc, #120]	; (2c00 <eeprom_emulator_read_buffer+0xac>)
    2b86:	4798      	blx	r3
    2b88:	b289      	uxth	r1, r1
	uint16_t c = offset;
    2b8a:	002c      	movs	r4, r5
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    2b8c:	2900      	cmp	r1, #0
    2b8e:	d105      	bne.n	2b9c <eeprom_emulator_read_buffer+0x48>
		data[0] = buffer[0];
    2b90:	ab03      	add	r3, sp, #12
    2b92:	781b      	ldrb	r3, [r3, #0]
    2b94:	464a      	mov	r2, r9
    2b96:	7013      	strb	r3, [r2, #0]
		c=c+1;
    2b98:	1c6c      	adds	r4, r5, #1
    2b9a:	b2a4      	uxth	r4, r4
	}

	/* Read in the specified data from the emulated EEPROM memory space */
	for (; c < (length + offset); c++) {
    2b9c:	0026      	movs	r6, r4
    2b9e:	46ab      	mov	fp, r5
    2ba0:	46b8      	mov	r8, r7
    2ba2:	44a8      	add	r8, r5
    2ba4:	4544      	cmp	r4, r8
    2ba6:	da1e      	bge.n	2be6 <eeprom_emulator_read_buffer+0x92>
		/* Check if we have read up to a new EEPROM page boundary */
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2ba8:	4b15      	ldr	r3, [pc, #84]	; (2c00 <eeprom_emulator_read_buffer+0xac>)
    2baa:	469a      	mov	sl, r3
			/* Increment the page number we are looking at */
			logical_page++;

			/* Read the next page from non-volatile memory into the temporary
			 * buffer */
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    2bac:	af03      	add	r7, sp, #12
    2bae:	e009      	b.n	2bc4 <eeprom_emulator_read_buffer+0x70>
			}
		}

		/* Copy the next byte of data from the temporary buffer to the user's
		 * buffer */
		data[c - offset] = buffer[c % EEPROM_PAGE_SIZE];
    2bb0:	465b      	mov	r3, fp
    2bb2:	1af6      	subs	r6, r6, r3
    2bb4:	5d7b      	ldrb	r3, [r7, r5]
    2bb6:	464a      	mov	r2, r9
    2bb8:	5593      	strb	r3, [r2, r6]
	for (; c < (length + offset); c++) {
    2bba:	3401      	adds	r4, #1
    2bbc:	b2a4      	uxth	r4, r4
    2bbe:	0026      	movs	r6, r4
    2bc0:	4544      	cmp	r4, r8
    2bc2:	da10      	bge.n	2be6 <eeprom_emulator_read_buffer+0x92>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2bc4:	213c      	movs	r1, #60	; 0x3c
    2bc6:	0020      	movs	r0, r4
    2bc8:	47d0      	blx	sl
    2bca:	b28d      	uxth	r5, r1
    2bcc:	2d00      	cmp	r5, #0
    2bce:	d1ef      	bne.n	2bb0 <eeprom_emulator_read_buffer+0x5c>
			logical_page++;
    2bd0:	9b00      	ldr	r3, [sp, #0]
    2bd2:	3301      	adds	r3, #1
    2bd4:	b2db      	uxtb	r3, r3
    2bd6:	9300      	str	r3, [sp, #0]
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    2bd8:	0039      	movs	r1, r7
    2bda:	0018      	movs	r0, r3
    2bdc:	4b07      	ldr	r3, [pc, #28]	; (2bfc <eeprom_emulator_read_buffer+0xa8>)
    2bde:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2be0:	2800      	cmp	r0, #0
    2be2:	d0e5      	beq.n	2bb0 <eeprom_emulator_read_buffer+0x5c>
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    2be4:	9001      	str	r0, [sp, #4]
	}

	return error_code;
}
    2be6:	9801      	ldr	r0, [sp, #4]
    2be8:	b013      	add	sp, #76	; 0x4c
    2bea:	bc3c      	pop	{r2, r3, r4, r5}
    2bec:	4690      	mov	r8, r2
    2bee:	4699      	mov	r9, r3
    2bf0:	46a2      	mov	sl, r4
    2bf2:	46ab      	mov	fp, r5
    2bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	00003331 	.word	0x00003331
    2bfc:	00002aed 	.word	0x00002aed
    2c00:	0000343d 	.word	0x0000343d

00002c04 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    2c04:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    2c06:	23c8      	movs	r3, #200	; 0xc8
    2c08:	4a08      	ldr	r2, [pc, #32]	; (2c2c <eeprom_emulator_commit_page_buffer+0x28>)
    2c0a:	5cd3      	ldrb	r3, [r2, r3]
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d101      	bne.n	2c14 <eeprom_emulator_commit_page_buffer+0x10>

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;

	return error_code;
}
    2c10:	2000      	movs	r0, #0
    2c12:	bd10      	pop	{r4, pc}
			_eeprom_instance.page_map[cached_logical_page]);
    2c14:	0014      	movs	r4, r2
	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    2c16:	2388      	movs	r3, #136	; 0x88
			_eeprom_instance.page_map[cached_logical_page]);
    2c18:	5cd3      	ldrb	r3, [r2, r3]
    2c1a:	18d3      	adds	r3, r2, r3
	_eeprom_emulator_nvm_commit_cache(
    2c1c:	7ad8      	ldrb	r0, [r3, #11]
    2c1e:	4b04      	ldr	r3, [pc, #16]	; (2c30 <eeprom_emulator_commit_page_buffer+0x2c>)
    2c20:	4798      	blx	r3
	_eeprom_instance.cache_active = false;
    2c22:	2200      	movs	r2, #0
    2c24:	23c8      	movs	r3, #200	; 0xc8
    2c26:	54e2      	strb	r2, [r4, r3]
	return error_code;
    2c28:	e7f2      	b.n	2c10 <eeprom_emulator_commit_page_buffer+0xc>
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	200000cc 	.word	0x200000cc
    2c30:	00002909 	.word	0x00002909

00002c34 <eeprom_emulator_write_page>:
{
    2c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c36:	46de      	mov	lr, fp
    2c38:	4657      	mov	r7, sl
    2c3a:	464e      	mov	r6, r9
    2c3c:	4645      	mov	r5, r8
    2c3e:	b5e0      	push	{r5, r6, r7, lr}
    2c40:	b087      	sub	sp, #28
    2c42:	0004      	movs	r4, r0
    2c44:	9100      	str	r1, [sp, #0]
	if (_eeprom_instance.initialized == false) {
    2c46:	4b5a      	ldr	r3, [pc, #360]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2c48:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    2c4a:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d106      	bne.n	2c5e <eeprom_emulator_write_page+0x2a>
}
    2c50:	b007      	add	sp, #28
    2c52:	bc3c      	pop	{r2, r3, r4, r5}
    2c54:	4690      	mov	r8, r2
    2c56:	4699      	mov	r9, r3
    2c58:	46a2      	mov	sl, r4
    2c5a:	46ab      	mov	fp, r5
    2c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    2c5e:	4b54      	ldr	r3, [pc, #336]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2c60:	7a9b      	ldrb	r3, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    2c62:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    2c64:	42a3      	cmp	r3, r4
    2c66:	d9f3      	bls.n	2c50 <eeprom_emulator_write_page+0x1c>
	if ((_eeprom_instance.cache_active == true) &&
    2c68:	23c8      	movs	r3, #200	; 0xc8
    2c6a:	4a51      	ldr	r2, [pc, #324]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2c6c:	5cd3      	ldrb	r3, [r2, r3]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d005      	beq.n	2c7e <eeprom_emulator_write_page+0x4a>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    2c72:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    2c74:	5cd3      	ldrb	r3, [r2, r3]
    2c76:	42a3      	cmp	r3, r4
    2c78:	d001      	beq.n	2c7e <eeprom_emulator_write_page+0x4a>
		eeprom_emulator_commit_page_buffer();
    2c7a:	4b4e      	ldr	r3, [pc, #312]	; (2db4 <eeprom_emulator_write_page+0x180>)
    2c7c:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    2c7e:	4b4c      	ldr	r3, [pc, #304]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2c80:	191b      	adds	r3, r3, r4
    2c82:	7ade      	ldrb	r6, [r3, #11]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    2c84:	2303      	movs	r3, #3
    2c86:	0031      	movs	r1, r6
    2c88:	4399      	bics	r1, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    2c8a:	4b49      	ldr	r3, [pc, #292]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2c8c:	6858      	ldr	r0, [r3, #4]
    2c8e:	01b3      	lsls	r3, r6, #6
    2c90:	5c1b      	ldrb	r3, [r3, r0]
    2c92:	2bff      	cmp	r3, #255	; 0xff
    2c94:	d047      	beq.n	2d26 <eeprom_emulator_write_page+0xf2>
    2c96:	1c75      	adds	r5, r6, #1
    2c98:	b2ed      	uxtb	r5, r5
    2c9a:	3104      	adds	r1, #4
    2c9c:	b2c9      	uxtb	r1, r1
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    2c9e:	42a9      	cmp	r1, r5
    2ca0:	d057      	beq.n	2d52 <eeprom_emulator_write_page+0x11e>
    2ca2:	1c6b      	adds	r3, r5, #1
    2ca4:	b2db      	uxtb	r3, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    2ca6:	01aa      	lsls	r2, r5, #6
    2ca8:	5c12      	ldrb	r2, [r2, r0]
    2caa:	2aff      	cmp	r2, #255	; 0xff
    2cac:	d03c      	beq.n	2d28 <eeprom_emulator_write_page+0xf4>
    2cae:	001d      	movs	r5, r3
    2cb0:	e7f5      	b.n	2c9e <eeprom_emulator_write_page+0x6a>
				page_trans[c].physical_page =
    2cb2:	aa05      	add	r2, sp, #20
    2cb4:	18d2      	adds	r2, r2, r3
    2cb6:	7056      	strb	r6, [r2, #1]
    2cb8:	e069      	b.n	2d8e <eeprom_emulator_write_page+0x15a>
    2cba:	af05      	add	r7, sp, #20
    2cbc:	18ff      	adds	r7, r7, r3
    2cbe:	707d      	strb	r5, [r7, #1]
    2cc0:	e063      	b.n	2d8a <eeprom_emulator_write_page+0x156>
			_eeprom_emulator_nvm_read_page(
    2cc2:	7870      	ldrb	r0, [r6, #1]
    2cc4:	9902      	ldr	r1, [sp, #8]
    2cc6:	4b3c      	ldr	r3, [pc, #240]	; (2db8 <eeprom_emulator_write_page+0x184>)
    2cc8:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    2cca:	4c39      	ldr	r4, [pc, #228]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2ccc:	0021      	movs	r1, r4
    2cce:	3188      	adds	r1, #136	; 0x88
    2cd0:	b2a8      	uxth	r0, r5
    2cd2:	4b3a      	ldr	r3, [pc, #232]	; (2dbc <eeprom_emulator_write_page+0x188>)
    2cd4:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    2cd6:	464b      	mov	r3, r9
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	18e3      	adds	r3, r4, r3
    2cdc:	72dd      	strb	r5, [r3, #11]
		_eeprom_instance.cache_active = true;
    2cde:	2201      	movs	r2, #1
    2ce0:	23c8      	movs	r3, #200	; 0xc8
    2ce2:	54e2      	strb	r2, [r4, r3]
    2ce4:	3701      	adds	r7, #1
    2ce6:	3602      	adds	r6, #2
	for (uint8_t c = 0; c < 2; c++) {
    2ce8:	2f02      	cmp	r7, #2
    2cea:	d013      	beq.n	2d14 <eeprom_emulator_write_page+0xe0>
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    2cec:	2387      	movs	r3, #135	; 0x87
    2cee:	465a      	mov	r2, fp
    2cf0:	5cd5      	ldrb	r5, [r2, r3]
    2cf2:	00ad      	lsls	r5, r5, #2
    2cf4:	19ed      	adds	r5, r5, r7
		eeprom_emulator_commit_page_buffer();
    2cf6:	47d0      	blx	sl
    2cf8:	46b1      	mov	r9, r6
		if (logical_page == page_trans[c].logical_page) {
    2cfa:	7833      	ldrb	r3, [r6, #0]
    2cfc:	9901      	ldr	r1, [sp, #4]
    2cfe:	428b      	cmp	r3, r1
    2d00:	d1df      	bne.n	2cc2 <eeprom_emulator_write_page+0x8e>
			_eeprom_instance.cache.header.logical_page = logical_page;
    2d02:	2388      	movs	r3, #136	; 0x88
    2d04:	4a2a      	ldr	r2, [pc, #168]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2d06:	54d1      	strb	r1, [r2, r3]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    2d08:	223c      	movs	r2, #60	; 0x3c
    2d0a:	9900      	ldr	r1, [sp, #0]
    2d0c:	9803      	ldr	r0, [sp, #12]
    2d0e:	4b2c      	ldr	r3, [pc, #176]	; (2dc0 <eeprom_emulator_write_page+0x18c>)
    2d10:	4798      	blx	r3
    2d12:	e7da      	b.n	2cca <eeprom_emulator_write_page+0x96>
	_eeprom_emulator_nvm_erase_row(row_number);
    2d14:	4644      	mov	r4, r8
    2d16:	4640      	mov	r0, r8
    2d18:	4b2a      	ldr	r3, [pc, #168]	; (2dc4 <eeprom_emulator_write_page+0x190>)
    2d1a:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    2d1c:	2387      	movs	r3, #135	; 0x87
    2d1e:	4a24      	ldr	r2, [pc, #144]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2d20:	54d4      	strb	r4, [r2, r3]
		return STATUS_OK;
    2d22:	2000      	movs	r0, #0
    2d24:	e794      	b.n	2c50 <eeprom_emulator_write_page+0x1c>
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    2d26:	0035      	movs	r5, r6
	_eeprom_instance.cache.header.logical_page = logical_page;
    2d28:	4e21      	ldr	r6, [pc, #132]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2d2a:	2388      	movs	r3, #136	; 0x88
    2d2c:	54f4      	strb	r4, [r6, r3]
	memcpy(&_eeprom_instance.cache.data,
    2d2e:	0030      	movs	r0, r6
    2d30:	308c      	adds	r0, #140	; 0x8c
    2d32:	223c      	movs	r2, #60	; 0x3c
    2d34:	9900      	ldr	r1, [sp, #0]
    2d36:	4b22      	ldr	r3, [pc, #136]	; (2dc0 <eeprom_emulator_write_page+0x18c>)
    2d38:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    2d3a:	0031      	movs	r1, r6
    2d3c:	3188      	adds	r1, #136	; 0x88
    2d3e:	b2a8      	uxth	r0, r5
    2d40:	4b1e      	ldr	r3, [pc, #120]	; (2dbc <eeprom_emulator_write_page+0x188>)
    2d42:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    2d44:	1934      	adds	r4, r6, r4
    2d46:	72e5      	strb	r5, [r4, #11]
	_eeprom_instance.cache_active           = true;
    2d48:	2201      	movs	r2, #1
    2d4a:	23c8      	movs	r3, #200	; 0xc8
    2d4c:	54f2      	strb	r2, [r6, r3]
	return STATUS_OK;
    2d4e:	2000      	movs	r0, #0
    2d50:	e77e      	b.n	2c50 <eeprom_emulator_write_page+0x1c>
		_eeprom_emulator_move_data_to_spare(
    2d52:	08b3      	lsrs	r3, r6, #2
    2d54:	4698      	mov	r8, r3
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    2d56:	021b      	lsls	r3, r3, #8
	const struct _eeprom_page *row_data =
    2d58:	4a15      	ldr	r2, [pc, #84]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2d5a:	6852      	ldr	r2, [r2, #4]
    2d5c:	18d3      	adds	r3, r2, r3
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    2d5e:	aa05      	add	r2, sp, #20
    2d60:	7819      	ldrb	r1, [r3, #0]
    2d62:	7011      	strb	r1, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    2d64:	2103      	movs	r1, #3
    2d66:	438e      	bics	r6, r1
    2d68:	7056      	strb	r6, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    2d6a:	313d      	adds	r1, #61	; 0x3d
    2d6c:	5c59      	ldrb	r1, [r3, r1]
    2d6e:	7091      	strb	r1, [r2, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    2d70:	1c71      	adds	r1, r6, #1
    2d72:	70d1      	strb	r1, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    2d74:	2280      	movs	r2, #128	; 0x80
    2d76:	5c98      	ldrb	r0, [r3, r2]
    2d78:	3240      	adds	r2, #64	; 0x40
    2d7a:	5c99      	ldrb	r1, [r3, r2]
    2d7c:	2300      	movs	r3, #0
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    2d7e:	1cb5      	adds	r5, r6, #2
    2d80:	3603      	adds	r6, #3
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    2d82:	aa05      	add	r2, sp, #20
    2d84:	5cd2      	ldrb	r2, [r2, r3]
    2d86:	4290      	cmp	r0, r2
    2d88:	d097      	beq.n	2cba <eeprom_emulator_write_page+0x86>
    2d8a:	428a      	cmp	r2, r1
    2d8c:	d091      	beq.n	2cb2 <eeprom_emulator_write_page+0x7e>
    2d8e:	3302      	adds	r3, #2
	for (uint8_t c = 0; c < 2; c++) {
    2d90:	2b04      	cmp	r3, #4
    2d92:	d1f6      	bne.n	2d82 <eeprom_emulator_write_page+0x14e>
    2d94:	ae05      	add	r6, sp, #20
    2d96:	2700      	movs	r7, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <eeprom_emulator_write_page+0x17c>)
    2d9a:	469b      	mov	fp, r3
		eeprom_emulator_commit_page_buffer();
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <eeprom_emulator_write_page+0x180>)
    2d9e:	469a      	mov	sl, r3
			_eeprom_emulator_nvm_read_page(
    2da0:	465b      	mov	r3, fp
    2da2:	3388      	adds	r3, #136	; 0x88
    2da4:	9302      	str	r3, [sp, #8]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    2da6:	3304      	adds	r3, #4
    2da8:	9303      	str	r3, [sp, #12]
    2daa:	9401      	str	r4, [sp, #4]
    2dac:	e79e      	b.n	2cec <eeprom_emulator_write_page+0xb8>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	200000cc 	.word	0x200000cc
    2db4:	00002c05 	.word	0x00002c05
    2db8:	000028c1 	.word	0x000028c1
    2dbc:	000028e5 	.word	0x000028e5
    2dc0:	00004225 	.word	0x00004225
    2dc4:	00002759 	.word	0x00002759

00002dc8 <eeprom_emulator_write_buffer>:
{
    2dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dca:	46de      	mov	lr, fp
    2dcc:	4657      	mov	r7, sl
    2dce:	464e      	mov	r6, r9
    2dd0:	4645      	mov	r5, r8
    2dd2:	b5e0      	push	{r5, r6, r7, lr}
    2dd4:	b091      	sub	sp, #68	; 0x44
    2dd6:	0005      	movs	r5, r0
    2dd8:	4689      	mov	r9, r1
    2dda:	4690      	mov	r8, r2
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    2ddc:	213c      	movs	r1, #60	; 0x3c
    2dde:	4b2d      	ldr	r3, [pc, #180]	; (2e94 <eeprom_emulator_write_buffer+0xcc>)
    2de0:	4798      	blx	r3
    2de2:	b2c7      	uxtb	r7, r0
	if ((offset % EEPROM_PAGE_SIZE) || length < EEPROM_PAGE_SIZE) {
    2de4:	213c      	movs	r1, #60	; 0x3c
    2de6:	0028      	movs	r0, r5
    2de8:	4b2b      	ldr	r3, [pc, #172]	; (2e98 <eeprom_emulator_write_buffer+0xd0>)
    2dea:	4798      	blx	r3
    2dec:	b289      	uxth	r1, r1
    2dee:	2900      	cmp	r1, #0
    2df0:	d135      	bne.n	2e5e <eeprom_emulator_write_buffer+0x96>
    2df2:	4643      	mov	r3, r8
    2df4:	2b3b      	cmp	r3, #59	; 0x3b
    2df6:	d93f      	bls.n	2e78 <eeprom_emulator_write_buffer+0xb0>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    2df8:	464b      	mov	r3, r9
    2dfa:	781a      	ldrb	r2, [r3, #0]
    2dfc:	ab01      	add	r3, sp, #4
    2dfe:	701a      	strb	r2, [r3, #0]
		c=c+1;
    2e00:	1c6c      	adds	r4, r5, #1
    2e02:	b2a4      	uxth	r4, r4
	for (; c < (length + offset); c++) {
    2e04:	0026      	movs	r6, r4
    2e06:	46ab      	mov	fp, r5
    2e08:	44a8      	add	r8, r5
    2e0a:	45a0      	cmp	r8, r4
    2e0c:	dd22      	ble.n	2e54 <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2e0e:	4b22      	ldr	r3, [pc, #136]	; (2e98 <eeprom_emulator_write_buffer+0xd0>)
    2e10:	469a      	mov	sl, r3
    2e12:	e00a      	b.n	2e2a <eeprom_emulator_write_buffer+0x62>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    2e14:	465b      	mov	r3, fp
    2e16:	1af6      	subs	r6, r6, r3
    2e18:	464b      	mov	r3, r9
    2e1a:	5d9a      	ldrb	r2, [r3, r6]
    2e1c:	ab01      	add	r3, sp, #4
    2e1e:	555a      	strb	r2, [r3, r5]
	for (; c < (length + offset); c++) {
    2e20:	3401      	adds	r4, #1
    2e22:	b2a4      	uxth	r4, r4
    2e24:	0026      	movs	r6, r4
    2e26:	4544      	cmp	r4, r8
    2e28:	da14      	bge.n	2e54 <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2e2a:	213c      	movs	r1, #60	; 0x3c
    2e2c:	0020      	movs	r0, r4
    2e2e:	47d0      	blx	sl
    2e30:	b28d      	uxth	r5, r1
    2e32:	2d00      	cmp	r5, #0
    2e34:	d1ee      	bne.n	2e14 <eeprom_emulator_write_buffer+0x4c>
			error_code = eeprom_emulator_write_page(logical_page, buffer);
    2e36:	a901      	add	r1, sp, #4
    2e38:	0038      	movs	r0, r7
    2e3a:	4b18      	ldr	r3, [pc, #96]	; (2e9c <eeprom_emulator_write_buffer+0xd4>)
    2e3c:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2e3e:	2800      	cmp	r0, #0
    2e40:	d113      	bne.n	2e6a <eeprom_emulator_write_buffer+0xa2>
			logical_page++;
    2e42:	3701      	adds	r7, #1
    2e44:	b2ff      	uxtb	r7, r7
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    2e46:	a901      	add	r1, sp, #4
    2e48:	0038      	movs	r0, r7
    2e4a:	4b15      	ldr	r3, [pc, #84]	; (2ea0 <eeprom_emulator_write_buffer+0xd8>)
    2e4c:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2e4e:	2800      	cmp	r0, #0
    2e50:	d0e0      	beq.n	2e14 <eeprom_emulator_write_buffer+0x4c>
    2e52:	e00a      	b.n	2e6a <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_write_page(logical_page, buffer);
    2e54:	a901      	add	r1, sp, #4
    2e56:	0038      	movs	r0, r7
    2e58:	4b10      	ldr	r3, [pc, #64]	; (2e9c <eeprom_emulator_write_buffer+0xd4>)
    2e5a:	4798      	blx	r3
    2e5c:	e005      	b.n	2e6a <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    2e5e:	a901      	add	r1, sp, #4
    2e60:	0038      	movs	r0, r7
    2e62:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <eeprom_emulator_write_buffer+0xd8>)
    2e64:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    2e66:	2800      	cmp	r0, #0
    2e68:	d00d      	beq.n	2e86 <eeprom_emulator_write_buffer+0xbe>
}
    2e6a:	b011      	add	sp, #68	; 0x44
    2e6c:	bc3c      	pop	{r2, r3, r4, r5}
    2e6e:	4690      	mov	r8, r2
    2e70:	4699      	mov	r9, r3
    2e72:	46a2      	mov	sl, r4
    2e74:	46ab      	mov	fp, r5
    2e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    2e78:	a901      	add	r1, sp, #4
    2e7a:	0038      	movs	r0, r7
    2e7c:	4b08      	ldr	r3, [pc, #32]	; (2ea0 <eeprom_emulator_write_buffer+0xd8>)
    2e7e:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    2e80:	2800      	cmp	r0, #0
    2e82:	d0b9      	beq.n	2df8 <eeprom_emulator_write_buffer+0x30>
    2e84:	e7f1      	b.n	2e6a <eeprom_emulator_write_buffer+0xa2>
	for (; c < (length + offset); c++) {
    2e86:	002e      	movs	r6, r5
    2e88:	46ab      	mov	fp, r5
    2e8a:	44a8      	add	r8, r5
    2e8c:	45a8      	cmp	r8, r5
    2e8e:	ddec      	ble.n	2e6a <eeprom_emulator_write_buffer+0xa2>
	uint16_t c = offset;
    2e90:	002c      	movs	r4, r5
    2e92:	e7bc      	b.n	2e0e <eeprom_emulator_write_buffer+0x46>
    2e94:	00003331 	.word	0x00003331
    2e98:	0000343d 	.word	0x0000343d
    2e9c:	00002c35 	.word	0x00002c35
    2ea0:	00002aed 	.word	0x00002aed

00002ea4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ea4:	e7fe      	b.n	2ea4 <Dummy_Handler>
	...

00002ea8 <Reset_Handler>:
{
    2ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2eaa:	4a2a      	ldr	r2, [pc, #168]	; (2f54 <Reset_Handler+0xac>)
    2eac:	4b2a      	ldr	r3, [pc, #168]	; (2f58 <Reset_Handler+0xb0>)
    2eae:	429a      	cmp	r2, r3
    2eb0:	d011      	beq.n	2ed6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2eb2:	001a      	movs	r2, r3
    2eb4:	4b29      	ldr	r3, [pc, #164]	; (2f5c <Reset_Handler+0xb4>)
    2eb6:	429a      	cmp	r2, r3
    2eb8:	d20d      	bcs.n	2ed6 <Reset_Handler+0x2e>
    2eba:	4a29      	ldr	r2, [pc, #164]	; (2f60 <Reset_Handler+0xb8>)
    2ebc:	3303      	adds	r3, #3
    2ebe:	1a9b      	subs	r3, r3, r2
    2ec0:	089b      	lsrs	r3, r3, #2
    2ec2:	3301      	adds	r3, #1
    2ec4:	009b      	lsls	r3, r3, #2
    2ec6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2ec8:	4823      	ldr	r0, [pc, #140]	; (2f58 <Reset_Handler+0xb0>)
    2eca:	4922      	ldr	r1, [pc, #136]	; (2f54 <Reset_Handler+0xac>)
    2ecc:	588c      	ldr	r4, [r1, r2]
    2ece:	5084      	str	r4, [r0, r2]
    2ed0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2ed2:	429a      	cmp	r2, r3
    2ed4:	d1fa      	bne.n	2ecc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2ed6:	4a23      	ldr	r2, [pc, #140]	; (2f64 <Reset_Handler+0xbc>)
    2ed8:	4b23      	ldr	r3, [pc, #140]	; (2f68 <Reset_Handler+0xc0>)
    2eda:	429a      	cmp	r2, r3
    2edc:	d20a      	bcs.n	2ef4 <Reset_Handler+0x4c>
    2ede:	43d3      	mvns	r3, r2
    2ee0:	4921      	ldr	r1, [pc, #132]	; (2f68 <Reset_Handler+0xc0>)
    2ee2:	185b      	adds	r3, r3, r1
    2ee4:	2103      	movs	r1, #3
    2ee6:	438b      	bics	r3, r1
    2ee8:	3304      	adds	r3, #4
    2eea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2eec:	2100      	movs	r1, #0
    2eee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2ef0:	4293      	cmp	r3, r2
    2ef2:	d1fc      	bne.n	2eee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2ef4:	4a1d      	ldr	r2, [pc, #116]	; (2f6c <Reset_Handler+0xc4>)
    2ef6:	21ff      	movs	r1, #255	; 0xff
    2ef8:	4b1d      	ldr	r3, [pc, #116]	; (2f70 <Reset_Handler+0xc8>)
    2efa:	438b      	bics	r3, r1
    2efc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2efe:	39fd      	subs	r1, #253	; 0xfd
    2f00:	2390      	movs	r3, #144	; 0x90
    2f02:	005b      	lsls	r3, r3, #1
    2f04:	4a1b      	ldr	r2, [pc, #108]	; (2f74 <Reset_Handler+0xcc>)
    2f06:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2f08:	4a1b      	ldr	r2, [pc, #108]	; (2f78 <Reset_Handler+0xd0>)
    2f0a:	78d3      	ldrb	r3, [r2, #3]
    2f0c:	2503      	movs	r5, #3
    2f0e:	43ab      	bics	r3, r5
    2f10:	2402      	movs	r4, #2
    2f12:	4323      	orrs	r3, r4
    2f14:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2f16:	78d3      	ldrb	r3, [r2, #3]
    2f18:	270c      	movs	r7, #12
    2f1a:	43bb      	bics	r3, r7
    2f1c:	2608      	movs	r6, #8
    2f1e:	4333      	orrs	r3, r6
    2f20:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2f22:	4b16      	ldr	r3, [pc, #88]	; (2f7c <Reset_Handler+0xd4>)
    2f24:	7b98      	ldrb	r0, [r3, #14]
    2f26:	2230      	movs	r2, #48	; 0x30
    2f28:	4390      	bics	r0, r2
    2f2a:	2220      	movs	r2, #32
    2f2c:	4310      	orrs	r0, r2
    2f2e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2f30:	7b99      	ldrb	r1, [r3, #14]
    2f32:	43b9      	bics	r1, r7
    2f34:	4331      	orrs	r1, r6
    2f36:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2f38:	7b9a      	ldrb	r2, [r3, #14]
    2f3a:	43aa      	bics	r2, r5
    2f3c:	4322      	orrs	r2, r4
    2f3e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2f40:	4a0f      	ldr	r2, [pc, #60]	; (2f80 <Reset_Handler+0xd8>)
    2f42:	6853      	ldr	r3, [r2, #4]
    2f44:	2180      	movs	r1, #128	; 0x80
    2f46:	430b      	orrs	r3, r1
    2f48:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2f4a:	4b0e      	ldr	r3, [pc, #56]	; (2f84 <Reset_Handler+0xdc>)
    2f4c:	4798      	blx	r3
        main();
    2f4e:	4b0e      	ldr	r3, [pc, #56]	; (2f88 <Reset_Handler+0xe0>)
    2f50:	4798      	blx	r3
    2f52:	e7fe      	b.n	2f52 <Reset_Handler+0xaa>
    2f54:	0000570c 	.word	0x0000570c
    2f58:	20000000 	.word	0x20000000
    2f5c:	20000068 	.word	0x20000068
    2f60:	20000004 	.word	0x20000004
    2f64:	20000068 	.word	0x20000068
    2f68:	200002fc 	.word	0x200002fc
    2f6c:	e000ed00 	.word	0xe000ed00
    2f70:	00000000 	.word	0x00000000
    2f74:	41007000 	.word	0x41007000
    2f78:	41005000 	.word	0x41005000
    2f7c:	41004800 	.word	0x41004800
    2f80:	41004000 	.word	0x41004000
    2f84:	000041c9 	.word	0x000041c9
    2f88:	00003299 	.word	0x00003299

00002f8c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	46c6      	mov	lr, r8
    2f90:	b500      	push	{lr}
    2f92:	000c      	movs	r4, r1
    2f94:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2f96:	2800      	cmp	r0, #0
    2f98:	d10f      	bne.n	2fba <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2f9a:	2a00      	cmp	r2, #0
    2f9c:	dd11      	ble.n	2fc2 <_read+0x36>
    2f9e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2fa0:	4e09      	ldr	r6, [pc, #36]	; (2fc8 <_read+0x3c>)
    2fa2:	4d0a      	ldr	r5, [pc, #40]	; (2fcc <_read+0x40>)
    2fa4:	6830      	ldr	r0, [r6, #0]
    2fa6:	0021      	movs	r1, r4
    2fa8:	682b      	ldr	r3, [r5, #0]
    2faa:	4798      	blx	r3
		ptr++;
    2fac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2fae:	42bc      	cmp	r4, r7
    2fb0:	d1f8      	bne.n	2fa4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2fb2:	4640      	mov	r0, r8
    2fb4:	bc04      	pop	{r2}
    2fb6:	4690      	mov	r8, r2
    2fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2fba:	2301      	movs	r3, #1
    2fbc:	425b      	negs	r3, r3
    2fbe:	4698      	mov	r8, r3
    2fc0:	e7f7      	b.n	2fb2 <_read+0x26>
	for (; len > 0; --len) {
    2fc2:	4680      	mov	r8, r0
    2fc4:	e7f5      	b.n	2fb2 <_read+0x26>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	200002ac 	.word	0x200002ac
    2fcc:	200002a4 	.word	0x200002a4

00002fd0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	46c6      	mov	lr, r8
    2fd4:	b500      	push	{lr}
    2fd6:	000e      	movs	r6, r1
    2fd8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2fda:	3801      	subs	r0, #1
    2fdc:	2802      	cmp	r0, #2
    2fde:	d810      	bhi.n	3002 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	d011      	beq.n	3008 <_write+0x38>
    2fe4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2fe6:	4b0c      	ldr	r3, [pc, #48]	; (3018 <_write+0x48>)
    2fe8:	4698      	mov	r8, r3
    2fea:	4f0c      	ldr	r7, [pc, #48]	; (301c <_write+0x4c>)
    2fec:	4643      	mov	r3, r8
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	5d31      	ldrb	r1, [r6, r4]
    2ff2:	683b      	ldr	r3, [r7, #0]
    2ff4:	4798      	blx	r3
    2ff6:	2800      	cmp	r0, #0
    2ff8:	db08      	blt.n	300c <_write+0x3c>
			return -1;
		}
		++nChars;
    2ffa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2ffc:	42a5      	cmp	r5, r4
    2ffe:	d1f5      	bne.n	2fec <_write+0x1c>
    3000:	e006      	b.n	3010 <_write+0x40>
		return -1;
    3002:	2401      	movs	r4, #1
    3004:	4264      	negs	r4, r4
    3006:	e003      	b.n	3010 <_write+0x40>
	for (; len != 0; --len) {
    3008:	0014      	movs	r4, r2
    300a:	e001      	b.n	3010 <_write+0x40>
			return -1;
    300c:	2401      	movs	r4, #1
    300e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3010:	0020      	movs	r0, r4
    3012:	bc04      	pop	{r2}
    3014:	4690      	mov	r8, r2
    3016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3018:	200002ac 	.word	0x200002ac
    301c:	200002a8 	.word	0x200002a8

00003020 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3020:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3022:	4a06      	ldr	r2, [pc, #24]	; (303c <_sbrk+0x1c>)
    3024:	6812      	ldr	r2, [r2, #0]
    3026:	2a00      	cmp	r2, #0
    3028:	d004      	beq.n	3034 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    302a:	4a04      	ldr	r2, [pc, #16]	; (303c <_sbrk+0x1c>)
    302c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    302e:	18c3      	adds	r3, r0, r3
    3030:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3032:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3034:	4902      	ldr	r1, [pc, #8]	; (3040 <_sbrk+0x20>)
    3036:	4a01      	ldr	r2, [pc, #4]	; (303c <_sbrk+0x1c>)
    3038:	6011      	str	r1, [r2, #0]
    303a:	e7f6      	b.n	302a <_sbrk+0xa>
    303c:	20000198 	.word	0x20000198
    3040:	20002300 	.word	0x20002300

00003044 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3044:	2001      	movs	r0, #1
    3046:	4240      	negs	r0, r0
    3048:	4770      	bx	lr

0000304a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    304a:	2380      	movs	r3, #128	; 0x80
    304c:	019b      	lsls	r3, r3, #6
    304e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3050:	2000      	movs	r0, #0
    3052:	4770      	bx	lr

00003054 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3054:	2001      	movs	r0, #1
    3056:	4770      	bx	lr

00003058 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3058:	2000      	movs	r0, #0
    305a:	4770      	bx	lr

0000305c <LerSensor>:

/*!
 \fn LerSensor()
 \brief Funcao que le o valor do sensor. Se houver uma diferenca superior a 200 entre a leitura atual e a ultima leitura armazenada, altera a variavel referente ao estado da maquina de estados. Caso contrario, permanece nesse estado.
*/
void LerSensor(){
    305c:	b510      	push	{r4, lr}
	sm.valorAtual = read();
    305e:	4b08      	ldr	r3, [pc, #32]	; (3080 <LerSensor+0x24>)
    3060:	4798      	blx	r3
    3062:	4b08      	ldr	r3, [pc, #32]	; (3084 <LerSensor+0x28>)
    3064:	6098      	str	r0, [r3, #8]
	//printf("Valores: atual: %d e anterior %d\n", sm.valorAtual, sm.valorAnterior);
	if(abs(sm.valorAtual - sm.valorAnterior)>200){
    3066:	685b      	ldr	r3, [r3, #4]
    3068:	1ac3      	subs	r3, r0, r3
    306a:	17da      	asrs	r2, r3, #31
    306c:	189b      	adds	r3, r3, r2
    306e:	4053      	eors	r3, r2
    3070:	2bc8      	cmp	r3, #200	; 0xc8
    3072:	dd03      	ble.n	307c <LerSensor+0x20>
		sm.state = STPWM;
    3074:	4b03      	ldr	r3, [pc, #12]	; (3084 <LerSensor+0x28>)
    3076:	2201      	movs	r2, #1
    3078:	701a      	strb	r2, [r3, #0]
		sm.valorAnterior = sm.valorAtual;
    307a:	6058      	str	r0, [r3, #4]
	}
}
    307c:	bd10      	pop	{r4, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	000001a9 	.word	0x000001a9
    3084:	200002bc 	.word	0x200002bc

00003088 <SetPWM>:
/** 
* \fn SetPWM()
* \brief Funcao que atualiza a luminosidade do LED. Isso ocorre alterando o duty-cicle do PWM, cujo valor maximo e 4096 que equivale ao LED totalmente apagado. Feito isso, altera a variavel referente ao estado da maquina de estados
*/
void SetPWM()
{
    3088:	b510      	push	{r4, lr}
	set_pwm_compare_value(sm.valorAtual);
    308a:	4c03      	ldr	r4, [pc, #12]	; (3098 <SetPWM+0x10>)
    308c:	68a0      	ldr	r0, [r4, #8]
    308e:	4b03      	ldr	r3, [pc, #12]	; (309c <SetPWM+0x14>)
    3090:	4798      	blx	r3
	sm.state = STGravar;
    3092:	2302      	movs	r3, #2
    3094:	7023      	strb	r3, [r4, #0]
}
    3096:	bd10      	pop	{r4, pc}
    3098:	200002bc 	.word	0x200002bc
    309c:	00000391 	.word	0x00000391

000030a0 <Gravar>:
/** 
* \fn Gravar()
* /brief Funcao que armazena o novo percentual de luminosidade do LED e a duracao em minutos do percentual anterior. Caso o indice for 11 os dados dos vetores PWM e TEMPO sao combinados e gravados na memoria EEPROM. A penultima posicao do vetor PWM e realocada para a primeira posicao do vetor, pois ainda nao ha informacao de tempo disponivel referente ao valor de PWM setado. Feito isso, altera a variavel referente ao estado da maquina de estados
*/
void Gravar()
{	
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	b087      	sub	sp, #28
	float pwmPercentual = (100 - sm.valorAtual * 0.0244140625);   /* converte a acao de controle em percentual */
	sm.PWM[sm.indice] = (int)pwmPercentual;   /* grava no vetor PWM a acao de controle em percentual */
    30a4:	4c26      	ldr	r4, [pc, #152]	; (3140 <Gravar+0xa0>)
    30a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30a8:	18e5      	adds	r5, r4, r3
	float pwmPercentual = (100 - sm.valorAtual * 0.0244140625);   /* converte a acao de controle em percentual */
    30aa:	68a0      	ldr	r0, [r4, #8]
    30ac:	4b25      	ldr	r3, [pc, #148]	; (3144 <Gravar+0xa4>)
    30ae:	4798      	blx	r3
    30b0:	2200      	movs	r2, #0
    30b2:	4b25      	ldr	r3, [pc, #148]	; (3148 <Gravar+0xa8>)
    30b4:	4e25      	ldr	r6, [pc, #148]	; (314c <Gravar+0xac>)
    30b6:	47b0      	blx	r6
    30b8:	0002      	movs	r2, r0
    30ba:	000b      	movs	r3, r1
    30bc:	2000      	movs	r0, #0
    30be:	4924      	ldr	r1, [pc, #144]	; (3150 <Gravar+0xb0>)
    30c0:	4e24      	ldr	r6, [pc, #144]	; (3154 <Gravar+0xb4>)
    30c2:	47b0      	blx	r6
    30c4:	4b24      	ldr	r3, [pc, #144]	; (3158 <Gravar+0xb8>)
    30c6:	4798      	blx	r3
	sm.PWM[sm.indice] = (int)pwmPercentual;   /* grava no vetor PWM a acao de controle em percentual */
    30c8:	4b24      	ldr	r3, [pc, #144]	; (315c <Gravar+0xbc>)
    30ca:	4798      	blx	r3
    30cc:	7328      	strb	r0, [r5, #12]
	int tempoMinutos = (sm.incremento*1250000 + getTime())/7500000; /* por simplificacao, adota-se o tempo em minutos */
    30ce:	4d24      	ldr	r5, [pc, #144]	; (3160 <Gravar+0xc0>)
    30d0:	47a8      	blx	r5
	int tempoSegundos = (sm.incremento*1250000 + getTime())/125000; /* por simplificacao, adota-se o tempo em segundos */
    30d2:	4e24      	ldr	r6, [pc, #144]	; (3164 <Gravar+0xc4>)
    30d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30d6:	435e      	muls	r6, r3
    30d8:	47a8      	blx	r5
	sm.TEMPO[sm.indice-1] = (int)tempoSegundos;   /* armazena o tempo calculado no vetor tempo */
    30da:	6a65      	ldr	r5, [r4, #36]	; 0x24
    30dc:	1967      	adds	r7, r4, r5
	int tempoSegundos = (sm.incremento*1250000 + getTime())/125000; /* por simplificacao, adota-se o tempo em segundos */
    30de:	1980      	adds	r0, r0, r6
    30e0:	4921      	ldr	r1, [pc, #132]	; (3168 <Gravar+0xc8>)
    30e2:	4b22      	ldr	r3, [pc, #136]	; (316c <Gravar+0xcc>)
    30e4:	4798      	blx	r3
	sm.TEMPO[sm.indice-1] = (int)tempoSegundos;   /* armazena o tempo calculado no vetor tempo */
    30e6:	75b8      	strb	r0, [r7, #22]
	sm.indice ++;	/* incrementa o indice */
    30e8:	3501      	adds	r5, #1
    30ea:	6265      	str	r5, [r4, #36]	; 0x24
	if (sm.indice == 11)
    30ec:	2d0b      	cmp	r5, #11
    30ee:	d004      	beq.n	30fa <Gravar+0x5a>
		write_eeprom(&gravarEeprom, 18);
				
		sm.PWM[0] = sm.PWM[9];
		sm.indice = 1;	 
	}
	sm.state = STTimer;
    30f0:	2203      	movs	r2, #3
    30f2:	4b13      	ldr	r3, [pc, #76]	; (3140 <Gravar+0xa0>)
    30f4:	701a      	strb	r2, [r3, #0]
}
    30f6:	b007      	add	sp, #28
    30f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30fa:	2200      	movs	r2, #0
			gravarEeprom[v1] = sm.PWM[(v1/2)];
    30fc:	a801      	add	r0, sp, #4
    30fe:	4910      	ldr	r1, [pc, #64]	; (3140 <Gravar+0xa0>)
    3100:	0fd3      	lsrs	r3, r2, #31
    3102:	189b      	adds	r3, r3, r2
    3104:	105b      	asrs	r3, r3, #1
    3106:	18cb      	adds	r3, r1, r3
    3108:	7b1b      	ldrb	r3, [r3, #12]
    310a:	5413      	strb	r3, [r2, r0]
		for (int v1 = 0; v1<18; v1+=2)
    310c:	3202      	adds	r2, #2
    310e:	2a12      	cmp	r2, #18
    3110:	d1f6      	bne.n	3100 <Gravar+0x60>
    3112:	2200      	movs	r2, #0
			gravarEeprom[v2] = sm.TEMPO[((v2-1)/2)];
    3114:	480a      	ldr	r0, [pc, #40]	; (3140 <Gravar+0xa0>)
    3116:	ab01      	add	r3, sp, #4
    3118:	1899      	adds	r1, r3, r2
    311a:	0fd3      	lsrs	r3, r2, #31
    311c:	189b      	adds	r3, r3, r2
    311e:	105b      	asrs	r3, r3, #1
    3120:	18c3      	adds	r3, r0, r3
    3122:	7ddb      	ldrb	r3, [r3, #23]
    3124:	704b      	strb	r3, [r1, #1]
    3126:	3202      	adds	r2, #2
		for (int v2 = 1; v2<19; v2+=2)
    3128:	2a12      	cmp	r2, #18
    312a:	d1f4      	bne.n	3116 <Gravar+0x76>
		write_eeprom(&gravarEeprom, 18);
    312c:	2112      	movs	r1, #18
    312e:	a801      	add	r0, sp, #4
    3130:	4b0f      	ldr	r3, [pc, #60]	; (3170 <Gravar+0xd0>)
    3132:	4798      	blx	r3
		sm.PWM[0] = sm.PWM[9];
    3134:	4b02      	ldr	r3, [pc, #8]	; (3140 <Gravar+0xa0>)
    3136:	7d5a      	ldrb	r2, [r3, #21]
    3138:	731a      	strb	r2, [r3, #12]
		sm.indice = 1;	 
    313a:	2201      	movs	r2, #1
    313c:	625a      	str	r2, [r3, #36]	; 0x24
    313e:	e7d7      	b.n	30f0 <Gravar+0x50>
    3140:	200002bc 	.word	0x200002bc
    3144:	00004009 	.word	0x00004009
    3148:	3f990000 	.word	0x3f990000
    314c:	000034dd 	.word	0x000034dd
    3150:	40590000 	.word	0x40590000
    3154:	000039dd 	.word	0x000039dd
    3158:	00004079 	.word	0x00004079
    315c:	0000349d 	.word	0x0000349d
    3160:	00000425 	.word	0x00000425
    3164:	001312d0 	.word	0x001312d0
    3168:	0001e848 	.word	0x0001e848
    316c:	00003331 	.word	0x00003331
    3170:	0000029d 	.word	0x0000029d

00003174 <Timer>:
/**
* \fn Timer()
* \brief Funcao que reinicia o temporizador. Feito isso, altera a variavel referente ao estado da maquina de estados
*/
void Timer()
{
    3174:	b510      	push	{r4, lr}
	setTime(0);
    3176:	2000      	movs	r0, #0
    3178:	4b03      	ldr	r3, [pc, #12]	; (3188 <Timer+0x14>)
    317a:	4798      	blx	r3
	sm.incremento = 0;
    317c:	4b03      	ldr	r3, [pc, #12]	; (318c <Timer+0x18>)
    317e:	2200      	movs	r2, #0
    3180:	629a      	str	r2, [r3, #40]	; 0x28
	sm.state = STLerSensor;
    3182:	701a      	strb	r2, [r3, #0]
}
    3184:	bd10      	pop	{r4, pc}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	00000439 	.word	0x00000439
    318c:	200002bc 	.word	0x200002bc

00003190 <tcc_callback_timer>:
	sm.incremento ++;
    3190:	4a02      	ldr	r2, [pc, #8]	; (319c <tcc_callback_timer+0xc>)
    3192:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3194:	3301      	adds	r3, #1
    3196:	6293      	str	r3, [r2, #40]	; 0x28
}
    3198:	4770      	bx	lr
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	200002bc 	.word	0x200002bc

000031a0 <EnviarDados>:
{
    31a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	resultado = read_eeprom();  /* Recebe os dados gravados na memoria EEPROM */
    31a2:	4b18      	ldr	r3, [pc, #96]	; (3204 <EnviarDados+0x64>)
    31a4:	4798      	blx	r3
    31a6:	0007      	movs	r7, r0
	uint16_t offset = get_offset(); /* Recebe a quantidade de dados gravados na memoria */
    31a8:	4b17      	ldr	r3, [pc, #92]	; (3208 <EnviarDados+0x68>)
    31aa:	4798      	blx	r3
    31ac:	0005      	movs	r5, r0
	printf("Dados lidos:\n");  /* Mensagem que caracteriza o inicio da transmissao */
    31ae:	4817      	ldr	r0, [pc, #92]	; (320c <EnviarDados+0x6c>)
    31b0:	4b17      	ldr	r3, [pc, #92]	; (3210 <EnviarDados+0x70>)
    31b2:	4798      	blx	r3
	for (int a = 0; a<= offset-1; a++)
    31b4:	3d01      	subs	r5, #1
    31b6:	d407      	bmi.n	31c8 <EnviarDados+0x28>
    31b8:	2400      	movs	r4, #0
		printf("%d\n", resultado[a]);
    31ba:	4e16      	ldr	r6, [pc, #88]	; (3214 <EnviarDados+0x74>)
    31bc:	5d39      	ldrb	r1, [r7, r4]
    31be:	4816      	ldr	r0, [pc, #88]	; (3218 <EnviarDados+0x78>)
    31c0:	47b0      	blx	r6
	for (int a = 0; a<= offset-1; a++)
    31c2:	3401      	adds	r4, #1
    31c4:	42ac      	cmp	r4, r5
    31c6:	ddf9      	ble.n	31bc <EnviarDados+0x1c>
	if (sm.indice != 1)
    31c8:	4b14      	ldr	r3, [pc, #80]	; (321c <EnviarDados+0x7c>)
    31ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31cc:	2b01      	cmp	r3, #1
    31ce:	d015      	beq.n	31fc <EnviarDados+0x5c>
    31d0:	4c13      	ldr	r4, [pc, #76]	; (3220 <EnviarDados+0x80>)
    31d2:	2500      	movs	r5, #0
			printf("%d\n", sm.PWM[b]);
    31d4:	4f0f      	ldr	r7, [pc, #60]	; (3214 <EnviarDados+0x74>)
		for (int b = 0; b<= sm.indice-2; b++)
    31d6:	4e11      	ldr	r6, [pc, #68]	; (321c <EnviarDados+0x7c>)
			printf("%d\n", sm.PWM[b]);
    31d8:	7821      	ldrb	r1, [r4, #0]
    31da:	480f      	ldr	r0, [pc, #60]	; (3218 <EnviarDados+0x78>)
    31dc:	47b8      	blx	r7
			printf("%d\n", sm.TEMPO[b]);
    31de:	7ae1      	ldrb	r1, [r4, #11]
    31e0:	480d      	ldr	r0, [pc, #52]	; (3218 <EnviarDados+0x78>)
    31e2:	47b8      	blx	r7
		for (int b = 0; b<= sm.indice-2; b++)
    31e4:	3501      	adds	r5, #1
    31e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    31e8:	3401      	adds	r4, #1
    31ea:	1e9a      	subs	r2, r3, #2
    31ec:	42aa      	cmp	r2, r5
    31ee:	d2f3      	bcs.n	31d8 <EnviarDados+0x38>
		sm.PWM[0] = sm.PWM[sm.indice-1];  /* Realoca a ultima posicao do vetor PWM como sendo a primeira */
    31f0:	4a0a      	ldr	r2, [pc, #40]	; (321c <EnviarDados+0x7c>)
    31f2:	18d3      	adds	r3, r2, r3
    31f4:	7adb      	ldrb	r3, [r3, #11]
    31f6:	7313      	strb	r3, [r2, #12]
		sm.indice = 1;   /* Reinicia o indice */
    31f8:	2301      	movs	r3, #1
    31fa:	6253      	str	r3, [r2, #36]	; 0x24
	printf("fim");    /* Mensagem que caracteriza o fim da transmissao */
    31fc:	4809      	ldr	r0, [pc, #36]	; (3224 <EnviarDados+0x84>)
    31fe:	4b05      	ldr	r3, [pc, #20]	; (3214 <EnviarDados+0x74>)
    3200:	4798      	blx	r3
}
    3202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3204:	000002e5 	.word	0x000002e5
    3208:	0000031d 	.word	0x0000031d
    320c:	000055f4 	.word	0x000055f4
    3210:	0000448d 	.word	0x0000448d
    3214:	00004399 	.word	0x00004399
    3218:	00005604 	.word	0x00005604
    321c:	200002bc 	.word	0x200002bc
    3220:	200002c8 	.word	0x200002c8
    3224:	00005608 	.word	0x00005608

00003228 <usart_read_callback>:
{
    3228:	b570      	push	{r4, r5, r6, lr}
	if(strcmp(rx_buffer, "envie") == 0)
    322a:	4907      	ldr	r1, [pc, #28]	; (3248 <usart_read_callback+0x20>)
    322c:	4807      	ldr	r0, [pc, #28]	; (324c <usart_read_callback+0x24>)
    322e:	4b08      	ldr	r3, [pc, #32]	; (3250 <usart_read_callback+0x28>)
    3230:	4798      	blx	r3
    3232:	2800      	cmp	r0, #0
    3234:	d000      	beq.n	3238 <usart_read_callback+0x10>
}
    3236:	bd70      	pop	{r4, r5, r6, pc}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3238:	4c06      	ldr	r4, [pc, #24]	; (3254 <usart_read_callback+0x2c>)
    323a:	2580      	movs	r5, #128	; 0x80
    323c:	05ed      	lsls	r5, r5, #23
    323e:	6165      	str	r5, [r4, #20]
		EnviarDados();
    3240:	4b05      	ldr	r3, [pc, #20]	; (3258 <usart_read_callback+0x30>)
    3242:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3244:	61a5      	str	r5, [r4, #24]
}
    3246:	e7f6      	b.n	3236 <usart_read_callback+0xe>
    3248:	0000560c 	.word	0x0000560c
    324c:	200002b0 	.word	0x200002b0
    3250:	00004631 	.word	0x00004631
    3254:	41004480 	.word	0x41004480
    3258:	000031a1 	.word	0x000031a1

0000325c <initSM>:
* \fn initSM()
* \brief Funcao que inicializa as variaveis da maquina de estados e referencia cada estado a sua funcao especifica
*/
void initSM()
{
	sm.state = STLerSensor;
    325c:	4b09      	ldr	r3, [pc, #36]	; (3284 <initSM+0x28>)
    325e:	2200      	movs	r2, #0
    3260:	701a      	strb	r2, [r3, #0]
	sm.indice = 1;
    3262:	2101      	movs	r1, #1
    3264:	6259      	str	r1, [r3, #36]	; 0x24
	sm.incremento = 0;
    3266:	629a      	str	r2, [r3, #40]	; 0x28
	sm.valorAnterior = 0;
    3268:	605a      	str	r2, [r3, #4]
	sm.valorAtual = 0;
    326a:	609a      	str	r2, [r3, #8]
	sm.PWM[0] = 0;
    326c:	731a      	strb	r2, [r3, #12]
	sm.TEMPO[0] = 0;
    326e:	75da      	strb	r2, [r3, #23]
	sm.action[STLerSensor] = LerSensor;
    3270:	4a05      	ldr	r2, [pc, #20]	; (3288 <initSM+0x2c>)
    3272:	62da      	str	r2, [r3, #44]	; 0x2c
	sm.action[STGravar] = Gravar;
    3274:	4a05      	ldr	r2, [pc, #20]	; (328c <initSM+0x30>)
    3276:	635a      	str	r2, [r3, #52]	; 0x34
	sm.action[STPWM] = SetPWM;
    3278:	4a05      	ldr	r2, [pc, #20]	; (3290 <initSM+0x34>)
    327a:	631a      	str	r2, [r3, #48]	; 0x30
	sm.action[STTimer] = Timer;	
    327c:	4a05      	ldr	r2, [pc, #20]	; (3294 <initSM+0x38>)
    327e:	639a      	str	r2, [r3, #56]	; 0x38
}
    3280:	4770      	bx	lr
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	200002bc 	.word	0x200002bc
    3288:	0000305d 	.word	0x0000305d
    328c:	000030a1 	.word	0x000030a1
    3290:	00003089 	.word	0x00003089
    3294:	00003175 	.word	0x00003175

00003298 <main>:
/** 
* \fn main(void)
* \brief Funcao principal do sistema. Inicializa e configura os drivers e chama, dentro de um loop infinito, a funcao da maquina de estados a ser executada 
*/
int main(void)
{
    3298:	b570      	push	{r4, r5, r6, lr}
	/* Configuracoes iniciais do sistema */
	system_init();
    329a:	4b16      	ldr	r3, [pc, #88]	; (32f4 <main+0x5c>)
    329c:	4798      	blx	r3
	instancia_usart = usartConfig();   /* inicializa a USART e retorna a instancia da mesma */
    329e:	4b16      	ldr	r3, [pc, #88]	; (32f8 <main+0x60>)
    32a0:	4798      	blx	r3
    32a2:	4b16      	ldr	r3, [pc, #88]	; (32fc <main+0x64>)
    32a4:	6018      	str	r0, [r3, #0]
	configure_usart_callbacks();
    32a6:	4b16      	ldr	r3, [pc, #88]	; (3300 <main+0x68>)
    32a8:	4798      	blx	r3
	configure_tcc();
    32aa:	4b16      	ldr	r3, [pc, #88]	; (3304 <main+0x6c>)
    32ac:	4798      	blx	r3
	configure_tcc_callbacks();
    32ae:	4b16      	ldr	r3, [pc, #88]	; (3308 <main+0x70>)
    32b0:	4798      	blx	r3
	adcConfig();
    32b2:	4b16      	ldr	r3, [pc, #88]	; (330c <main+0x74>)
    32b4:	4798      	blx	r3
	configure_pwm();
    32b6:	4b16      	ldr	r3, [pc, #88]	; (3310 <main+0x78>)
    32b8:	4798      	blx	r3
	configure_eeprom();
    32ba:	4b16      	ldr	r3, [pc, #88]	; (3314 <main+0x7c>)
    32bc:	4798      	blx	r3
	configure_bod();
    32be:	4b16      	ldr	r3, [pc, #88]	; (3318 <main+0x80>)
    32c0:	4798      	blx	r3
 
	initSM();
    32c2:	4b16      	ldr	r3, [pc, #88]	; (331c <main+0x84>)
    32c4:	4798      	blx	r3
	cpu_irq_enable();
    32c6:	2201      	movs	r2, #1
    32c8:	4b15      	ldr	r3, [pc, #84]	; (3320 <main+0x88>)
    32ca:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    32cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    32d0:	b662      	cpsie	i
	// Fim das configuracoes iniciais
	
    // Loop principal
	while (true) 
	{
		sm.action[sm.state](0); /* chama a funcao da maquina de estados que esta na vez */
    32d2:	4d14      	ldr	r5, [pc, #80]	; (3324 <main+0x8c>)
		usart_read_buffer_job(instancia_usart, (uint8_t *)rx_buffer, 5);   /* le a porta serial */
    32d4:	4c14      	ldr	r4, [pc, #80]	; (3328 <main+0x90>)
    32d6:	4e09      	ldr	r6, [pc, #36]	; (32fc <main+0x64>)
		sm.action[sm.state](0); /* chama a funcao da maquina de estados que esta na vez */
    32d8:	782b      	ldrb	r3, [r5, #0]
    32da:	330a      	adds	r3, #10
    32dc:	009b      	lsls	r3, r3, #2
    32de:	18eb      	adds	r3, r5, r3
    32e0:	685b      	ldr	r3, [r3, #4]
    32e2:	2000      	movs	r0, #0
    32e4:	4798      	blx	r3
		usart_read_buffer_job(instancia_usart, (uint8_t *)rx_buffer, 5);   /* le a porta serial */
    32e6:	2205      	movs	r2, #5
    32e8:	0021      	movs	r1, r4
    32ea:	6830      	ldr	r0, [r6, #0]
    32ec:	4b0f      	ldr	r3, [pc, #60]	; (332c <main+0x94>)
    32ee:	4798      	blx	r3
    32f0:	e7f2      	b.n	32d8 <main+0x40>
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	00001fe1 	.word	0x00001fe1
    32f8:	00000491 	.word	0x00000491
    32fc:	200002b8 	.word	0x200002b8
    3300:	00000599 	.word	0x00000599
    3304:	000003a9 	.word	0x000003a9
    3308:	000003fd 	.word	0x000003fd
    330c:	00000115 	.word	0x00000115
    3310:	00000335 	.word	0x00000335
    3314:	0000020d 	.word	0x0000020d
    3318:	00000255 	.word	0x00000255
    331c:	0000325d 	.word	0x0000325d
    3320:	20000000 	.word	0x20000000
    3324:	200002bc 	.word	0x200002bc
    3328:	200002b0 	.word	0x200002b0
    332c:	000017ad 	.word	0x000017ad

00003330 <__udivsi3>:
    3330:	2200      	movs	r2, #0
    3332:	0843      	lsrs	r3, r0, #1
    3334:	428b      	cmp	r3, r1
    3336:	d374      	bcc.n	3422 <__udivsi3+0xf2>
    3338:	0903      	lsrs	r3, r0, #4
    333a:	428b      	cmp	r3, r1
    333c:	d35f      	bcc.n	33fe <__udivsi3+0xce>
    333e:	0a03      	lsrs	r3, r0, #8
    3340:	428b      	cmp	r3, r1
    3342:	d344      	bcc.n	33ce <__udivsi3+0x9e>
    3344:	0b03      	lsrs	r3, r0, #12
    3346:	428b      	cmp	r3, r1
    3348:	d328      	bcc.n	339c <__udivsi3+0x6c>
    334a:	0c03      	lsrs	r3, r0, #16
    334c:	428b      	cmp	r3, r1
    334e:	d30d      	bcc.n	336c <__udivsi3+0x3c>
    3350:	22ff      	movs	r2, #255	; 0xff
    3352:	0209      	lsls	r1, r1, #8
    3354:	ba12      	rev	r2, r2
    3356:	0c03      	lsrs	r3, r0, #16
    3358:	428b      	cmp	r3, r1
    335a:	d302      	bcc.n	3362 <__udivsi3+0x32>
    335c:	1212      	asrs	r2, r2, #8
    335e:	0209      	lsls	r1, r1, #8
    3360:	d065      	beq.n	342e <__udivsi3+0xfe>
    3362:	0b03      	lsrs	r3, r0, #12
    3364:	428b      	cmp	r3, r1
    3366:	d319      	bcc.n	339c <__udivsi3+0x6c>
    3368:	e000      	b.n	336c <__udivsi3+0x3c>
    336a:	0a09      	lsrs	r1, r1, #8
    336c:	0bc3      	lsrs	r3, r0, #15
    336e:	428b      	cmp	r3, r1
    3370:	d301      	bcc.n	3376 <__udivsi3+0x46>
    3372:	03cb      	lsls	r3, r1, #15
    3374:	1ac0      	subs	r0, r0, r3
    3376:	4152      	adcs	r2, r2
    3378:	0b83      	lsrs	r3, r0, #14
    337a:	428b      	cmp	r3, r1
    337c:	d301      	bcc.n	3382 <__udivsi3+0x52>
    337e:	038b      	lsls	r3, r1, #14
    3380:	1ac0      	subs	r0, r0, r3
    3382:	4152      	adcs	r2, r2
    3384:	0b43      	lsrs	r3, r0, #13
    3386:	428b      	cmp	r3, r1
    3388:	d301      	bcc.n	338e <__udivsi3+0x5e>
    338a:	034b      	lsls	r3, r1, #13
    338c:	1ac0      	subs	r0, r0, r3
    338e:	4152      	adcs	r2, r2
    3390:	0b03      	lsrs	r3, r0, #12
    3392:	428b      	cmp	r3, r1
    3394:	d301      	bcc.n	339a <__udivsi3+0x6a>
    3396:	030b      	lsls	r3, r1, #12
    3398:	1ac0      	subs	r0, r0, r3
    339a:	4152      	adcs	r2, r2
    339c:	0ac3      	lsrs	r3, r0, #11
    339e:	428b      	cmp	r3, r1
    33a0:	d301      	bcc.n	33a6 <__udivsi3+0x76>
    33a2:	02cb      	lsls	r3, r1, #11
    33a4:	1ac0      	subs	r0, r0, r3
    33a6:	4152      	adcs	r2, r2
    33a8:	0a83      	lsrs	r3, r0, #10
    33aa:	428b      	cmp	r3, r1
    33ac:	d301      	bcc.n	33b2 <__udivsi3+0x82>
    33ae:	028b      	lsls	r3, r1, #10
    33b0:	1ac0      	subs	r0, r0, r3
    33b2:	4152      	adcs	r2, r2
    33b4:	0a43      	lsrs	r3, r0, #9
    33b6:	428b      	cmp	r3, r1
    33b8:	d301      	bcc.n	33be <__udivsi3+0x8e>
    33ba:	024b      	lsls	r3, r1, #9
    33bc:	1ac0      	subs	r0, r0, r3
    33be:	4152      	adcs	r2, r2
    33c0:	0a03      	lsrs	r3, r0, #8
    33c2:	428b      	cmp	r3, r1
    33c4:	d301      	bcc.n	33ca <__udivsi3+0x9a>
    33c6:	020b      	lsls	r3, r1, #8
    33c8:	1ac0      	subs	r0, r0, r3
    33ca:	4152      	adcs	r2, r2
    33cc:	d2cd      	bcs.n	336a <__udivsi3+0x3a>
    33ce:	09c3      	lsrs	r3, r0, #7
    33d0:	428b      	cmp	r3, r1
    33d2:	d301      	bcc.n	33d8 <__udivsi3+0xa8>
    33d4:	01cb      	lsls	r3, r1, #7
    33d6:	1ac0      	subs	r0, r0, r3
    33d8:	4152      	adcs	r2, r2
    33da:	0983      	lsrs	r3, r0, #6
    33dc:	428b      	cmp	r3, r1
    33de:	d301      	bcc.n	33e4 <__udivsi3+0xb4>
    33e0:	018b      	lsls	r3, r1, #6
    33e2:	1ac0      	subs	r0, r0, r3
    33e4:	4152      	adcs	r2, r2
    33e6:	0943      	lsrs	r3, r0, #5
    33e8:	428b      	cmp	r3, r1
    33ea:	d301      	bcc.n	33f0 <__udivsi3+0xc0>
    33ec:	014b      	lsls	r3, r1, #5
    33ee:	1ac0      	subs	r0, r0, r3
    33f0:	4152      	adcs	r2, r2
    33f2:	0903      	lsrs	r3, r0, #4
    33f4:	428b      	cmp	r3, r1
    33f6:	d301      	bcc.n	33fc <__udivsi3+0xcc>
    33f8:	010b      	lsls	r3, r1, #4
    33fa:	1ac0      	subs	r0, r0, r3
    33fc:	4152      	adcs	r2, r2
    33fe:	08c3      	lsrs	r3, r0, #3
    3400:	428b      	cmp	r3, r1
    3402:	d301      	bcc.n	3408 <__udivsi3+0xd8>
    3404:	00cb      	lsls	r3, r1, #3
    3406:	1ac0      	subs	r0, r0, r3
    3408:	4152      	adcs	r2, r2
    340a:	0883      	lsrs	r3, r0, #2
    340c:	428b      	cmp	r3, r1
    340e:	d301      	bcc.n	3414 <__udivsi3+0xe4>
    3410:	008b      	lsls	r3, r1, #2
    3412:	1ac0      	subs	r0, r0, r3
    3414:	4152      	adcs	r2, r2
    3416:	0843      	lsrs	r3, r0, #1
    3418:	428b      	cmp	r3, r1
    341a:	d301      	bcc.n	3420 <__udivsi3+0xf0>
    341c:	004b      	lsls	r3, r1, #1
    341e:	1ac0      	subs	r0, r0, r3
    3420:	4152      	adcs	r2, r2
    3422:	1a41      	subs	r1, r0, r1
    3424:	d200      	bcs.n	3428 <__udivsi3+0xf8>
    3426:	4601      	mov	r1, r0
    3428:	4152      	adcs	r2, r2
    342a:	4610      	mov	r0, r2
    342c:	4770      	bx	lr
    342e:	e7ff      	b.n	3430 <__udivsi3+0x100>
    3430:	b501      	push	{r0, lr}
    3432:	2000      	movs	r0, #0
    3434:	f000 f806 	bl	3444 <__aeabi_idiv0>
    3438:	bd02      	pop	{r1, pc}
    343a:	46c0      	nop			; (mov r8, r8)

0000343c <__aeabi_uidivmod>:
    343c:	2900      	cmp	r1, #0
    343e:	d0f7      	beq.n	3430 <__udivsi3+0x100>
    3440:	e776      	b.n	3330 <__udivsi3>
    3442:	4770      	bx	lr

00003444 <__aeabi_idiv0>:
    3444:	4770      	bx	lr
    3446:	46c0      	nop			; (mov r8, r8)

00003448 <__aeabi_lmul>:
    3448:	b5f0      	push	{r4, r5, r6, r7, lr}
    344a:	46ce      	mov	lr, r9
    344c:	4647      	mov	r7, r8
    344e:	0415      	lsls	r5, r2, #16
    3450:	0c2d      	lsrs	r5, r5, #16
    3452:	002e      	movs	r6, r5
    3454:	b580      	push	{r7, lr}
    3456:	0407      	lsls	r7, r0, #16
    3458:	0c14      	lsrs	r4, r2, #16
    345a:	0c3f      	lsrs	r7, r7, #16
    345c:	4699      	mov	r9, r3
    345e:	0c03      	lsrs	r3, r0, #16
    3460:	437e      	muls	r6, r7
    3462:	435d      	muls	r5, r3
    3464:	4367      	muls	r7, r4
    3466:	4363      	muls	r3, r4
    3468:	197f      	adds	r7, r7, r5
    346a:	0c34      	lsrs	r4, r6, #16
    346c:	19e4      	adds	r4, r4, r7
    346e:	469c      	mov	ip, r3
    3470:	42a5      	cmp	r5, r4
    3472:	d903      	bls.n	347c <__aeabi_lmul+0x34>
    3474:	2380      	movs	r3, #128	; 0x80
    3476:	025b      	lsls	r3, r3, #9
    3478:	4698      	mov	r8, r3
    347a:	44c4      	add	ip, r8
    347c:	464b      	mov	r3, r9
    347e:	4351      	muls	r1, r2
    3480:	4343      	muls	r3, r0
    3482:	0436      	lsls	r6, r6, #16
    3484:	0c36      	lsrs	r6, r6, #16
    3486:	0c25      	lsrs	r5, r4, #16
    3488:	0424      	lsls	r4, r4, #16
    348a:	4465      	add	r5, ip
    348c:	19a4      	adds	r4, r4, r6
    348e:	1859      	adds	r1, r3, r1
    3490:	1949      	adds	r1, r1, r5
    3492:	0020      	movs	r0, r4
    3494:	bc0c      	pop	{r2, r3}
    3496:	4690      	mov	r8, r2
    3498:	4699      	mov	r9, r3
    349a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000349c <__aeabi_f2iz>:
    349c:	0241      	lsls	r1, r0, #9
    349e:	0043      	lsls	r3, r0, #1
    34a0:	0fc2      	lsrs	r2, r0, #31
    34a2:	0a49      	lsrs	r1, r1, #9
    34a4:	0e1b      	lsrs	r3, r3, #24
    34a6:	2000      	movs	r0, #0
    34a8:	2b7e      	cmp	r3, #126	; 0x7e
    34aa:	dd0d      	ble.n	34c8 <__aeabi_f2iz+0x2c>
    34ac:	2b9d      	cmp	r3, #157	; 0x9d
    34ae:	dc0c      	bgt.n	34ca <__aeabi_f2iz+0x2e>
    34b0:	2080      	movs	r0, #128	; 0x80
    34b2:	0400      	lsls	r0, r0, #16
    34b4:	4301      	orrs	r1, r0
    34b6:	2b95      	cmp	r3, #149	; 0x95
    34b8:	dc0a      	bgt.n	34d0 <__aeabi_f2iz+0x34>
    34ba:	2096      	movs	r0, #150	; 0x96
    34bc:	1ac3      	subs	r3, r0, r3
    34be:	40d9      	lsrs	r1, r3
    34c0:	4248      	negs	r0, r1
    34c2:	2a00      	cmp	r2, #0
    34c4:	d100      	bne.n	34c8 <__aeabi_f2iz+0x2c>
    34c6:	0008      	movs	r0, r1
    34c8:	4770      	bx	lr
    34ca:	4b03      	ldr	r3, [pc, #12]	; (34d8 <__aeabi_f2iz+0x3c>)
    34cc:	18d0      	adds	r0, r2, r3
    34ce:	e7fb      	b.n	34c8 <__aeabi_f2iz+0x2c>
    34d0:	3b96      	subs	r3, #150	; 0x96
    34d2:	4099      	lsls	r1, r3
    34d4:	e7f4      	b.n	34c0 <__aeabi_f2iz+0x24>
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	7fffffff 	.word	0x7fffffff

000034dc <__aeabi_dmul>:
    34dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34de:	4657      	mov	r7, sl
    34e0:	4645      	mov	r5, r8
    34e2:	46de      	mov	lr, fp
    34e4:	464e      	mov	r6, r9
    34e6:	b5e0      	push	{r5, r6, r7, lr}
    34e8:	030c      	lsls	r4, r1, #12
    34ea:	4698      	mov	r8, r3
    34ec:	004e      	lsls	r6, r1, #1
    34ee:	0b23      	lsrs	r3, r4, #12
    34f0:	b087      	sub	sp, #28
    34f2:	0007      	movs	r7, r0
    34f4:	4692      	mov	sl, r2
    34f6:	469b      	mov	fp, r3
    34f8:	0d76      	lsrs	r6, r6, #21
    34fa:	0fcd      	lsrs	r5, r1, #31
    34fc:	2e00      	cmp	r6, #0
    34fe:	d06b      	beq.n	35d8 <__aeabi_dmul+0xfc>
    3500:	4b6d      	ldr	r3, [pc, #436]	; (36b8 <__aeabi_dmul+0x1dc>)
    3502:	429e      	cmp	r6, r3
    3504:	d035      	beq.n	3572 <__aeabi_dmul+0x96>
    3506:	2480      	movs	r4, #128	; 0x80
    3508:	465b      	mov	r3, fp
    350a:	0f42      	lsrs	r2, r0, #29
    350c:	0424      	lsls	r4, r4, #16
    350e:	00db      	lsls	r3, r3, #3
    3510:	4314      	orrs	r4, r2
    3512:	431c      	orrs	r4, r3
    3514:	00c3      	lsls	r3, r0, #3
    3516:	4699      	mov	r9, r3
    3518:	4b68      	ldr	r3, [pc, #416]	; (36bc <__aeabi_dmul+0x1e0>)
    351a:	46a3      	mov	fp, r4
    351c:	469c      	mov	ip, r3
    351e:	2300      	movs	r3, #0
    3520:	2700      	movs	r7, #0
    3522:	4466      	add	r6, ip
    3524:	9302      	str	r3, [sp, #8]
    3526:	4643      	mov	r3, r8
    3528:	031c      	lsls	r4, r3, #12
    352a:	005a      	lsls	r2, r3, #1
    352c:	0fdb      	lsrs	r3, r3, #31
    352e:	4650      	mov	r0, sl
    3530:	0b24      	lsrs	r4, r4, #12
    3532:	0d52      	lsrs	r2, r2, #21
    3534:	4698      	mov	r8, r3
    3536:	d100      	bne.n	353a <__aeabi_dmul+0x5e>
    3538:	e076      	b.n	3628 <__aeabi_dmul+0x14c>
    353a:	4b5f      	ldr	r3, [pc, #380]	; (36b8 <__aeabi_dmul+0x1dc>)
    353c:	429a      	cmp	r2, r3
    353e:	d06d      	beq.n	361c <__aeabi_dmul+0x140>
    3540:	2380      	movs	r3, #128	; 0x80
    3542:	0f41      	lsrs	r1, r0, #29
    3544:	041b      	lsls	r3, r3, #16
    3546:	430b      	orrs	r3, r1
    3548:	495c      	ldr	r1, [pc, #368]	; (36bc <__aeabi_dmul+0x1e0>)
    354a:	00e4      	lsls	r4, r4, #3
    354c:	468c      	mov	ip, r1
    354e:	431c      	orrs	r4, r3
    3550:	00c3      	lsls	r3, r0, #3
    3552:	2000      	movs	r0, #0
    3554:	4462      	add	r2, ip
    3556:	4641      	mov	r1, r8
    3558:	18b6      	adds	r6, r6, r2
    355a:	4069      	eors	r1, r5
    355c:	1c72      	adds	r2, r6, #1
    355e:	9101      	str	r1, [sp, #4]
    3560:	4694      	mov	ip, r2
    3562:	4307      	orrs	r7, r0
    3564:	2f0f      	cmp	r7, #15
    3566:	d900      	bls.n	356a <__aeabi_dmul+0x8e>
    3568:	e0b0      	b.n	36cc <__aeabi_dmul+0x1f0>
    356a:	4a55      	ldr	r2, [pc, #340]	; (36c0 <__aeabi_dmul+0x1e4>)
    356c:	00bf      	lsls	r7, r7, #2
    356e:	59d2      	ldr	r2, [r2, r7]
    3570:	4697      	mov	pc, r2
    3572:	465b      	mov	r3, fp
    3574:	4303      	orrs	r3, r0
    3576:	4699      	mov	r9, r3
    3578:	d000      	beq.n	357c <__aeabi_dmul+0xa0>
    357a:	e087      	b.n	368c <__aeabi_dmul+0x1b0>
    357c:	2300      	movs	r3, #0
    357e:	469b      	mov	fp, r3
    3580:	3302      	adds	r3, #2
    3582:	2708      	movs	r7, #8
    3584:	9302      	str	r3, [sp, #8]
    3586:	e7ce      	b.n	3526 <__aeabi_dmul+0x4a>
    3588:	4642      	mov	r2, r8
    358a:	9201      	str	r2, [sp, #4]
    358c:	2802      	cmp	r0, #2
    358e:	d067      	beq.n	3660 <__aeabi_dmul+0x184>
    3590:	2803      	cmp	r0, #3
    3592:	d100      	bne.n	3596 <__aeabi_dmul+0xba>
    3594:	e20e      	b.n	39b4 <__aeabi_dmul+0x4d8>
    3596:	2801      	cmp	r0, #1
    3598:	d000      	beq.n	359c <__aeabi_dmul+0xc0>
    359a:	e162      	b.n	3862 <__aeabi_dmul+0x386>
    359c:	2300      	movs	r3, #0
    359e:	2400      	movs	r4, #0
    35a0:	2200      	movs	r2, #0
    35a2:	4699      	mov	r9, r3
    35a4:	9901      	ldr	r1, [sp, #4]
    35a6:	4001      	ands	r1, r0
    35a8:	b2cd      	uxtb	r5, r1
    35aa:	2100      	movs	r1, #0
    35ac:	0312      	lsls	r2, r2, #12
    35ae:	0d0b      	lsrs	r3, r1, #20
    35b0:	0b12      	lsrs	r2, r2, #12
    35b2:	051b      	lsls	r3, r3, #20
    35b4:	4313      	orrs	r3, r2
    35b6:	4a43      	ldr	r2, [pc, #268]	; (36c4 <__aeabi_dmul+0x1e8>)
    35b8:	0524      	lsls	r4, r4, #20
    35ba:	4013      	ands	r3, r2
    35bc:	431c      	orrs	r4, r3
    35be:	0064      	lsls	r4, r4, #1
    35c0:	07ed      	lsls	r5, r5, #31
    35c2:	0864      	lsrs	r4, r4, #1
    35c4:	432c      	orrs	r4, r5
    35c6:	4648      	mov	r0, r9
    35c8:	0021      	movs	r1, r4
    35ca:	b007      	add	sp, #28
    35cc:	bc3c      	pop	{r2, r3, r4, r5}
    35ce:	4690      	mov	r8, r2
    35d0:	4699      	mov	r9, r3
    35d2:	46a2      	mov	sl, r4
    35d4:	46ab      	mov	fp, r5
    35d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35d8:	4303      	orrs	r3, r0
    35da:	4699      	mov	r9, r3
    35dc:	d04f      	beq.n	367e <__aeabi_dmul+0x1a2>
    35de:	465b      	mov	r3, fp
    35e0:	2b00      	cmp	r3, #0
    35e2:	d100      	bne.n	35e6 <__aeabi_dmul+0x10a>
    35e4:	e189      	b.n	38fa <__aeabi_dmul+0x41e>
    35e6:	4658      	mov	r0, fp
    35e8:	f000 fdd0 	bl	418c <__clzsi2>
    35ec:	0003      	movs	r3, r0
    35ee:	3b0b      	subs	r3, #11
    35f0:	2b1c      	cmp	r3, #28
    35f2:	dd00      	ble.n	35f6 <__aeabi_dmul+0x11a>
    35f4:	e17a      	b.n	38ec <__aeabi_dmul+0x410>
    35f6:	221d      	movs	r2, #29
    35f8:	1ad3      	subs	r3, r2, r3
    35fa:	003a      	movs	r2, r7
    35fc:	0001      	movs	r1, r0
    35fe:	465c      	mov	r4, fp
    3600:	40da      	lsrs	r2, r3
    3602:	3908      	subs	r1, #8
    3604:	408c      	lsls	r4, r1
    3606:	0013      	movs	r3, r2
    3608:	408f      	lsls	r7, r1
    360a:	4323      	orrs	r3, r4
    360c:	469b      	mov	fp, r3
    360e:	46b9      	mov	r9, r7
    3610:	2300      	movs	r3, #0
    3612:	4e2d      	ldr	r6, [pc, #180]	; (36c8 <__aeabi_dmul+0x1ec>)
    3614:	2700      	movs	r7, #0
    3616:	1a36      	subs	r6, r6, r0
    3618:	9302      	str	r3, [sp, #8]
    361a:	e784      	b.n	3526 <__aeabi_dmul+0x4a>
    361c:	4653      	mov	r3, sl
    361e:	4323      	orrs	r3, r4
    3620:	d12a      	bne.n	3678 <__aeabi_dmul+0x19c>
    3622:	2400      	movs	r4, #0
    3624:	2002      	movs	r0, #2
    3626:	e796      	b.n	3556 <__aeabi_dmul+0x7a>
    3628:	4653      	mov	r3, sl
    362a:	4323      	orrs	r3, r4
    362c:	d020      	beq.n	3670 <__aeabi_dmul+0x194>
    362e:	2c00      	cmp	r4, #0
    3630:	d100      	bne.n	3634 <__aeabi_dmul+0x158>
    3632:	e157      	b.n	38e4 <__aeabi_dmul+0x408>
    3634:	0020      	movs	r0, r4
    3636:	f000 fda9 	bl	418c <__clzsi2>
    363a:	0003      	movs	r3, r0
    363c:	3b0b      	subs	r3, #11
    363e:	2b1c      	cmp	r3, #28
    3640:	dd00      	ble.n	3644 <__aeabi_dmul+0x168>
    3642:	e149      	b.n	38d8 <__aeabi_dmul+0x3fc>
    3644:	211d      	movs	r1, #29
    3646:	1acb      	subs	r3, r1, r3
    3648:	4651      	mov	r1, sl
    364a:	0002      	movs	r2, r0
    364c:	40d9      	lsrs	r1, r3
    364e:	4653      	mov	r3, sl
    3650:	3a08      	subs	r2, #8
    3652:	4094      	lsls	r4, r2
    3654:	4093      	lsls	r3, r2
    3656:	430c      	orrs	r4, r1
    3658:	4a1b      	ldr	r2, [pc, #108]	; (36c8 <__aeabi_dmul+0x1ec>)
    365a:	1a12      	subs	r2, r2, r0
    365c:	2000      	movs	r0, #0
    365e:	e77a      	b.n	3556 <__aeabi_dmul+0x7a>
    3660:	2501      	movs	r5, #1
    3662:	9b01      	ldr	r3, [sp, #4]
    3664:	4c14      	ldr	r4, [pc, #80]	; (36b8 <__aeabi_dmul+0x1dc>)
    3666:	401d      	ands	r5, r3
    3668:	2300      	movs	r3, #0
    366a:	2200      	movs	r2, #0
    366c:	4699      	mov	r9, r3
    366e:	e79c      	b.n	35aa <__aeabi_dmul+0xce>
    3670:	2400      	movs	r4, #0
    3672:	2200      	movs	r2, #0
    3674:	2001      	movs	r0, #1
    3676:	e76e      	b.n	3556 <__aeabi_dmul+0x7a>
    3678:	4653      	mov	r3, sl
    367a:	2003      	movs	r0, #3
    367c:	e76b      	b.n	3556 <__aeabi_dmul+0x7a>
    367e:	2300      	movs	r3, #0
    3680:	469b      	mov	fp, r3
    3682:	3301      	adds	r3, #1
    3684:	2704      	movs	r7, #4
    3686:	2600      	movs	r6, #0
    3688:	9302      	str	r3, [sp, #8]
    368a:	e74c      	b.n	3526 <__aeabi_dmul+0x4a>
    368c:	2303      	movs	r3, #3
    368e:	4681      	mov	r9, r0
    3690:	270c      	movs	r7, #12
    3692:	9302      	str	r3, [sp, #8]
    3694:	e747      	b.n	3526 <__aeabi_dmul+0x4a>
    3696:	2280      	movs	r2, #128	; 0x80
    3698:	2300      	movs	r3, #0
    369a:	2500      	movs	r5, #0
    369c:	0312      	lsls	r2, r2, #12
    369e:	4699      	mov	r9, r3
    36a0:	4c05      	ldr	r4, [pc, #20]	; (36b8 <__aeabi_dmul+0x1dc>)
    36a2:	e782      	b.n	35aa <__aeabi_dmul+0xce>
    36a4:	465c      	mov	r4, fp
    36a6:	464b      	mov	r3, r9
    36a8:	9802      	ldr	r0, [sp, #8]
    36aa:	e76f      	b.n	358c <__aeabi_dmul+0xb0>
    36ac:	465c      	mov	r4, fp
    36ae:	464b      	mov	r3, r9
    36b0:	9501      	str	r5, [sp, #4]
    36b2:	9802      	ldr	r0, [sp, #8]
    36b4:	e76a      	b.n	358c <__aeabi_dmul+0xb0>
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	000007ff 	.word	0x000007ff
    36bc:	fffffc01 	.word	0xfffffc01
    36c0:	00005614 	.word	0x00005614
    36c4:	800fffff 	.word	0x800fffff
    36c8:	fffffc0d 	.word	0xfffffc0d
    36cc:	464a      	mov	r2, r9
    36ce:	4649      	mov	r1, r9
    36d0:	0c17      	lsrs	r7, r2, #16
    36d2:	0c1a      	lsrs	r2, r3, #16
    36d4:	041b      	lsls	r3, r3, #16
    36d6:	0c1b      	lsrs	r3, r3, #16
    36d8:	0408      	lsls	r0, r1, #16
    36da:	0019      	movs	r1, r3
    36dc:	0c00      	lsrs	r0, r0, #16
    36de:	4341      	muls	r1, r0
    36e0:	0015      	movs	r5, r2
    36e2:	4688      	mov	r8, r1
    36e4:	0019      	movs	r1, r3
    36e6:	437d      	muls	r5, r7
    36e8:	4379      	muls	r1, r7
    36ea:	9503      	str	r5, [sp, #12]
    36ec:	4689      	mov	r9, r1
    36ee:	0029      	movs	r1, r5
    36f0:	0015      	movs	r5, r2
    36f2:	4345      	muls	r5, r0
    36f4:	444d      	add	r5, r9
    36f6:	9502      	str	r5, [sp, #8]
    36f8:	4645      	mov	r5, r8
    36fa:	0c2d      	lsrs	r5, r5, #16
    36fc:	46aa      	mov	sl, r5
    36fe:	9d02      	ldr	r5, [sp, #8]
    3700:	4455      	add	r5, sl
    3702:	45a9      	cmp	r9, r5
    3704:	d906      	bls.n	3714 <__aeabi_dmul+0x238>
    3706:	468a      	mov	sl, r1
    3708:	2180      	movs	r1, #128	; 0x80
    370a:	0249      	lsls	r1, r1, #9
    370c:	4689      	mov	r9, r1
    370e:	44ca      	add	sl, r9
    3710:	4651      	mov	r1, sl
    3712:	9103      	str	r1, [sp, #12]
    3714:	0c29      	lsrs	r1, r5, #16
    3716:	9104      	str	r1, [sp, #16]
    3718:	4641      	mov	r1, r8
    371a:	0409      	lsls	r1, r1, #16
    371c:	042d      	lsls	r5, r5, #16
    371e:	0c09      	lsrs	r1, r1, #16
    3720:	4688      	mov	r8, r1
    3722:	0029      	movs	r1, r5
    3724:	0c25      	lsrs	r5, r4, #16
    3726:	0424      	lsls	r4, r4, #16
    3728:	4441      	add	r1, r8
    372a:	0c24      	lsrs	r4, r4, #16
    372c:	9105      	str	r1, [sp, #20]
    372e:	0021      	movs	r1, r4
    3730:	4341      	muls	r1, r0
    3732:	4688      	mov	r8, r1
    3734:	0021      	movs	r1, r4
    3736:	4379      	muls	r1, r7
    3738:	468a      	mov	sl, r1
    373a:	4368      	muls	r0, r5
    373c:	4641      	mov	r1, r8
    373e:	4450      	add	r0, sl
    3740:	4681      	mov	r9, r0
    3742:	0c08      	lsrs	r0, r1, #16
    3744:	4448      	add	r0, r9
    3746:	436f      	muls	r7, r5
    3748:	4582      	cmp	sl, r0
    374a:	d903      	bls.n	3754 <__aeabi_dmul+0x278>
    374c:	2180      	movs	r1, #128	; 0x80
    374e:	0249      	lsls	r1, r1, #9
    3750:	4689      	mov	r9, r1
    3752:	444f      	add	r7, r9
    3754:	0c01      	lsrs	r1, r0, #16
    3756:	4689      	mov	r9, r1
    3758:	0039      	movs	r1, r7
    375a:	4449      	add	r1, r9
    375c:	9102      	str	r1, [sp, #8]
    375e:	4641      	mov	r1, r8
    3760:	040f      	lsls	r7, r1, #16
    3762:	9904      	ldr	r1, [sp, #16]
    3764:	0c3f      	lsrs	r7, r7, #16
    3766:	4688      	mov	r8, r1
    3768:	0400      	lsls	r0, r0, #16
    376a:	19c0      	adds	r0, r0, r7
    376c:	4480      	add	r8, r0
    376e:	4641      	mov	r1, r8
    3770:	9104      	str	r1, [sp, #16]
    3772:	4659      	mov	r1, fp
    3774:	0c0f      	lsrs	r7, r1, #16
    3776:	0409      	lsls	r1, r1, #16
    3778:	0c09      	lsrs	r1, r1, #16
    377a:	4688      	mov	r8, r1
    377c:	4359      	muls	r1, r3
    377e:	468a      	mov	sl, r1
    3780:	0039      	movs	r1, r7
    3782:	4351      	muls	r1, r2
    3784:	4689      	mov	r9, r1
    3786:	4641      	mov	r1, r8
    3788:	434a      	muls	r2, r1
    378a:	4651      	mov	r1, sl
    378c:	0c09      	lsrs	r1, r1, #16
    378e:	468b      	mov	fp, r1
    3790:	437b      	muls	r3, r7
    3792:	18d2      	adds	r2, r2, r3
    3794:	445a      	add	r2, fp
    3796:	4293      	cmp	r3, r2
    3798:	d903      	bls.n	37a2 <__aeabi_dmul+0x2c6>
    379a:	2380      	movs	r3, #128	; 0x80
    379c:	025b      	lsls	r3, r3, #9
    379e:	469b      	mov	fp, r3
    37a0:	44d9      	add	r9, fp
    37a2:	4651      	mov	r1, sl
    37a4:	0409      	lsls	r1, r1, #16
    37a6:	0c09      	lsrs	r1, r1, #16
    37a8:	468a      	mov	sl, r1
    37aa:	4641      	mov	r1, r8
    37ac:	4361      	muls	r1, r4
    37ae:	437c      	muls	r4, r7
    37b0:	0c13      	lsrs	r3, r2, #16
    37b2:	0412      	lsls	r2, r2, #16
    37b4:	444b      	add	r3, r9
    37b6:	4452      	add	r2, sl
    37b8:	46a1      	mov	r9, r4
    37ba:	468a      	mov	sl, r1
    37bc:	003c      	movs	r4, r7
    37be:	4641      	mov	r1, r8
    37c0:	436c      	muls	r4, r5
    37c2:	434d      	muls	r5, r1
    37c4:	4651      	mov	r1, sl
    37c6:	444d      	add	r5, r9
    37c8:	0c0f      	lsrs	r7, r1, #16
    37ca:	197d      	adds	r5, r7, r5
    37cc:	45a9      	cmp	r9, r5
    37ce:	d903      	bls.n	37d8 <__aeabi_dmul+0x2fc>
    37d0:	2180      	movs	r1, #128	; 0x80
    37d2:	0249      	lsls	r1, r1, #9
    37d4:	4688      	mov	r8, r1
    37d6:	4444      	add	r4, r8
    37d8:	9f04      	ldr	r7, [sp, #16]
    37da:	9903      	ldr	r1, [sp, #12]
    37dc:	46b8      	mov	r8, r7
    37de:	4441      	add	r1, r8
    37e0:	468b      	mov	fp, r1
    37e2:	4583      	cmp	fp, r0
    37e4:	4180      	sbcs	r0, r0
    37e6:	4241      	negs	r1, r0
    37e8:	4688      	mov	r8, r1
    37ea:	4651      	mov	r1, sl
    37ec:	0408      	lsls	r0, r1, #16
    37ee:	042f      	lsls	r7, r5, #16
    37f0:	0c00      	lsrs	r0, r0, #16
    37f2:	183f      	adds	r7, r7, r0
    37f4:	4658      	mov	r0, fp
    37f6:	9902      	ldr	r1, [sp, #8]
    37f8:	1810      	adds	r0, r2, r0
    37fa:	4689      	mov	r9, r1
    37fc:	4290      	cmp	r0, r2
    37fe:	4192      	sbcs	r2, r2
    3800:	444f      	add	r7, r9
    3802:	46ba      	mov	sl, r7
    3804:	4252      	negs	r2, r2
    3806:	4699      	mov	r9, r3
    3808:	4693      	mov	fp, r2
    380a:	44c2      	add	sl, r8
    380c:	44d1      	add	r9, sl
    380e:	44cb      	add	fp, r9
    3810:	428f      	cmp	r7, r1
    3812:	41bf      	sbcs	r7, r7
    3814:	45c2      	cmp	sl, r8
    3816:	4189      	sbcs	r1, r1
    3818:	4599      	cmp	r9, r3
    381a:	419b      	sbcs	r3, r3
    381c:	4593      	cmp	fp, r2
    381e:	4192      	sbcs	r2, r2
    3820:	427f      	negs	r7, r7
    3822:	4249      	negs	r1, r1
    3824:	0c2d      	lsrs	r5, r5, #16
    3826:	4252      	negs	r2, r2
    3828:	430f      	orrs	r7, r1
    382a:	425b      	negs	r3, r3
    382c:	4313      	orrs	r3, r2
    382e:	197f      	adds	r7, r7, r5
    3830:	18ff      	adds	r7, r7, r3
    3832:	465b      	mov	r3, fp
    3834:	193c      	adds	r4, r7, r4
    3836:	0ddb      	lsrs	r3, r3, #23
    3838:	9a05      	ldr	r2, [sp, #20]
    383a:	0264      	lsls	r4, r4, #9
    383c:	431c      	orrs	r4, r3
    383e:	0243      	lsls	r3, r0, #9
    3840:	4313      	orrs	r3, r2
    3842:	1e5d      	subs	r5, r3, #1
    3844:	41ab      	sbcs	r3, r5
    3846:	465a      	mov	r2, fp
    3848:	0dc0      	lsrs	r0, r0, #23
    384a:	4303      	orrs	r3, r0
    384c:	0252      	lsls	r2, r2, #9
    384e:	4313      	orrs	r3, r2
    3850:	01e2      	lsls	r2, r4, #7
    3852:	d556      	bpl.n	3902 <__aeabi_dmul+0x426>
    3854:	2001      	movs	r0, #1
    3856:	085a      	lsrs	r2, r3, #1
    3858:	4003      	ands	r3, r0
    385a:	4313      	orrs	r3, r2
    385c:	07e2      	lsls	r2, r4, #31
    385e:	4313      	orrs	r3, r2
    3860:	0864      	lsrs	r4, r4, #1
    3862:	485a      	ldr	r0, [pc, #360]	; (39cc <__aeabi_dmul+0x4f0>)
    3864:	4460      	add	r0, ip
    3866:	2800      	cmp	r0, #0
    3868:	dd4d      	ble.n	3906 <__aeabi_dmul+0x42a>
    386a:	075a      	lsls	r2, r3, #29
    386c:	d009      	beq.n	3882 <__aeabi_dmul+0x3a6>
    386e:	220f      	movs	r2, #15
    3870:	401a      	ands	r2, r3
    3872:	2a04      	cmp	r2, #4
    3874:	d005      	beq.n	3882 <__aeabi_dmul+0x3a6>
    3876:	1d1a      	adds	r2, r3, #4
    3878:	429a      	cmp	r2, r3
    387a:	419b      	sbcs	r3, r3
    387c:	425b      	negs	r3, r3
    387e:	18e4      	adds	r4, r4, r3
    3880:	0013      	movs	r3, r2
    3882:	01e2      	lsls	r2, r4, #7
    3884:	d504      	bpl.n	3890 <__aeabi_dmul+0x3b4>
    3886:	2080      	movs	r0, #128	; 0x80
    3888:	4a51      	ldr	r2, [pc, #324]	; (39d0 <__aeabi_dmul+0x4f4>)
    388a:	00c0      	lsls	r0, r0, #3
    388c:	4014      	ands	r4, r2
    388e:	4460      	add	r0, ip
    3890:	4a50      	ldr	r2, [pc, #320]	; (39d4 <__aeabi_dmul+0x4f8>)
    3892:	4290      	cmp	r0, r2
    3894:	dd00      	ble.n	3898 <__aeabi_dmul+0x3bc>
    3896:	e6e3      	b.n	3660 <__aeabi_dmul+0x184>
    3898:	2501      	movs	r5, #1
    389a:	08db      	lsrs	r3, r3, #3
    389c:	0762      	lsls	r2, r4, #29
    389e:	431a      	orrs	r2, r3
    38a0:	0264      	lsls	r4, r4, #9
    38a2:	9b01      	ldr	r3, [sp, #4]
    38a4:	4691      	mov	r9, r2
    38a6:	0b22      	lsrs	r2, r4, #12
    38a8:	0544      	lsls	r4, r0, #21
    38aa:	0d64      	lsrs	r4, r4, #21
    38ac:	401d      	ands	r5, r3
    38ae:	e67c      	b.n	35aa <__aeabi_dmul+0xce>
    38b0:	2280      	movs	r2, #128	; 0x80
    38b2:	4659      	mov	r1, fp
    38b4:	0312      	lsls	r2, r2, #12
    38b6:	4211      	tst	r1, r2
    38b8:	d008      	beq.n	38cc <__aeabi_dmul+0x3f0>
    38ba:	4214      	tst	r4, r2
    38bc:	d106      	bne.n	38cc <__aeabi_dmul+0x3f0>
    38be:	4322      	orrs	r2, r4
    38c0:	0312      	lsls	r2, r2, #12
    38c2:	0b12      	lsrs	r2, r2, #12
    38c4:	4645      	mov	r5, r8
    38c6:	4699      	mov	r9, r3
    38c8:	4c43      	ldr	r4, [pc, #268]	; (39d8 <__aeabi_dmul+0x4fc>)
    38ca:	e66e      	b.n	35aa <__aeabi_dmul+0xce>
    38cc:	465b      	mov	r3, fp
    38ce:	431a      	orrs	r2, r3
    38d0:	0312      	lsls	r2, r2, #12
    38d2:	0b12      	lsrs	r2, r2, #12
    38d4:	4c40      	ldr	r4, [pc, #256]	; (39d8 <__aeabi_dmul+0x4fc>)
    38d6:	e668      	b.n	35aa <__aeabi_dmul+0xce>
    38d8:	0003      	movs	r3, r0
    38da:	4654      	mov	r4, sl
    38dc:	3b28      	subs	r3, #40	; 0x28
    38de:	409c      	lsls	r4, r3
    38e0:	2300      	movs	r3, #0
    38e2:	e6b9      	b.n	3658 <__aeabi_dmul+0x17c>
    38e4:	f000 fc52 	bl	418c <__clzsi2>
    38e8:	3020      	adds	r0, #32
    38ea:	e6a6      	b.n	363a <__aeabi_dmul+0x15e>
    38ec:	0003      	movs	r3, r0
    38ee:	3b28      	subs	r3, #40	; 0x28
    38f0:	409f      	lsls	r7, r3
    38f2:	2300      	movs	r3, #0
    38f4:	46bb      	mov	fp, r7
    38f6:	4699      	mov	r9, r3
    38f8:	e68a      	b.n	3610 <__aeabi_dmul+0x134>
    38fa:	f000 fc47 	bl	418c <__clzsi2>
    38fe:	3020      	adds	r0, #32
    3900:	e674      	b.n	35ec <__aeabi_dmul+0x110>
    3902:	46b4      	mov	ip, r6
    3904:	e7ad      	b.n	3862 <__aeabi_dmul+0x386>
    3906:	2501      	movs	r5, #1
    3908:	1a2a      	subs	r2, r5, r0
    390a:	2a38      	cmp	r2, #56	; 0x38
    390c:	dd06      	ble.n	391c <__aeabi_dmul+0x440>
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	2400      	movs	r4, #0
    3912:	401d      	ands	r5, r3
    3914:	2300      	movs	r3, #0
    3916:	2200      	movs	r2, #0
    3918:	4699      	mov	r9, r3
    391a:	e646      	b.n	35aa <__aeabi_dmul+0xce>
    391c:	2a1f      	cmp	r2, #31
    391e:	dc21      	bgt.n	3964 <__aeabi_dmul+0x488>
    3920:	2520      	movs	r5, #32
    3922:	0020      	movs	r0, r4
    3924:	1aad      	subs	r5, r5, r2
    3926:	001e      	movs	r6, r3
    3928:	40ab      	lsls	r3, r5
    392a:	40a8      	lsls	r0, r5
    392c:	40d6      	lsrs	r6, r2
    392e:	1e5d      	subs	r5, r3, #1
    3930:	41ab      	sbcs	r3, r5
    3932:	4330      	orrs	r0, r6
    3934:	4318      	orrs	r0, r3
    3936:	40d4      	lsrs	r4, r2
    3938:	0743      	lsls	r3, r0, #29
    393a:	d009      	beq.n	3950 <__aeabi_dmul+0x474>
    393c:	230f      	movs	r3, #15
    393e:	4003      	ands	r3, r0
    3940:	2b04      	cmp	r3, #4
    3942:	d005      	beq.n	3950 <__aeabi_dmul+0x474>
    3944:	0003      	movs	r3, r0
    3946:	1d18      	adds	r0, r3, #4
    3948:	4298      	cmp	r0, r3
    394a:	419b      	sbcs	r3, r3
    394c:	425b      	negs	r3, r3
    394e:	18e4      	adds	r4, r4, r3
    3950:	0223      	lsls	r3, r4, #8
    3952:	d521      	bpl.n	3998 <__aeabi_dmul+0x4bc>
    3954:	2501      	movs	r5, #1
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	2401      	movs	r4, #1
    395a:	401d      	ands	r5, r3
    395c:	2300      	movs	r3, #0
    395e:	2200      	movs	r2, #0
    3960:	4699      	mov	r9, r3
    3962:	e622      	b.n	35aa <__aeabi_dmul+0xce>
    3964:	251f      	movs	r5, #31
    3966:	0021      	movs	r1, r4
    3968:	426d      	negs	r5, r5
    396a:	1a28      	subs	r0, r5, r0
    396c:	40c1      	lsrs	r1, r0
    396e:	0008      	movs	r0, r1
    3970:	2a20      	cmp	r2, #32
    3972:	d01d      	beq.n	39b0 <__aeabi_dmul+0x4d4>
    3974:	355f      	adds	r5, #95	; 0x5f
    3976:	1aaa      	subs	r2, r5, r2
    3978:	4094      	lsls	r4, r2
    397a:	4323      	orrs	r3, r4
    397c:	1e5c      	subs	r4, r3, #1
    397e:	41a3      	sbcs	r3, r4
    3980:	2507      	movs	r5, #7
    3982:	4303      	orrs	r3, r0
    3984:	401d      	ands	r5, r3
    3986:	2200      	movs	r2, #0
    3988:	2d00      	cmp	r5, #0
    398a:	d009      	beq.n	39a0 <__aeabi_dmul+0x4c4>
    398c:	220f      	movs	r2, #15
    398e:	2400      	movs	r4, #0
    3990:	401a      	ands	r2, r3
    3992:	0018      	movs	r0, r3
    3994:	2a04      	cmp	r2, #4
    3996:	d1d6      	bne.n	3946 <__aeabi_dmul+0x46a>
    3998:	0003      	movs	r3, r0
    399a:	0765      	lsls	r5, r4, #29
    399c:	0264      	lsls	r4, r4, #9
    399e:	0b22      	lsrs	r2, r4, #12
    39a0:	08db      	lsrs	r3, r3, #3
    39a2:	432b      	orrs	r3, r5
    39a4:	2501      	movs	r5, #1
    39a6:	4699      	mov	r9, r3
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	2400      	movs	r4, #0
    39ac:	401d      	ands	r5, r3
    39ae:	e5fc      	b.n	35aa <__aeabi_dmul+0xce>
    39b0:	2400      	movs	r4, #0
    39b2:	e7e2      	b.n	397a <__aeabi_dmul+0x49e>
    39b4:	2280      	movs	r2, #128	; 0x80
    39b6:	2501      	movs	r5, #1
    39b8:	0312      	lsls	r2, r2, #12
    39ba:	4322      	orrs	r2, r4
    39bc:	9901      	ldr	r1, [sp, #4]
    39be:	0312      	lsls	r2, r2, #12
    39c0:	0b12      	lsrs	r2, r2, #12
    39c2:	400d      	ands	r5, r1
    39c4:	4699      	mov	r9, r3
    39c6:	4c04      	ldr	r4, [pc, #16]	; (39d8 <__aeabi_dmul+0x4fc>)
    39c8:	e5ef      	b.n	35aa <__aeabi_dmul+0xce>
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	000003ff 	.word	0x000003ff
    39d0:	feffffff 	.word	0xfeffffff
    39d4:	000007fe 	.word	0x000007fe
    39d8:	000007ff 	.word	0x000007ff

000039dc <__aeabi_dsub>:
    39dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39de:	4646      	mov	r6, r8
    39e0:	46d6      	mov	lr, sl
    39e2:	464f      	mov	r7, r9
    39e4:	030c      	lsls	r4, r1, #12
    39e6:	b5c0      	push	{r6, r7, lr}
    39e8:	0fcd      	lsrs	r5, r1, #31
    39ea:	004e      	lsls	r6, r1, #1
    39ec:	0a61      	lsrs	r1, r4, #9
    39ee:	0f44      	lsrs	r4, r0, #29
    39f0:	430c      	orrs	r4, r1
    39f2:	00c1      	lsls	r1, r0, #3
    39f4:	0058      	lsls	r0, r3, #1
    39f6:	0d40      	lsrs	r0, r0, #21
    39f8:	4684      	mov	ip, r0
    39fa:	468a      	mov	sl, r1
    39fc:	000f      	movs	r7, r1
    39fe:	0319      	lsls	r1, r3, #12
    3a00:	0f50      	lsrs	r0, r2, #29
    3a02:	0a49      	lsrs	r1, r1, #9
    3a04:	4301      	orrs	r1, r0
    3a06:	48c6      	ldr	r0, [pc, #792]	; (3d20 <__aeabi_dsub+0x344>)
    3a08:	0d76      	lsrs	r6, r6, #21
    3a0a:	46a8      	mov	r8, r5
    3a0c:	0fdb      	lsrs	r3, r3, #31
    3a0e:	00d2      	lsls	r2, r2, #3
    3a10:	4584      	cmp	ip, r0
    3a12:	d100      	bne.n	3a16 <__aeabi_dsub+0x3a>
    3a14:	e0d8      	b.n	3bc8 <__aeabi_dsub+0x1ec>
    3a16:	2001      	movs	r0, #1
    3a18:	4043      	eors	r3, r0
    3a1a:	42ab      	cmp	r3, r5
    3a1c:	d100      	bne.n	3a20 <__aeabi_dsub+0x44>
    3a1e:	e0a6      	b.n	3b6e <__aeabi_dsub+0x192>
    3a20:	4660      	mov	r0, ip
    3a22:	1a35      	subs	r5, r6, r0
    3a24:	2d00      	cmp	r5, #0
    3a26:	dc00      	bgt.n	3a2a <__aeabi_dsub+0x4e>
    3a28:	e105      	b.n	3c36 <__aeabi_dsub+0x25a>
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d110      	bne.n	3a50 <__aeabi_dsub+0x74>
    3a2e:	000b      	movs	r3, r1
    3a30:	4313      	orrs	r3, r2
    3a32:	d100      	bne.n	3a36 <__aeabi_dsub+0x5a>
    3a34:	e0d7      	b.n	3be6 <__aeabi_dsub+0x20a>
    3a36:	1e6b      	subs	r3, r5, #1
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d000      	beq.n	3a3e <__aeabi_dsub+0x62>
    3a3c:	e14b      	b.n	3cd6 <__aeabi_dsub+0x2fa>
    3a3e:	4653      	mov	r3, sl
    3a40:	1a9f      	subs	r7, r3, r2
    3a42:	45ba      	cmp	sl, r7
    3a44:	4180      	sbcs	r0, r0
    3a46:	1a64      	subs	r4, r4, r1
    3a48:	4240      	negs	r0, r0
    3a4a:	1a24      	subs	r4, r4, r0
    3a4c:	2601      	movs	r6, #1
    3a4e:	e01e      	b.n	3a8e <__aeabi_dsub+0xb2>
    3a50:	4bb3      	ldr	r3, [pc, #716]	; (3d20 <__aeabi_dsub+0x344>)
    3a52:	429e      	cmp	r6, r3
    3a54:	d048      	beq.n	3ae8 <__aeabi_dsub+0x10c>
    3a56:	2380      	movs	r3, #128	; 0x80
    3a58:	041b      	lsls	r3, r3, #16
    3a5a:	4319      	orrs	r1, r3
    3a5c:	2d38      	cmp	r5, #56	; 0x38
    3a5e:	dd00      	ble.n	3a62 <__aeabi_dsub+0x86>
    3a60:	e119      	b.n	3c96 <__aeabi_dsub+0x2ba>
    3a62:	2d1f      	cmp	r5, #31
    3a64:	dd00      	ble.n	3a68 <__aeabi_dsub+0x8c>
    3a66:	e14c      	b.n	3d02 <__aeabi_dsub+0x326>
    3a68:	2320      	movs	r3, #32
    3a6a:	000f      	movs	r7, r1
    3a6c:	1b5b      	subs	r3, r3, r5
    3a6e:	0010      	movs	r0, r2
    3a70:	409a      	lsls	r2, r3
    3a72:	409f      	lsls	r7, r3
    3a74:	40e8      	lsrs	r0, r5
    3a76:	1e53      	subs	r3, r2, #1
    3a78:	419a      	sbcs	r2, r3
    3a7a:	40e9      	lsrs	r1, r5
    3a7c:	4307      	orrs	r7, r0
    3a7e:	4317      	orrs	r7, r2
    3a80:	4653      	mov	r3, sl
    3a82:	1bdf      	subs	r7, r3, r7
    3a84:	1a61      	subs	r1, r4, r1
    3a86:	45ba      	cmp	sl, r7
    3a88:	41a4      	sbcs	r4, r4
    3a8a:	4264      	negs	r4, r4
    3a8c:	1b0c      	subs	r4, r1, r4
    3a8e:	0223      	lsls	r3, r4, #8
    3a90:	d400      	bmi.n	3a94 <__aeabi_dsub+0xb8>
    3a92:	e0c5      	b.n	3c20 <__aeabi_dsub+0x244>
    3a94:	0264      	lsls	r4, r4, #9
    3a96:	0a65      	lsrs	r5, r4, #9
    3a98:	2d00      	cmp	r5, #0
    3a9a:	d100      	bne.n	3a9e <__aeabi_dsub+0xc2>
    3a9c:	e0f6      	b.n	3c8c <__aeabi_dsub+0x2b0>
    3a9e:	0028      	movs	r0, r5
    3aa0:	f000 fb74 	bl	418c <__clzsi2>
    3aa4:	0003      	movs	r3, r0
    3aa6:	3b08      	subs	r3, #8
    3aa8:	2b1f      	cmp	r3, #31
    3aaa:	dd00      	ble.n	3aae <__aeabi_dsub+0xd2>
    3aac:	e0e9      	b.n	3c82 <__aeabi_dsub+0x2a6>
    3aae:	2220      	movs	r2, #32
    3ab0:	003c      	movs	r4, r7
    3ab2:	1ad2      	subs	r2, r2, r3
    3ab4:	409d      	lsls	r5, r3
    3ab6:	40d4      	lsrs	r4, r2
    3ab8:	409f      	lsls	r7, r3
    3aba:	4325      	orrs	r5, r4
    3abc:	429e      	cmp	r6, r3
    3abe:	dd00      	ble.n	3ac2 <__aeabi_dsub+0xe6>
    3ac0:	e0db      	b.n	3c7a <__aeabi_dsub+0x29e>
    3ac2:	1b9e      	subs	r6, r3, r6
    3ac4:	1c73      	adds	r3, r6, #1
    3ac6:	2b1f      	cmp	r3, #31
    3ac8:	dd00      	ble.n	3acc <__aeabi_dsub+0xf0>
    3aca:	e10a      	b.n	3ce2 <__aeabi_dsub+0x306>
    3acc:	2220      	movs	r2, #32
    3ace:	0038      	movs	r0, r7
    3ad0:	1ad2      	subs	r2, r2, r3
    3ad2:	0029      	movs	r1, r5
    3ad4:	4097      	lsls	r7, r2
    3ad6:	002c      	movs	r4, r5
    3ad8:	4091      	lsls	r1, r2
    3ada:	40d8      	lsrs	r0, r3
    3adc:	1e7a      	subs	r2, r7, #1
    3ade:	4197      	sbcs	r7, r2
    3ae0:	40dc      	lsrs	r4, r3
    3ae2:	2600      	movs	r6, #0
    3ae4:	4301      	orrs	r1, r0
    3ae6:	430f      	orrs	r7, r1
    3ae8:	077b      	lsls	r3, r7, #29
    3aea:	d009      	beq.n	3b00 <__aeabi_dsub+0x124>
    3aec:	230f      	movs	r3, #15
    3aee:	403b      	ands	r3, r7
    3af0:	2b04      	cmp	r3, #4
    3af2:	d005      	beq.n	3b00 <__aeabi_dsub+0x124>
    3af4:	1d3b      	adds	r3, r7, #4
    3af6:	42bb      	cmp	r3, r7
    3af8:	41bf      	sbcs	r7, r7
    3afa:	427f      	negs	r7, r7
    3afc:	19e4      	adds	r4, r4, r7
    3afe:	001f      	movs	r7, r3
    3b00:	0223      	lsls	r3, r4, #8
    3b02:	d525      	bpl.n	3b50 <__aeabi_dsub+0x174>
    3b04:	4b86      	ldr	r3, [pc, #536]	; (3d20 <__aeabi_dsub+0x344>)
    3b06:	3601      	adds	r6, #1
    3b08:	429e      	cmp	r6, r3
    3b0a:	d100      	bne.n	3b0e <__aeabi_dsub+0x132>
    3b0c:	e0af      	b.n	3c6e <__aeabi_dsub+0x292>
    3b0e:	4b85      	ldr	r3, [pc, #532]	; (3d24 <__aeabi_dsub+0x348>)
    3b10:	2501      	movs	r5, #1
    3b12:	401c      	ands	r4, r3
    3b14:	4643      	mov	r3, r8
    3b16:	0762      	lsls	r2, r4, #29
    3b18:	08ff      	lsrs	r7, r7, #3
    3b1a:	0264      	lsls	r4, r4, #9
    3b1c:	0576      	lsls	r6, r6, #21
    3b1e:	4317      	orrs	r7, r2
    3b20:	0b24      	lsrs	r4, r4, #12
    3b22:	0d76      	lsrs	r6, r6, #21
    3b24:	401d      	ands	r5, r3
    3b26:	2100      	movs	r1, #0
    3b28:	0324      	lsls	r4, r4, #12
    3b2a:	0b23      	lsrs	r3, r4, #12
    3b2c:	0d0c      	lsrs	r4, r1, #20
    3b2e:	4a7e      	ldr	r2, [pc, #504]	; (3d28 <__aeabi_dsub+0x34c>)
    3b30:	0524      	lsls	r4, r4, #20
    3b32:	431c      	orrs	r4, r3
    3b34:	4014      	ands	r4, r2
    3b36:	0533      	lsls	r3, r6, #20
    3b38:	4323      	orrs	r3, r4
    3b3a:	005b      	lsls	r3, r3, #1
    3b3c:	07ed      	lsls	r5, r5, #31
    3b3e:	085b      	lsrs	r3, r3, #1
    3b40:	432b      	orrs	r3, r5
    3b42:	0038      	movs	r0, r7
    3b44:	0019      	movs	r1, r3
    3b46:	bc1c      	pop	{r2, r3, r4}
    3b48:	4690      	mov	r8, r2
    3b4a:	4699      	mov	r9, r3
    3b4c:	46a2      	mov	sl, r4
    3b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b50:	2501      	movs	r5, #1
    3b52:	4643      	mov	r3, r8
    3b54:	0762      	lsls	r2, r4, #29
    3b56:	08ff      	lsrs	r7, r7, #3
    3b58:	4317      	orrs	r7, r2
    3b5a:	08e4      	lsrs	r4, r4, #3
    3b5c:	401d      	ands	r5, r3
    3b5e:	4b70      	ldr	r3, [pc, #448]	; (3d20 <__aeabi_dsub+0x344>)
    3b60:	429e      	cmp	r6, r3
    3b62:	d036      	beq.n	3bd2 <__aeabi_dsub+0x1f6>
    3b64:	0324      	lsls	r4, r4, #12
    3b66:	0576      	lsls	r6, r6, #21
    3b68:	0b24      	lsrs	r4, r4, #12
    3b6a:	0d76      	lsrs	r6, r6, #21
    3b6c:	e7db      	b.n	3b26 <__aeabi_dsub+0x14a>
    3b6e:	4663      	mov	r3, ip
    3b70:	1af3      	subs	r3, r6, r3
    3b72:	2b00      	cmp	r3, #0
    3b74:	dc00      	bgt.n	3b78 <__aeabi_dsub+0x19c>
    3b76:	e094      	b.n	3ca2 <__aeabi_dsub+0x2c6>
    3b78:	4660      	mov	r0, ip
    3b7a:	2800      	cmp	r0, #0
    3b7c:	d035      	beq.n	3bea <__aeabi_dsub+0x20e>
    3b7e:	4868      	ldr	r0, [pc, #416]	; (3d20 <__aeabi_dsub+0x344>)
    3b80:	4286      	cmp	r6, r0
    3b82:	d0b1      	beq.n	3ae8 <__aeabi_dsub+0x10c>
    3b84:	2780      	movs	r7, #128	; 0x80
    3b86:	043f      	lsls	r7, r7, #16
    3b88:	4339      	orrs	r1, r7
    3b8a:	2b38      	cmp	r3, #56	; 0x38
    3b8c:	dc00      	bgt.n	3b90 <__aeabi_dsub+0x1b4>
    3b8e:	e0fd      	b.n	3d8c <__aeabi_dsub+0x3b0>
    3b90:	430a      	orrs	r2, r1
    3b92:	0017      	movs	r7, r2
    3b94:	2100      	movs	r1, #0
    3b96:	1e7a      	subs	r2, r7, #1
    3b98:	4197      	sbcs	r7, r2
    3b9a:	4457      	add	r7, sl
    3b9c:	4557      	cmp	r7, sl
    3b9e:	4180      	sbcs	r0, r0
    3ba0:	1909      	adds	r1, r1, r4
    3ba2:	4244      	negs	r4, r0
    3ba4:	190c      	adds	r4, r1, r4
    3ba6:	0223      	lsls	r3, r4, #8
    3ba8:	d53a      	bpl.n	3c20 <__aeabi_dsub+0x244>
    3baa:	4b5d      	ldr	r3, [pc, #372]	; (3d20 <__aeabi_dsub+0x344>)
    3bac:	3601      	adds	r6, #1
    3bae:	429e      	cmp	r6, r3
    3bb0:	d100      	bne.n	3bb4 <__aeabi_dsub+0x1d8>
    3bb2:	e14b      	b.n	3e4c <__aeabi_dsub+0x470>
    3bb4:	2201      	movs	r2, #1
    3bb6:	4b5b      	ldr	r3, [pc, #364]	; (3d24 <__aeabi_dsub+0x348>)
    3bb8:	401c      	ands	r4, r3
    3bba:	087b      	lsrs	r3, r7, #1
    3bbc:	4017      	ands	r7, r2
    3bbe:	431f      	orrs	r7, r3
    3bc0:	07e2      	lsls	r2, r4, #31
    3bc2:	4317      	orrs	r7, r2
    3bc4:	0864      	lsrs	r4, r4, #1
    3bc6:	e78f      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3bc8:	0008      	movs	r0, r1
    3bca:	4310      	orrs	r0, r2
    3bcc:	d000      	beq.n	3bd0 <__aeabi_dsub+0x1f4>
    3bce:	e724      	b.n	3a1a <__aeabi_dsub+0x3e>
    3bd0:	e721      	b.n	3a16 <__aeabi_dsub+0x3a>
    3bd2:	0023      	movs	r3, r4
    3bd4:	433b      	orrs	r3, r7
    3bd6:	d100      	bne.n	3bda <__aeabi_dsub+0x1fe>
    3bd8:	e1b9      	b.n	3f4e <__aeabi_dsub+0x572>
    3bda:	2280      	movs	r2, #128	; 0x80
    3bdc:	0312      	lsls	r2, r2, #12
    3bde:	4314      	orrs	r4, r2
    3be0:	0324      	lsls	r4, r4, #12
    3be2:	0b24      	lsrs	r4, r4, #12
    3be4:	e79f      	b.n	3b26 <__aeabi_dsub+0x14a>
    3be6:	002e      	movs	r6, r5
    3be8:	e77e      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3bea:	0008      	movs	r0, r1
    3bec:	4310      	orrs	r0, r2
    3bee:	d100      	bne.n	3bf2 <__aeabi_dsub+0x216>
    3bf0:	e0ca      	b.n	3d88 <__aeabi_dsub+0x3ac>
    3bf2:	1e58      	subs	r0, r3, #1
    3bf4:	4684      	mov	ip, r0
    3bf6:	2800      	cmp	r0, #0
    3bf8:	d000      	beq.n	3bfc <__aeabi_dsub+0x220>
    3bfa:	e0e7      	b.n	3dcc <__aeabi_dsub+0x3f0>
    3bfc:	4452      	add	r2, sl
    3bfe:	4552      	cmp	r2, sl
    3c00:	4180      	sbcs	r0, r0
    3c02:	1864      	adds	r4, r4, r1
    3c04:	4240      	negs	r0, r0
    3c06:	1824      	adds	r4, r4, r0
    3c08:	0017      	movs	r7, r2
    3c0a:	2601      	movs	r6, #1
    3c0c:	0223      	lsls	r3, r4, #8
    3c0e:	d507      	bpl.n	3c20 <__aeabi_dsub+0x244>
    3c10:	2602      	movs	r6, #2
    3c12:	e7cf      	b.n	3bb4 <__aeabi_dsub+0x1d8>
    3c14:	4664      	mov	r4, ip
    3c16:	432c      	orrs	r4, r5
    3c18:	d100      	bne.n	3c1c <__aeabi_dsub+0x240>
    3c1a:	e1b3      	b.n	3f84 <__aeabi_dsub+0x5a8>
    3c1c:	002c      	movs	r4, r5
    3c1e:	4667      	mov	r7, ip
    3c20:	077b      	lsls	r3, r7, #29
    3c22:	d000      	beq.n	3c26 <__aeabi_dsub+0x24a>
    3c24:	e762      	b.n	3aec <__aeabi_dsub+0x110>
    3c26:	0763      	lsls	r3, r4, #29
    3c28:	08ff      	lsrs	r7, r7, #3
    3c2a:	431f      	orrs	r7, r3
    3c2c:	2501      	movs	r5, #1
    3c2e:	4643      	mov	r3, r8
    3c30:	08e4      	lsrs	r4, r4, #3
    3c32:	401d      	ands	r5, r3
    3c34:	e793      	b.n	3b5e <__aeabi_dsub+0x182>
    3c36:	2d00      	cmp	r5, #0
    3c38:	d178      	bne.n	3d2c <__aeabi_dsub+0x350>
    3c3a:	1c75      	adds	r5, r6, #1
    3c3c:	056d      	lsls	r5, r5, #21
    3c3e:	0d6d      	lsrs	r5, r5, #21
    3c40:	2d01      	cmp	r5, #1
    3c42:	dc00      	bgt.n	3c46 <__aeabi_dsub+0x26a>
    3c44:	e0f2      	b.n	3e2c <__aeabi_dsub+0x450>
    3c46:	4650      	mov	r0, sl
    3c48:	1a80      	subs	r0, r0, r2
    3c4a:	4582      	cmp	sl, r0
    3c4c:	41bf      	sbcs	r7, r7
    3c4e:	1a65      	subs	r5, r4, r1
    3c50:	427f      	negs	r7, r7
    3c52:	1bed      	subs	r5, r5, r7
    3c54:	4684      	mov	ip, r0
    3c56:	0228      	lsls	r0, r5, #8
    3c58:	d400      	bmi.n	3c5c <__aeabi_dsub+0x280>
    3c5a:	e08c      	b.n	3d76 <__aeabi_dsub+0x39a>
    3c5c:	4650      	mov	r0, sl
    3c5e:	1a17      	subs	r7, r2, r0
    3c60:	42ba      	cmp	r2, r7
    3c62:	4192      	sbcs	r2, r2
    3c64:	1b0c      	subs	r4, r1, r4
    3c66:	4255      	negs	r5, r2
    3c68:	1b65      	subs	r5, r4, r5
    3c6a:	4698      	mov	r8, r3
    3c6c:	e714      	b.n	3a98 <__aeabi_dsub+0xbc>
    3c6e:	2501      	movs	r5, #1
    3c70:	4643      	mov	r3, r8
    3c72:	2400      	movs	r4, #0
    3c74:	401d      	ands	r5, r3
    3c76:	2700      	movs	r7, #0
    3c78:	e755      	b.n	3b26 <__aeabi_dsub+0x14a>
    3c7a:	4c2a      	ldr	r4, [pc, #168]	; (3d24 <__aeabi_dsub+0x348>)
    3c7c:	1af6      	subs	r6, r6, r3
    3c7e:	402c      	ands	r4, r5
    3c80:	e732      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3c82:	003d      	movs	r5, r7
    3c84:	3828      	subs	r0, #40	; 0x28
    3c86:	4085      	lsls	r5, r0
    3c88:	2700      	movs	r7, #0
    3c8a:	e717      	b.n	3abc <__aeabi_dsub+0xe0>
    3c8c:	0038      	movs	r0, r7
    3c8e:	f000 fa7d 	bl	418c <__clzsi2>
    3c92:	3020      	adds	r0, #32
    3c94:	e706      	b.n	3aa4 <__aeabi_dsub+0xc8>
    3c96:	430a      	orrs	r2, r1
    3c98:	0017      	movs	r7, r2
    3c9a:	2100      	movs	r1, #0
    3c9c:	1e7a      	subs	r2, r7, #1
    3c9e:	4197      	sbcs	r7, r2
    3ca0:	e6ee      	b.n	3a80 <__aeabi_dsub+0xa4>
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d000      	beq.n	3ca8 <__aeabi_dsub+0x2cc>
    3ca6:	e0e5      	b.n	3e74 <__aeabi_dsub+0x498>
    3ca8:	1c73      	adds	r3, r6, #1
    3caa:	469c      	mov	ip, r3
    3cac:	055b      	lsls	r3, r3, #21
    3cae:	0d5b      	lsrs	r3, r3, #21
    3cb0:	2b01      	cmp	r3, #1
    3cb2:	dc00      	bgt.n	3cb6 <__aeabi_dsub+0x2da>
    3cb4:	e09f      	b.n	3df6 <__aeabi_dsub+0x41a>
    3cb6:	4b1a      	ldr	r3, [pc, #104]	; (3d20 <__aeabi_dsub+0x344>)
    3cb8:	459c      	cmp	ip, r3
    3cba:	d100      	bne.n	3cbe <__aeabi_dsub+0x2e2>
    3cbc:	e0c5      	b.n	3e4a <__aeabi_dsub+0x46e>
    3cbe:	4452      	add	r2, sl
    3cc0:	4552      	cmp	r2, sl
    3cc2:	4180      	sbcs	r0, r0
    3cc4:	1864      	adds	r4, r4, r1
    3cc6:	4240      	negs	r0, r0
    3cc8:	1824      	adds	r4, r4, r0
    3cca:	07e7      	lsls	r7, r4, #31
    3ccc:	0852      	lsrs	r2, r2, #1
    3cce:	4317      	orrs	r7, r2
    3cd0:	0864      	lsrs	r4, r4, #1
    3cd2:	4666      	mov	r6, ip
    3cd4:	e708      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3cd6:	4812      	ldr	r0, [pc, #72]	; (3d20 <__aeabi_dsub+0x344>)
    3cd8:	4285      	cmp	r5, r0
    3cda:	d100      	bne.n	3cde <__aeabi_dsub+0x302>
    3cdc:	e085      	b.n	3dea <__aeabi_dsub+0x40e>
    3cde:	001d      	movs	r5, r3
    3ce0:	e6bc      	b.n	3a5c <__aeabi_dsub+0x80>
    3ce2:	0029      	movs	r1, r5
    3ce4:	3e1f      	subs	r6, #31
    3ce6:	40f1      	lsrs	r1, r6
    3ce8:	2b20      	cmp	r3, #32
    3cea:	d100      	bne.n	3cee <__aeabi_dsub+0x312>
    3cec:	e07f      	b.n	3dee <__aeabi_dsub+0x412>
    3cee:	2240      	movs	r2, #64	; 0x40
    3cf0:	1ad3      	subs	r3, r2, r3
    3cf2:	409d      	lsls	r5, r3
    3cf4:	432f      	orrs	r7, r5
    3cf6:	1e7d      	subs	r5, r7, #1
    3cf8:	41af      	sbcs	r7, r5
    3cfa:	2400      	movs	r4, #0
    3cfc:	430f      	orrs	r7, r1
    3cfe:	2600      	movs	r6, #0
    3d00:	e78e      	b.n	3c20 <__aeabi_dsub+0x244>
    3d02:	002b      	movs	r3, r5
    3d04:	000f      	movs	r7, r1
    3d06:	3b20      	subs	r3, #32
    3d08:	40df      	lsrs	r7, r3
    3d0a:	2d20      	cmp	r5, #32
    3d0c:	d071      	beq.n	3df2 <__aeabi_dsub+0x416>
    3d0e:	2340      	movs	r3, #64	; 0x40
    3d10:	1b5d      	subs	r5, r3, r5
    3d12:	40a9      	lsls	r1, r5
    3d14:	430a      	orrs	r2, r1
    3d16:	1e51      	subs	r1, r2, #1
    3d18:	418a      	sbcs	r2, r1
    3d1a:	2100      	movs	r1, #0
    3d1c:	4317      	orrs	r7, r2
    3d1e:	e6af      	b.n	3a80 <__aeabi_dsub+0xa4>
    3d20:	000007ff 	.word	0x000007ff
    3d24:	ff7fffff 	.word	0xff7fffff
    3d28:	800fffff 	.word	0x800fffff
    3d2c:	2e00      	cmp	r6, #0
    3d2e:	d03e      	beq.n	3dae <__aeabi_dsub+0x3d2>
    3d30:	4eb3      	ldr	r6, [pc, #716]	; (4000 <__aeabi_dsub+0x624>)
    3d32:	45b4      	cmp	ip, r6
    3d34:	d045      	beq.n	3dc2 <__aeabi_dsub+0x3e6>
    3d36:	2680      	movs	r6, #128	; 0x80
    3d38:	0436      	lsls	r6, r6, #16
    3d3a:	426d      	negs	r5, r5
    3d3c:	4334      	orrs	r4, r6
    3d3e:	2d38      	cmp	r5, #56	; 0x38
    3d40:	dd00      	ble.n	3d44 <__aeabi_dsub+0x368>
    3d42:	e0a8      	b.n	3e96 <__aeabi_dsub+0x4ba>
    3d44:	2d1f      	cmp	r5, #31
    3d46:	dd00      	ble.n	3d4a <__aeabi_dsub+0x36e>
    3d48:	e11f      	b.n	3f8a <__aeabi_dsub+0x5ae>
    3d4a:	2620      	movs	r6, #32
    3d4c:	0027      	movs	r7, r4
    3d4e:	4650      	mov	r0, sl
    3d50:	1b76      	subs	r6, r6, r5
    3d52:	40b7      	lsls	r7, r6
    3d54:	40e8      	lsrs	r0, r5
    3d56:	4307      	orrs	r7, r0
    3d58:	4650      	mov	r0, sl
    3d5a:	40b0      	lsls	r0, r6
    3d5c:	1e46      	subs	r6, r0, #1
    3d5e:	41b0      	sbcs	r0, r6
    3d60:	40ec      	lsrs	r4, r5
    3d62:	4338      	orrs	r0, r7
    3d64:	1a17      	subs	r7, r2, r0
    3d66:	42ba      	cmp	r2, r7
    3d68:	4192      	sbcs	r2, r2
    3d6a:	1b0c      	subs	r4, r1, r4
    3d6c:	4252      	negs	r2, r2
    3d6e:	1aa4      	subs	r4, r4, r2
    3d70:	4666      	mov	r6, ip
    3d72:	4698      	mov	r8, r3
    3d74:	e68b      	b.n	3a8e <__aeabi_dsub+0xb2>
    3d76:	4664      	mov	r4, ip
    3d78:	4667      	mov	r7, ip
    3d7a:	432c      	orrs	r4, r5
    3d7c:	d000      	beq.n	3d80 <__aeabi_dsub+0x3a4>
    3d7e:	e68b      	b.n	3a98 <__aeabi_dsub+0xbc>
    3d80:	2500      	movs	r5, #0
    3d82:	2600      	movs	r6, #0
    3d84:	2700      	movs	r7, #0
    3d86:	e6ea      	b.n	3b5e <__aeabi_dsub+0x182>
    3d88:	001e      	movs	r6, r3
    3d8a:	e6ad      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3d8c:	2b1f      	cmp	r3, #31
    3d8e:	dc60      	bgt.n	3e52 <__aeabi_dsub+0x476>
    3d90:	2720      	movs	r7, #32
    3d92:	1af8      	subs	r0, r7, r3
    3d94:	000f      	movs	r7, r1
    3d96:	4684      	mov	ip, r0
    3d98:	4087      	lsls	r7, r0
    3d9a:	0010      	movs	r0, r2
    3d9c:	40d8      	lsrs	r0, r3
    3d9e:	4307      	orrs	r7, r0
    3da0:	4660      	mov	r0, ip
    3da2:	4082      	lsls	r2, r0
    3da4:	1e50      	subs	r0, r2, #1
    3da6:	4182      	sbcs	r2, r0
    3da8:	40d9      	lsrs	r1, r3
    3daa:	4317      	orrs	r7, r2
    3dac:	e6f5      	b.n	3b9a <__aeabi_dsub+0x1be>
    3dae:	0026      	movs	r6, r4
    3db0:	4650      	mov	r0, sl
    3db2:	4306      	orrs	r6, r0
    3db4:	d005      	beq.n	3dc2 <__aeabi_dsub+0x3e6>
    3db6:	43ed      	mvns	r5, r5
    3db8:	2d00      	cmp	r5, #0
    3dba:	d0d3      	beq.n	3d64 <__aeabi_dsub+0x388>
    3dbc:	4e90      	ldr	r6, [pc, #576]	; (4000 <__aeabi_dsub+0x624>)
    3dbe:	45b4      	cmp	ip, r6
    3dc0:	d1bd      	bne.n	3d3e <__aeabi_dsub+0x362>
    3dc2:	000c      	movs	r4, r1
    3dc4:	0017      	movs	r7, r2
    3dc6:	4666      	mov	r6, ip
    3dc8:	4698      	mov	r8, r3
    3dca:	e68d      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3dcc:	488c      	ldr	r0, [pc, #560]	; (4000 <__aeabi_dsub+0x624>)
    3dce:	4283      	cmp	r3, r0
    3dd0:	d00b      	beq.n	3dea <__aeabi_dsub+0x40e>
    3dd2:	4663      	mov	r3, ip
    3dd4:	e6d9      	b.n	3b8a <__aeabi_dsub+0x1ae>
    3dd6:	2d00      	cmp	r5, #0
    3dd8:	d000      	beq.n	3ddc <__aeabi_dsub+0x400>
    3dda:	e096      	b.n	3f0a <__aeabi_dsub+0x52e>
    3ddc:	0008      	movs	r0, r1
    3dde:	4310      	orrs	r0, r2
    3de0:	d100      	bne.n	3de4 <__aeabi_dsub+0x408>
    3de2:	e0e2      	b.n	3faa <__aeabi_dsub+0x5ce>
    3de4:	000c      	movs	r4, r1
    3de6:	0017      	movs	r7, r2
    3de8:	4698      	mov	r8, r3
    3dea:	4e85      	ldr	r6, [pc, #532]	; (4000 <__aeabi_dsub+0x624>)
    3dec:	e67c      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3dee:	2500      	movs	r5, #0
    3df0:	e780      	b.n	3cf4 <__aeabi_dsub+0x318>
    3df2:	2100      	movs	r1, #0
    3df4:	e78e      	b.n	3d14 <__aeabi_dsub+0x338>
    3df6:	0023      	movs	r3, r4
    3df8:	4650      	mov	r0, sl
    3dfa:	4303      	orrs	r3, r0
    3dfc:	2e00      	cmp	r6, #0
    3dfe:	d000      	beq.n	3e02 <__aeabi_dsub+0x426>
    3e00:	e0a8      	b.n	3f54 <__aeabi_dsub+0x578>
    3e02:	2b00      	cmp	r3, #0
    3e04:	d100      	bne.n	3e08 <__aeabi_dsub+0x42c>
    3e06:	e0de      	b.n	3fc6 <__aeabi_dsub+0x5ea>
    3e08:	000b      	movs	r3, r1
    3e0a:	4313      	orrs	r3, r2
    3e0c:	d100      	bne.n	3e10 <__aeabi_dsub+0x434>
    3e0e:	e66b      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3e10:	4452      	add	r2, sl
    3e12:	4552      	cmp	r2, sl
    3e14:	4180      	sbcs	r0, r0
    3e16:	1864      	adds	r4, r4, r1
    3e18:	4240      	negs	r0, r0
    3e1a:	1824      	adds	r4, r4, r0
    3e1c:	0017      	movs	r7, r2
    3e1e:	0223      	lsls	r3, r4, #8
    3e20:	d400      	bmi.n	3e24 <__aeabi_dsub+0x448>
    3e22:	e6fd      	b.n	3c20 <__aeabi_dsub+0x244>
    3e24:	4b77      	ldr	r3, [pc, #476]	; (4004 <__aeabi_dsub+0x628>)
    3e26:	4666      	mov	r6, ip
    3e28:	401c      	ands	r4, r3
    3e2a:	e65d      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3e2c:	0025      	movs	r5, r4
    3e2e:	4650      	mov	r0, sl
    3e30:	4305      	orrs	r5, r0
    3e32:	2e00      	cmp	r6, #0
    3e34:	d1cf      	bne.n	3dd6 <__aeabi_dsub+0x3fa>
    3e36:	2d00      	cmp	r5, #0
    3e38:	d14f      	bne.n	3eda <__aeabi_dsub+0x4fe>
    3e3a:	000c      	movs	r4, r1
    3e3c:	4314      	orrs	r4, r2
    3e3e:	d100      	bne.n	3e42 <__aeabi_dsub+0x466>
    3e40:	e0a0      	b.n	3f84 <__aeabi_dsub+0x5a8>
    3e42:	000c      	movs	r4, r1
    3e44:	0017      	movs	r7, r2
    3e46:	4698      	mov	r8, r3
    3e48:	e64e      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3e4a:	4666      	mov	r6, ip
    3e4c:	2400      	movs	r4, #0
    3e4e:	2700      	movs	r7, #0
    3e50:	e685      	b.n	3b5e <__aeabi_dsub+0x182>
    3e52:	001f      	movs	r7, r3
    3e54:	0008      	movs	r0, r1
    3e56:	3f20      	subs	r7, #32
    3e58:	40f8      	lsrs	r0, r7
    3e5a:	0007      	movs	r7, r0
    3e5c:	2b20      	cmp	r3, #32
    3e5e:	d100      	bne.n	3e62 <__aeabi_dsub+0x486>
    3e60:	e08e      	b.n	3f80 <__aeabi_dsub+0x5a4>
    3e62:	2040      	movs	r0, #64	; 0x40
    3e64:	1ac3      	subs	r3, r0, r3
    3e66:	4099      	lsls	r1, r3
    3e68:	430a      	orrs	r2, r1
    3e6a:	1e51      	subs	r1, r2, #1
    3e6c:	418a      	sbcs	r2, r1
    3e6e:	2100      	movs	r1, #0
    3e70:	4317      	orrs	r7, r2
    3e72:	e692      	b.n	3b9a <__aeabi_dsub+0x1be>
    3e74:	2e00      	cmp	r6, #0
    3e76:	d114      	bne.n	3ea2 <__aeabi_dsub+0x4c6>
    3e78:	0026      	movs	r6, r4
    3e7a:	4650      	mov	r0, sl
    3e7c:	4306      	orrs	r6, r0
    3e7e:	d062      	beq.n	3f46 <__aeabi_dsub+0x56a>
    3e80:	43db      	mvns	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d15c      	bne.n	3f40 <__aeabi_dsub+0x564>
    3e86:	1887      	adds	r7, r0, r2
    3e88:	4297      	cmp	r7, r2
    3e8a:	4192      	sbcs	r2, r2
    3e8c:	1864      	adds	r4, r4, r1
    3e8e:	4252      	negs	r2, r2
    3e90:	18a4      	adds	r4, r4, r2
    3e92:	4666      	mov	r6, ip
    3e94:	e687      	b.n	3ba6 <__aeabi_dsub+0x1ca>
    3e96:	4650      	mov	r0, sl
    3e98:	4320      	orrs	r0, r4
    3e9a:	1e44      	subs	r4, r0, #1
    3e9c:	41a0      	sbcs	r0, r4
    3e9e:	2400      	movs	r4, #0
    3ea0:	e760      	b.n	3d64 <__aeabi_dsub+0x388>
    3ea2:	4e57      	ldr	r6, [pc, #348]	; (4000 <__aeabi_dsub+0x624>)
    3ea4:	45b4      	cmp	ip, r6
    3ea6:	d04e      	beq.n	3f46 <__aeabi_dsub+0x56a>
    3ea8:	2680      	movs	r6, #128	; 0x80
    3eaa:	0436      	lsls	r6, r6, #16
    3eac:	425b      	negs	r3, r3
    3eae:	4334      	orrs	r4, r6
    3eb0:	2b38      	cmp	r3, #56	; 0x38
    3eb2:	dd00      	ble.n	3eb6 <__aeabi_dsub+0x4da>
    3eb4:	e07f      	b.n	3fb6 <__aeabi_dsub+0x5da>
    3eb6:	2b1f      	cmp	r3, #31
    3eb8:	dd00      	ble.n	3ebc <__aeabi_dsub+0x4e0>
    3eba:	e08b      	b.n	3fd4 <__aeabi_dsub+0x5f8>
    3ebc:	2620      	movs	r6, #32
    3ebe:	0027      	movs	r7, r4
    3ec0:	4650      	mov	r0, sl
    3ec2:	1af6      	subs	r6, r6, r3
    3ec4:	40b7      	lsls	r7, r6
    3ec6:	40d8      	lsrs	r0, r3
    3ec8:	4307      	orrs	r7, r0
    3eca:	4650      	mov	r0, sl
    3ecc:	40b0      	lsls	r0, r6
    3ece:	1e46      	subs	r6, r0, #1
    3ed0:	41b0      	sbcs	r0, r6
    3ed2:	4307      	orrs	r7, r0
    3ed4:	40dc      	lsrs	r4, r3
    3ed6:	18bf      	adds	r7, r7, r2
    3ed8:	e7d6      	b.n	3e88 <__aeabi_dsub+0x4ac>
    3eda:	000d      	movs	r5, r1
    3edc:	4315      	orrs	r5, r2
    3ede:	d100      	bne.n	3ee2 <__aeabi_dsub+0x506>
    3ee0:	e602      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3ee2:	4650      	mov	r0, sl
    3ee4:	1a80      	subs	r0, r0, r2
    3ee6:	4582      	cmp	sl, r0
    3ee8:	41bf      	sbcs	r7, r7
    3eea:	1a65      	subs	r5, r4, r1
    3eec:	427f      	negs	r7, r7
    3eee:	1bed      	subs	r5, r5, r7
    3ef0:	4684      	mov	ip, r0
    3ef2:	0228      	lsls	r0, r5, #8
    3ef4:	d400      	bmi.n	3ef8 <__aeabi_dsub+0x51c>
    3ef6:	e68d      	b.n	3c14 <__aeabi_dsub+0x238>
    3ef8:	4650      	mov	r0, sl
    3efa:	1a17      	subs	r7, r2, r0
    3efc:	42ba      	cmp	r2, r7
    3efe:	4192      	sbcs	r2, r2
    3f00:	1b0c      	subs	r4, r1, r4
    3f02:	4252      	negs	r2, r2
    3f04:	1aa4      	subs	r4, r4, r2
    3f06:	4698      	mov	r8, r3
    3f08:	e5ee      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3f0a:	000d      	movs	r5, r1
    3f0c:	4315      	orrs	r5, r2
    3f0e:	d100      	bne.n	3f12 <__aeabi_dsub+0x536>
    3f10:	e76b      	b.n	3dea <__aeabi_dsub+0x40e>
    3f12:	4650      	mov	r0, sl
    3f14:	0767      	lsls	r7, r4, #29
    3f16:	08c0      	lsrs	r0, r0, #3
    3f18:	4307      	orrs	r7, r0
    3f1a:	2080      	movs	r0, #128	; 0x80
    3f1c:	08e4      	lsrs	r4, r4, #3
    3f1e:	0300      	lsls	r0, r0, #12
    3f20:	4204      	tst	r4, r0
    3f22:	d007      	beq.n	3f34 <__aeabi_dsub+0x558>
    3f24:	08cd      	lsrs	r5, r1, #3
    3f26:	4205      	tst	r5, r0
    3f28:	d104      	bne.n	3f34 <__aeabi_dsub+0x558>
    3f2a:	002c      	movs	r4, r5
    3f2c:	4698      	mov	r8, r3
    3f2e:	08d7      	lsrs	r7, r2, #3
    3f30:	0749      	lsls	r1, r1, #29
    3f32:	430f      	orrs	r7, r1
    3f34:	0f7b      	lsrs	r3, r7, #29
    3f36:	00e4      	lsls	r4, r4, #3
    3f38:	431c      	orrs	r4, r3
    3f3a:	00ff      	lsls	r7, r7, #3
    3f3c:	4e30      	ldr	r6, [pc, #192]	; (4000 <__aeabi_dsub+0x624>)
    3f3e:	e5d3      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3f40:	4e2f      	ldr	r6, [pc, #188]	; (4000 <__aeabi_dsub+0x624>)
    3f42:	45b4      	cmp	ip, r6
    3f44:	d1b4      	bne.n	3eb0 <__aeabi_dsub+0x4d4>
    3f46:	000c      	movs	r4, r1
    3f48:	0017      	movs	r7, r2
    3f4a:	4666      	mov	r6, ip
    3f4c:	e5cc      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3f4e:	2700      	movs	r7, #0
    3f50:	2400      	movs	r4, #0
    3f52:	e5e8      	b.n	3b26 <__aeabi_dsub+0x14a>
    3f54:	2b00      	cmp	r3, #0
    3f56:	d039      	beq.n	3fcc <__aeabi_dsub+0x5f0>
    3f58:	000b      	movs	r3, r1
    3f5a:	4313      	orrs	r3, r2
    3f5c:	d100      	bne.n	3f60 <__aeabi_dsub+0x584>
    3f5e:	e744      	b.n	3dea <__aeabi_dsub+0x40e>
    3f60:	08c0      	lsrs	r0, r0, #3
    3f62:	0767      	lsls	r7, r4, #29
    3f64:	4307      	orrs	r7, r0
    3f66:	2080      	movs	r0, #128	; 0x80
    3f68:	08e4      	lsrs	r4, r4, #3
    3f6a:	0300      	lsls	r0, r0, #12
    3f6c:	4204      	tst	r4, r0
    3f6e:	d0e1      	beq.n	3f34 <__aeabi_dsub+0x558>
    3f70:	08cb      	lsrs	r3, r1, #3
    3f72:	4203      	tst	r3, r0
    3f74:	d1de      	bne.n	3f34 <__aeabi_dsub+0x558>
    3f76:	08d7      	lsrs	r7, r2, #3
    3f78:	0749      	lsls	r1, r1, #29
    3f7a:	430f      	orrs	r7, r1
    3f7c:	001c      	movs	r4, r3
    3f7e:	e7d9      	b.n	3f34 <__aeabi_dsub+0x558>
    3f80:	2100      	movs	r1, #0
    3f82:	e771      	b.n	3e68 <__aeabi_dsub+0x48c>
    3f84:	2500      	movs	r5, #0
    3f86:	2700      	movs	r7, #0
    3f88:	e5e9      	b.n	3b5e <__aeabi_dsub+0x182>
    3f8a:	002e      	movs	r6, r5
    3f8c:	0027      	movs	r7, r4
    3f8e:	3e20      	subs	r6, #32
    3f90:	40f7      	lsrs	r7, r6
    3f92:	2d20      	cmp	r5, #32
    3f94:	d02f      	beq.n	3ff6 <__aeabi_dsub+0x61a>
    3f96:	2640      	movs	r6, #64	; 0x40
    3f98:	1b75      	subs	r5, r6, r5
    3f9a:	40ac      	lsls	r4, r5
    3f9c:	4650      	mov	r0, sl
    3f9e:	4320      	orrs	r0, r4
    3fa0:	1e44      	subs	r4, r0, #1
    3fa2:	41a0      	sbcs	r0, r4
    3fa4:	2400      	movs	r4, #0
    3fa6:	4338      	orrs	r0, r7
    3fa8:	e6dc      	b.n	3d64 <__aeabi_dsub+0x388>
    3faa:	2480      	movs	r4, #128	; 0x80
    3fac:	2500      	movs	r5, #0
    3fae:	0324      	lsls	r4, r4, #12
    3fb0:	4e13      	ldr	r6, [pc, #76]	; (4000 <__aeabi_dsub+0x624>)
    3fb2:	2700      	movs	r7, #0
    3fb4:	e5d3      	b.n	3b5e <__aeabi_dsub+0x182>
    3fb6:	4650      	mov	r0, sl
    3fb8:	4320      	orrs	r0, r4
    3fba:	0007      	movs	r7, r0
    3fbc:	1e78      	subs	r0, r7, #1
    3fbe:	4187      	sbcs	r7, r0
    3fc0:	2400      	movs	r4, #0
    3fc2:	18bf      	adds	r7, r7, r2
    3fc4:	e760      	b.n	3e88 <__aeabi_dsub+0x4ac>
    3fc6:	000c      	movs	r4, r1
    3fc8:	0017      	movs	r7, r2
    3fca:	e58d      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3fcc:	000c      	movs	r4, r1
    3fce:	0017      	movs	r7, r2
    3fd0:	4e0b      	ldr	r6, [pc, #44]	; (4000 <__aeabi_dsub+0x624>)
    3fd2:	e589      	b.n	3ae8 <__aeabi_dsub+0x10c>
    3fd4:	001e      	movs	r6, r3
    3fd6:	0027      	movs	r7, r4
    3fd8:	3e20      	subs	r6, #32
    3fda:	40f7      	lsrs	r7, r6
    3fdc:	2b20      	cmp	r3, #32
    3fde:	d00c      	beq.n	3ffa <__aeabi_dsub+0x61e>
    3fe0:	2640      	movs	r6, #64	; 0x40
    3fe2:	1af3      	subs	r3, r6, r3
    3fe4:	409c      	lsls	r4, r3
    3fe6:	4650      	mov	r0, sl
    3fe8:	4320      	orrs	r0, r4
    3fea:	1e44      	subs	r4, r0, #1
    3fec:	41a0      	sbcs	r0, r4
    3fee:	4307      	orrs	r7, r0
    3ff0:	2400      	movs	r4, #0
    3ff2:	18bf      	adds	r7, r7, r2
    3ff4:	e748      	b.n	3e88 <__aeabi_dsub+0x4ac>
    3ff6:	2400      	movs	r4, #0
    3ff8:	e7d0      	b.n	3f9c <__aeabi_dsub+0x5c0>
    3ffa:	2400      	movs	r4, #0
    3ffc:	e7f3      	b.n	3fe6 <__aeabi_dsub+0x60a>
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	000007ff 	.word	0x000007ff
    4004:	ff7fffff 	.word	0xff7fffff

00004008 <__aeabi_ui2d>:
    4008:	b510      	push	{r4, lr}
    400a:	1e04      	subs	r4, r0, #0
    400c:	d028      	beq.n	4060 <__aeabi_ui2d+0x58>
    400e:	f000 f8bd 	bl	418c <__clzsi2>
    4012:	4b15      	ldr	r3, [pc, #84]	; (4068 <__aeabi_ui2d+0x60>)
    4014:	4a15      	ldr	r2, [pc, #84]	; (406c <__aeabi_ui2d+0x64>)
    4016:	1a1b      	subs	r3, r3, r0
    4018:	1ad2      	subs	r2, r2, r3
    401a:	2a1f      	cmp	r2, #31
    401c:	dd15      	ble.n	404a <__aeabi_ui2d+0x42>
    401e:	4a14      	ldr	r2, [pc, #80]	; (4070 <__aeabi_ui2d+0x68>)
    4020:	1ad2      	subs	r2, r2, r3
    4022:	4094      	lsls	r4, r2
    4024:	2200      	movs	r2, #0
    4026:	0324      	lsls	r4, r4, #12
    4028:	055b      	lsls	r3, r3, #21
    402a:	0b24      	lsrs	r4, r4, #12
    402c:	0d5b      	lsrs	r3, r3, #21
    402e:	2100      	movs	r1, #0
    4030:	0010      	movs	r0, r2
    4032:	0324      	lsls	r4, r4, #12
    4034:	0d0a      	lsrs	r2, r1, #20
    4036:	0b24      	lsrs	r4, r4, #12
    4038:	0512      	lsls	r2, r2, #20
    403a:	4322      	orrs	r2, r4
    403c:	4c0d      	ldr	r4, [pc, #52]	; (4074 <__aeabi_ui2d+0x6c>)
    403e:	051b      	lsls	r3, r3, #20
    4040:	4022      	ands	r2, r4
    4042:	4313      	orrs	r3, r2
    4044:	005b      	lsls	r3, r3, #1
    4046:	0859      	lsrs	r1, r3, #1
    4048:	bd10      	pop	{r4, pc}
    404a:	0021      	movs	r1, r4
    404c:	4091      	lsls	r1, r2
    404e:	000a      	movs	r2, r1
    4050:	210b      	movs	r1, #11
    4052:	1a08      	subs	r0, r1, r0
    4054:	40c4      	lsrs	r4, r0
    4056:	055b      	lsls	r3, r3, #21
    4058:	0324      	lsls	r4, r4, #12
    405a:	0b24      	lsrs	r4, r4, #12
    405c:	0d5b      	lsrs	r3, r3, #21
    405e:	e7e6      	b.n	402e <__aeabi_ui2d+0x26>
    4060:	2300      	movs	r3, #0
    4062:	2400      	movs	r4, #0
    4064:	2200      	movs	r2, #0
    4066:	e7e2      	b.n	402e <__aeabi_ui2d+0x26>
    4068:	0000041e 	.word	0x0000041e
    406c:	00000433 	.word	0x00000433
    4070:	00000413 	.word	0x00000413
    4074:	800fffff 	.word	0x800fffff

00004078 <__aeabi_d2f>:
    4078:	b5f0      	push	{r4, r5, r6, r7, lr}
    407a:	004c      	lsls	r4, r1, #1
    407c:	0d64      	lsrs	r4, r4, #21
    407e:	030b      	lsls	r3, r1, #12
    4080:	1c62      	adds	r2, r4, #1
    4082:	0f45      	lsrs	r5, r0, #29
    4084:	0a5b      	lsrs	r3, r3, #9
    4086:	0552      	lsls	r2, r2, #21
    4088:	432b      	orrs	r3, r5
    408a:	0fc9      	lsrs	r1, r1, #31
    408c:	00c5      	lsls	r5, r0, #3
    408e:	0d52      	lsrs	r2, r2, #21
    4090:	2a01      	cmp	r2, #1
    4092:	dd28      	ble.n	40e6 <__aeabi_d2f+0x6e>
    4094:	4a3a      	ldr	r2, [pc, #232]	; (4180 <__aeabi_d2f+0x108>)
    4096:	18a6      	adds	r6, r4, r2
    4098:	2efe      	cmp	r6, #254	; 0xfe
    409a:	dc1b      	bgt.n	40d4 <__aeabi_d2f+0x5c>
    409c:	2e00      	cmp	r6, #0
    409e:	dd3e      	ble.n	411e <__aeabi_d2f+0xa6>
    40a0:	0180      	lsls	r0, r0, #6
    40a2:	0002      	movs	r2, r0
    40a4:	1e50      	subs	r0, r2, #1
    40a6:	4182      	sbcs	r2, r0
    40a8:	0f6d      	lsrs	r5, r5, #29
    40aa:	432a      	orrs	r2, r5
    40ac:	00db      	lsls	r3, r3, #3
    40ae:	4313      	orrs	r3, r2
    40b0:	075a      	lsls	r2, r3, #29
    40b2:	d004      	beq.n	40be <__aeabi_d2f+0x46>
    40b4:	220f      	movs	r2, #15
    40b6:	401a      	ands	r2, r3
    40b8:	2a04      	cmp	r2, #4
    40ba:	d000      	beq.n	40be <__aeabi_d2f+0x46>
    40bc:	3304      	adds	r3, #4
    40be:	2280      	movs	r2, #128	; 0x80
    40c0:	04d2      	lsls	r2, r2, #19
    40c2:	401a      	ands	r2, r3
    40c4:	d05a      	beq.n	417c <__aeabi_d2f+0x104>
    40c6:	3601      	adds	r6, #1
    40c8:	2eff      	cmp	r6, #255	; 0xff
    40ca:	d003      	beq.n	40d4 <__aeabi_d2f+0x5c>
    40cc:	019b      	lsls	r3, r3, #6
    40ce:	0a5b      	lsrs	r3, r3, #9
    40d0:	b2f4      	uxtb	r4, r6
    40d2:	e001      	b.n	40d8 <__aeabi_d2f+0x60>
    40d4:	24ff      	movs	r4, #255	; 0xff
    40d6:	2300      	movs	r3, #0
    40d8:	0258      	lsls	r0, r3, #9
    40da:	05e4      	lsls	r4, r4, #23
    40dc:	0a40      	lsrs	r0, r0, #9
    40de:	07c9      	lsls	r1, r1, #31
    40e0:	4320      	orrs	r0, r4
    40e2:	4308      	orrs	r0, r1
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e6:	2c00      	cmp	r4, #0
    40e8:	d007      	beq.n	40fa <__aeabi_d2f+0x82>
    40ea:	431d      	orrs	r5, r3
    40ec:	d0f2      	beq.n	40d4 <__aeabi_d2f+0x5c>
    40ee:	2080      	movs	r0, #128	; 0x80
    40f0:	00db      	lsls	r3, r3, #3
    40f2:	0480      	lsls	r0, r0, #18
    40f4:	4303      	orrs	r3, r0
    40f6:	26ff      	movs	r6, #255	; 0xff
    40f8:	e7da      	b.n	40b0 <__aeabi_d2f+0x38>
    40fa:	432b      	orrs	r3, r5
    40fc:	d003      	beq.n	4106 <__aeabi_d2f+0x8e>
    40fe:	2305      	movs	r3, #5
    4100:	08db      	lsrs	r3, r3, #3
    4102:	2cff      	cmp	r4, #255	; 0xff
    4104:	d003      	beq.n	410e <__aeabi_d2f+0x96>
    4106:	025b      	lsls	r3, r3, #9
    4108:	0a5b      	lsrs	r3, r3, #9
    410a:	b2e4      	uxtb	r4, r4
    410c:	e7e4      	b.n	40d8 <__aeabi_d2f+0x60>
    410e:	2b00      	cmp	r3, #0
    4110:	d032      	beq.n	4178 <__aeabi_d2f+0x100>
    4112:	2080      	movs	r0, #128	; 0x80
    4114:	03c0      	lsls	r0, r0, #15
    4116:	4303      	orrs	r3, r0
    4118:	025b      	lsls	r3, r3, #9
    411a:	0a5b      	lsrs	r3, r3, #9
    411c:	e7dc      	b.n	40d8 <__aeabi_d2f+0x60>
    411e:	0032      	movs	r2, r6
    4120:	3217      	adds	r2, #23
    4122:	db14      	blt.n	414e <__aeabi_d2f+0xd6>
    4124:	2280      	movs	r2, #128	; 0x80
    4126:	271e      	movs	r7, #30
    4128:	0412      	lsls	r2, r2, #16
    412a:	4313      	orrs	r3, r2
    412c:	1bbf      	subs	r7, r7, r6
    412e:	2f1f      	cmp	r7, #31
    4130:	dc0f      	bgt.n	4152 <__aeabi_d2f+0xda>
    4132:	4a14      	ldr	r2, [pc, #80]	; (4184 <__aeabi_d2f+0x10c>)
    4134:	4694      	mov	ip, r2
    4136:	4464      	add	r4, ip
    4138:	002a      	movs	r2, r5
    413a:	40a5      	lsls	r5, r4
    413c:	002e      	movs	r6, r5
    413e:	40a3      	lsls	r3, r4
    4140:	1e75      	subs	r5, r6, #1
    4142:	41ae      	sbcs	r6, r5
    4144:	40fa      	lsrs	r2, r7
    4146:	4333      	orrs	r3, r6
    4148:	4313      	orrs	r3, r2
    414a:	2600      	movs	r6, #0
    414c:	e7b0      	b.n	40b0 <__aeabi_d2f+0x38>
    414e:	2400      	movs	r4, #0
    4150:	e7d5      	b.n	40fe <__aeabi_d2f+0x86>
    4152:	2202      	movs	r2, #2
    4154:	4252      	negs	r2, r2
    4156:	1b96      	subs	r6, r2, r6
    4158:	001a      	movs	r2, r3
    415a:	40f2      	lsrs	r2, r6
    415c:	2f20      	cmp	r7, #32
    415e:	d009      	beq.n	4174 <__aeabi_d2f+0xfc>
    4160:	4809      	ldr	r0, [pc, #36]	; (4188 <__aeabi_d2f+0x110>)
    4162:	4684      	mov	ip, r0
    4164:	4464      	add	r4, ip
    4166:	40a3      	lsls	r3, r4
    4168:	432b      	orrs	r3, r5
    416a:	1e5d      	subs	r5, r3, #1
    416c:	41ab      	sbcs	r3, r5
    416e:	2600      	movs	r6, #0
    4170:	4313      	orrs	r3, r2
    4172:	e79d      	b.n	40b0 <__aeabi_d2f+0x38>
    4174:	2300      	movs	r3, #0
    4176:	e7f7      	b.n	4168 <__aeabi_d2f+0xf0>
    4178:	2300      	movs	r3, #0
    417a:	e7ad      	b.n	40d8 <__aeabi_d2f+0x60>
    417c:	0034      	movs	r4, r6
    417e:	e7bf      	b.n	4100 <__aeabi_d2f+0x88>
    4180:	fffffc80 	.word	0xfffffc80
    4184:	fffffc82 	.word	0xfffffc82
    4188:	fffffca2 	.word	0xfffffca2

0000418c <__clzsi2>:
    418c:	211c      	movs	r1, #28
    418e:	2301      	movs	r3, #1
    4190:	041b      	lsls	r3, r3, #16
    4192:	4298      	cmp	r0, r3
    4194:	d301      	bcc.n	419a <__clzsi2+0xe>
    4196:	0c00      	lsrs	r0, r0, #16
    4198:	3910      	subs	r1, #16
    419a:	0a1b      	lsrs	r3, r3, #8
    419c:	4298      	cmp	r0, r3
    419e:	d301      	bcc.n	41a4 <__clzsi2+0x18>
    41a0:	0a00      	lsrs	r0, r0, #8
    41a2:	3908      	subs	r1, #8
    41a4:	091b      	lsrs	r3, r3, #4
    41a6:	4298      	cmp	r0, r3
    41a8:	d301      	bcc.n	41ae <__clzsi2+0x22>
    41aa:	0900      	lsrs	r0, r0, #4
    41ac:	3904      	subs	r1, #4
    41ae:	a202      	add	r2, pc, #8	; (adr r2, 41b8 <__clzsi2+0x2c>)
    41b0:	5c10      	ldrb	r0, [r2, r0]
    41b2:	1840      	adds	r0, r0, r1
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	02020304 	.word	0x02020304
    41bc:	01010101 	.word	0x01010101
	...

000041c8 <__libc_init_array>:
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	2600      	movs	r6, #0
    41cc:	4d0c      	ldr	r5, [pc, #48]	; (4200 <__libc_init_array+0x38>)
    41ce:	4c0d      	ldr	r4, [pc, #52]	; (4204 <__libc_init_array+0x3c>)
    41d0:	1b64      	subs	r4, r4, r5
    41d2:	10a4      	asrs	r4, r4, #2
    41d4:	42a6      	cmp	r6, r4
    41d6:	d109      	bne.n	41ec <__libc_init_array+0x24>
    41d8:	2600      	movs	r6, #0
    41da:	f001 fa87 	bl	56ec <_init>
    41de:	4d0a      	ldr	r5, [pc, #40]	; (4208 <__libc_init_array+0x40>)
    41e0:	4c0a      	ldr	r4, [pc, #40]	; (420c <__libc_init_array+0x44>)
    41e2:	1b64      	subs	r4, r4, r5
    41e4:	10a4      	asrs	r4, r4, #2
    41e6:	42a6      	cmp	r6, r4
    41e8:	d105      	bne.n	41f6 <__libc_init_array+0x2e>
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	00b3      	lsls	r3, r6, #2
    41ee:	58eb      	ldr	r3, [r5, r3]
    41f0:	4798      	blx	r3
    41f2:	3601      	adds	r6, #1
    41f4:	e7ee      	b.n	41d4 <__libc_init_array+0xc>
    41f6:	00b3      	lsls	r3, r6, #2
    41f8:	58eb      	ldr	r3, [r5, r3]
    41fa:	4798      	blx	r3
    41fc:	3601      	adds	r6, #1
    41fe:	e7f2      	b.n	41e6 <__libc_init_array+0x1e>
    4200:	000056f8 	.word	0x000056f8
    4204:	000056f8 	.word	0x000056f8
    4208:	000056f8 	.word	0x000056f8
    420c:	000056fc 	.word	0x000056fc

00004210 <malloc>:
    4210:	b510      	push	{r4, lr}
    4212:	4b03      	ldr	r3, [pc, #12]	; (4220 <malloc+0x10>)
    4214:	0001      	movs	r1, r0
    4216:	6818      	ldr	r0, [r3, #0]
    4218:	f000 f860 	bl	42dc <_malloc_r>
    421c:	bd10      	pop	{r4, pc}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	20000004 	.word	0x20000004

00004224 <memcpy>:
    4224:	2300      	movs	r3, #0
    4226:	b510      	push	{r4, lr}
    4228:	429a      	cmp	r2, r3
    422a:	d100      	bne.n	422e <memcpy+0xa>
    422c:	bd10      	pop	{r4, pc}
    422e:	5ccc      	ldrb	r4, [r1, r3]
    4230:	54c4      	strb	r4, [r0, r3]
    4232:	3301      	adds	r3, #1
    4234:	e7f8      	b.n	4228 <memcpy+0x4>

00004236 <memset>:
    4236:	0003      	movs	r3, r0
    4238:	1882      	adds	r2, r0, r2
    423a:	4293      	cmp	r3, r2
    423c:	d100      	bne.n	4240 <memset+0xa>
    423e:	4770      	bx	lr
    4240:	7019      	strb	r1, [r3, #0]
    4242:	3301      	adds	r3, #1
    4244:	e7f9      	b.n	423a <memset+0x4>
	...

00004248 <_free_r>:
    4248:	b570      	push	{r4, r5, r6, lr}
    424a:	0005      	movs	r5, r0
    424c:	2900      	cmp	r1, #0
    424e:	d010      	beq.n	4272 <_free_r+0x2a>
    4250:	1f0c      	subs	r4, r1, #4
    4252:	6823      	ldr	r3, [r4, #0]
    4254:	2b00      	cmp	r3, #0
    4256:	da00      	bge.n	425a <_free_r+0x12>
    4258:	18e4      	adds	r4, r4, r3
    425a:	0028      	movs	r0, r5
    425c:	f000 fcb2 	bl	4bc4 <__malloc_lock>
    4260:	4a1d      	ldr	r2, [pc, #116]	; (42d8 <_free_r+0x90>)
    4262:	6813      	ldr	r3, [r2, #0]
    4264:	2b00      	cmp	r3, #0
    4266:	d105      	bne.n	4274 <_free_r+0x2c>
    4268:	6063      	str	r3, [r4, #4]
    426a:	6014      	str	r4, [r2, #0]
    426c:	0028      	movs	r0, r5
    426e:	f000 fcaa 	bl	4bc6 <__malloc_unlock>
    4272:	bd70      	pop	{r4, r5, r6, pc}
    4274:	42a3      	cmp	r3, r4
    4276:	d909      	bls.n	428c <_free_r+0x44>
    4278:	6821      	ldr	r1, [r4, #0]
    427a:	1860      	adds	r0, r4, r1
    427c:	4283      	cmp	r3, r0
    427e:	d1f3      	bne.n	4268 <_free_r+0x20>
    4280:	6818      	ldr	r0, [r3, #0]
    4282:	685b      	ldr	r3, [r3, #4]
    4284:	1841      	adds	r1, r0, r1
    4286:	6021      	str	r1, [r4, #0]
    4288:	e7ee      	b.n	4268 <_free_r+0x20>
    428a:	0013      	movs	r3, r2
    428c:	685a      	ldr	r2, [r3, #4]
    428e:	2a00      	cmp	r2, #0
    4290:	d001      	beq.n	4296 <_free_r+0x4e>
    4292:	42a2      	cmp	r2, r4
    4294:	d9f9      	bls.n	428a <_free_r+0x42>
    4296:	6819      	ldr	r1, [r3, #0]
    4298:	1858      	adds	r0, r3, r1
    429a:	42a0      	cmp	r0, r4
    429c:	d10b      	bne.n	42b6 <_free_r+0x6e>
    429e:	6820      	ldr	r0, [r4, #0]
    42a0:	1809      	adds	r1, r1, r0
    42a2:	1858      	adds	r0, r3, r1
    42a4:	6019      	str	r1, [r3, #0]
    42a6:	4282      	cmp	r2, r0
    42a8:	d1e0      	bne.n	426c <_free_r+0x24>
    42aa:	6810      	ldr	r0, [r2, #0]
    42ac:	6852      	ldr	r2, [r2, #4]
    42ae:	1841      	adds	r1, r0, r1
    42b0:	6019      	str	r1, [r3, #0]
    42b2:	605a      	str	r2, [r3, #4]
    42b4:	e7da      	b.n	426c <_free_r+0x24>
    42b6:	42a0      	cmp	r0, r4
    42b8:	d902      	bls.n	42c0 <_free_r+0x78>
    42ba:	230c      	movs	r3, #12
    42bc:	602b      	str	r3, [r5, #0]
    42be:	e7d5      	b.n	426c <_free_r+0x24>
    42c0:	6821      	ldr	r1, [r4, #0]
    42c2:	1860      	adds	r0, r4, r1
    42c4:	4282      	cmp	r2, r0
    42c6:	d103      	bne.n	42d0 <_free_r+0x88>
    42c8:	6810      	ldr	r0, [r2, #0]
    42ca:	6852      	ldr	r2, [r2, #4]
    42cc:	1841      	adds	r1, r0, r1
    42ce:	6021      	str	r1, [r4, #0]
    42d0:	6062      	str	r2, [r4, #4]
    42d2:	605c      	str	r4, [r3, #4]
    42d4:	e7ca      	b.n	426c <_free_r+0x24>
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	2000019c 	.word	0x2000019c

000042dc <_malloc_r>:
    42dc:	2303      	movs	r3, #3
    42de:	b570      	push	{r4, r5, r6, lr}
    42e0:	1ccd      	adds	r5, r1, #3
    42e2:	439d      	bics	r5, r3
    42e4:	3508      	adds	r5, #8
    42e6:	0006      	movs	r6, r0
    42e8:	2d0c      	cmp	r5, #12
    42ea:	d21e      	bcs.n	432a <_malloc_r+0x4e>
    42ec:	250c      	movs	r5, #12
    42ee:	42a9      	cmp	r1, r5
    42f0:	d81d      	bhi.n	432e <_malloc_r+0x52>
    42f2:	0030      	movs	r0, r6
    42f4:	f000 fc66 	bl	4bc4 <__malloc_lock>
    42f8:	4a25      	ldr	r2, [pc, #148]	; (4390 <_malloc_r+0xb4>)
    42fa:	6814      	ldr	r4, [r2, #0]
    42fc:	0021      	movs	r1, r4
    42fe:	2900      	cmp	r1, #0
    4300:	d119      	bne.n	4336 <_malloc_r+0x5a>
    4302:	4c24      	ldr	r4, [pc, #144]	; (4394 <_malloc_r+0xb8>)
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d103      	bne.n	4312 <_malloc_r+0x36>
    430a:	0030      	movs	r0, r6
    430c:	f000 f8c8 	bl	44a0 <_sbrk_r>
    4310:	6020      	str	r0, [r4, #0]
    4312:	0029      	movs	r1, r5
    4314:	0030      	movs	r0, r6
    4316:	f000 f8c3 	bl	44a0 <_sbrk_r>
    431a:	1c43      	adds	r3, r0, #1
    431c:	d12c      	bne.n	4378 <_malloc_r+0x9c>
    431e:	230c      	movs	r3, #12
    4320:	0030      	movs	r0, r6
    4322:	6033      	str	r3, [r6, #0]
    4324:	f000 fc4f 	bl	4bc6 <__malloc_unlock>
    4328:	e003      	b.n	4332 <_malloc_r+0x56>
    432a:	2d00      	cmp	r5, #0
    432c:	dadf      	bge.n	42ee <_malloc_r+0x12>
    432e:	230c      	movs	r3, #12
    4330:	6033      	str	r3, [r6, #0]
    4332:	2000      	movs	r0, #0
    4334:	bd70      	pop	{r4, r5, r6, pc}
    4336:	680b      	ldr	r3, [r1, #0]
    4338:	1b5b      	subs	r3, r3, r5
    433a:	d41a      	bmi.n	4372 <_malloc_r+0x96>
    433c:	2b0b      	cmp	r3, #11
    433e:	d903      	bls.n	4348 <_malloc_r+0x6c>
    4340:	600b      	str	r3, [r1, #0]
    4342:	18cc      	adds	r4, r1, r3
    4344:	6025      	str	r5, [r4, #0]
    4346:	e003      	b.n	4350 <_malloc_r+0x74>
    4348:	428c      	cmp	r4, r1
    434a:	d10e      	bne.n	436a <_malloc_r+0x8e>
    434c:	6863      	ldr	r3, [r4, #4]
    434e:	6013      	str	r3, [r2, #0]
    4350:	0030      	movs	r0, r6
    4352:	f000 fc38 	bl	4bc6 <__malloc_unlock>
    4356:	0020      	movs	r0, r4
    4358:	2207      	movs	r2, #7
    435a:	300b      	adds	r0, #11
    435c:	1d23      	adds	r3, r4, #4
    435e:	4390      	bics	r0, r2
    4360:	1ac3      	subs	r3, r0, r3
    4362:	d0e7      	beq.n	4334 <_malloc_r+0x58>
    4364:	425a      	negs	r2, r3
    4366:	50e2      	str	r2, [r4, r3]
    4368:	e7e4      	b.n	4334 <_malloc_r+0x58>
    436a:	684b      	ldr	r3, [r1, #4]
    436c:	6063      	str	r3, [r4, #4]
    436e:	000c      	movs	r4, r1
    4370:	e7ee      	b.n	4350 <_malloc_r+0x74>
    4372:	000c      	movs	r4, r1
    4374:	6849      	ldr	r1, [r1, #4]
    4376:	e7c2      	b.n	42fe <_malloc_r+0x22>
    4378:	2303      	movs	r3, #3
    437a:	1cc4      	adds	r4, r0, #3
    437c:	439c      	bics	r4, r3
    437e:	42a0      	cmp	r0, r4
    4380:	d0e0      	beq.n	4344 <_malloc_r+0x68>
    4382:	1a21      	subs	r1, r4, r0
    4384:	0030      	movs	r0, r6
    4386:	f000 f88b 	bl	44a0 <_sbrk_r>
    438a:	1c43      	adds	r3, r0, #1
    438c:	d1da      	bne.n	4344 <_malloc_r+0x68>
    438e:	e7c6      	b.n	431e <_malloc_r+0x42>
    4390:	2000019c 	.word	0x2000019c
    4394:	200001a0 	.word	0x200001a0

00004398 <iprintf>:
    4398:	b40f      	push	{r0, r1, r2, r3}
    439a:	4b0b      	ldr	r3, [pc, #44]	; (43c8 <iprintf+0x30>)
    439c:	b513      	push	{r0, r1, r4, lr}
    439e:	681c      	ldr	r4, [r3, #0]
    43a0:	2c00      	cmp	r4, #0
    43a2:	d005      	beq.n	43b0 <iprintf+0x18>
    43a4:	69a3      	ldr	r3, [r4, #24]
    43a6:	2b00      	cmp	r3, #0
    43a8:	d102      	bne.n	43b0 <iprintf+0x18>
    43aa:	0020      	movs	r0, r4
    43ac:	f000 fb0e 	bl	49cc <__sinit>
    43b0:	ab05      	add	r3, sp, #20
    43b2:	9a04      	ldr	r2, [sp, #16]
    43b4:	68a1      	ldr	r1, [r4, #8]
    43b6:	0020      	movs	r0, r4
    43b8:	9301      	str	r3, [sp, #4]
    43ba:	f000 fc2d 	bl	4c18 <_vfiprintf_r>
    43be:	bc16      	pop	{r1, r2, r4}
    43c0:	bc08      	pop	{r3}
    43c2:	b004      	add	sp, #16
    43c4:	4718      	bx	r3
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	20000004 	.word	0x20000004

000043cc <_puts_r>:
    43cc:	b570      	push	{r4, r5, r6, lr}
    43ce:	0005      	movs	r5, r0
    43d0:	000e      	movs	r6, r1
    43d2:	2800      	cmp	r0, #0
    43d4:	d004      	beq.n	43e0 <_puts_r+0x14>
    43d6:	6983      	ldr	r3, [r0, #24]
    43d8:	2b00      	cmp	r3, #0
    43da:	d101      	bne.n	43e0 <_puts_r+0x14>
    43dc:	f000 faf6 	bl	49cc <__sinit>
    43e0:	69ab      	ldr	r3, [r5, #24]
    43e2:	68ac      	ldr	r4, [r5, #8]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d102      	bne.n	43ee <_puts_r+0x22>
    43e8:	0028      	movs	r0, r5
    43ea:	f000 faef 	bl	49cc <__sinit>
    43ee:	4b24      	ldr	r3, [pc, #144]	; (4480 <_puts_r+0xb4>)
    43f0:	429c      	cmp	r4, r3
    43f2:	d10f      	bne.n	4414 <_puts_r+0x48>
    43f4:	686c      	ldr	r4, [r5, #4]
    43f6:	89a3      	ldrh	r3, [r4, #12]
    43f8:	071b      	lsls	r3, r3, #28
    43fa:	d502      	bpl.n	4402 <_puts_r+0x36>
    43fc:	6923      	ldr	r3, [r4, #16]
    43fe:	2b00      	cmp	r3, #0
    4400:	d120      	bne.n	4444 <_puts_r+0x78>
    4402:	0021      	movs	r1, r4
    4404:	0028      	movs	r0, r5
    4406:	f000 f973 	bl	46f0 <__swsetup_r>
    440a:	2800      	cmp	r0, #0
    440c:	d01a      	beq.n	4444 <_puts_r+0x78>
    440e:	2001      	movs	r0, #1
    4410:	4240      	negs	r0, r0
    4412:	bd70      	pop	{r4, r5, r6, pc}
    4414:	4b1b      	ldr	r3, [pc, #108]	; (4484 <_puts_r+0xb8>)
    4416:	429c      	cmp	r4, r3
    4418:	d101      	bne.n	441e <_puts_r+0x52>
    441a:	68ac      	ldr	r4, [r5, #8]
    441c:	e7eb      	b.n	43f6 <_puts_r+0x2a>
    441e:	4b1a      	ldr	r3, [pc, #104]	; (4488 <_puts_r+0xbc>)
    4420:	429c      	cmp	r4, r3
    4422:	d1e8      	bne.n	43f6 <_puts_r+0x2a>
    4424:	68ec      	ldr	r4, [r5, #12]
    4426:	e7e6      	b.n	43f6 <_puts_r+0x2a>
    4428:	3b01      	subs	r3, #1
    442a:	3601      	adds	r6, #1
    442c:	60a3      	str	r3, [r4, #8]
    442e:	2b00      	cmp	r3, #0
    4430:	da04      	bge.n	443c <_puts_r+0x70>
    4432:	69a2      	ldr	r2, [r4, #24]
    4434:	4293      	cmp	r3, r2
    4436:	db16      	blt.n	4466 <_puts_r+0x9a>
    4438:	290a      	cmp	r1, #10
    443a:	d014      	beq.n	4466 <_puts_r+0x9a>
    443c:	6823      	ldr	r3, [r4, #0]
    443e:	1c5a      	adds	r2, r3, #1
    4440:	6022      	str	r2, [r4, #0]
    4442:	7019      	strb	r1, [r3, #0]
    4444:	7831      	ldrb	r1, [r6, #0]
    4446:	68a3      	ldr	r3, [r4, #8]
    4448:	2900      	cmp	r1, #0
    444a:	d1ed      	bne.n	4428 <_puts_r+0x5c>
    444c:	3b01      	subs	r3, #1
    444e:	60a3      	str	r3, [r4, #8]
    4450:	2b00      	cmp	r3, #0
    4452:	da0f      	bge.n	4474 <_puts_r+0xa8>
    4454:	0022      	movs	r2, r4
    4456:	310a      	adds	r1, #10
    4458:	0028      	movs	r0, r5
    445a:	f000 f8f3 	bl	4644 <__swbuf_r>
    445e:	1c43      	adds	r3, r0, #1
    4460:	d0d5      	beq.n	440e <_puts_r+0x42>
    4462:	200a      	movs	r0, #10
    4464:	e7d5      	b.n	4412 <_puts_r+0x46>
    4466:	0022      	movs	r2, r4
    4468:	0028      	movs	r0, r5
    446a:	f000 f8eb 	bl	4644 <__swbuf_r>
    446e:	1c43      	adds	r3, r0, #1
    4470:	d1e8      	bne.n	4444 <_puts_r+0x78>
    4472:	e7cc      	b.n	440e <_puts_r+0x42>
    4474:	200a      	movs	r0, #10
    4476:	6823      	ldr	r3, [r4, #0]
    4478:	1c5a      	adds	r2, r3, #1
    447a:	6022      	str	r2, [r4, #0]
    447c:	7018      	strb	r0, [r3, #0]
    447e:	e7c8      	b.n	4412 <_puts_r+0x46>
    4480:	00005678 	.word	0x00005678
    4484:	00005698 	.word	0x00005698
    4488:	00005658 	.word	0x00005658

0000448c <puts>:
    448c:	b510      	push	{r4, lr}
    448e:	4b03      	ldr	r3, [pc, #12]	; (449c <puts+0x10>)
    4490:	0001      	movs	r1, r0
    4492:	6818      	ldr	r0, [r3, #0]
    4494:	f7ff ff9a 	bl	43cc <_puts_r>
    4498:	bd10      	pop	{r4, pc}
    449a:	46c0      	nop			; (mov r8, r8)
    449c:	20000004 	.word	0x20000004

000044a0 <_sbrk_r>:
    44a0:	2300      	movs	r3, #0
    44a2:	b570      	push	{r4, r5, r6, lr}
    44a4:	4c06      	ldr	r4, [pc, #24]	; (44c0 <_sbrk_r+0x20>)
    44a6:	0005      	movs	r5, r0
    44a8:	0008      	movs	r0, r1
    44aa:	6023      	str	r3, [r4, #0]
    44ac:	f7fe fdb8 	bl	3020 <_sbrk>
    44b0:	1c43      	adds	r3, r0, #1
    44b2:	d103      	bne.n	44bc <_sbrk_r+0x1c>
    44b4:	6823      	ldr	r3, [r4, #0]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d000      	beq.n	44bc <_sbrk_r+0x1c>
    44ba:	602b      	str	r3, [r5, #0]
    44bc:	bd70      	pop	{r4, r5, r6, pc}
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	200002f8 	.word	0x200002f8

000044c4 <setbuf>:
    44c4:	424a      	negs	r2, r1
    44c6:	414a      	adcs	r2, r1
    44c8:	2380      	movs	r3, #128	; 0x80
    44ca:	b510      	push	{r4, lr}
    44cc:	0052      	lsls	r2, r2, #1
    44ce:	00db      	lsls	r3, r3, #3
    44d0:	f000 f802 	bl	44d8 <setvbuf>
    44d4:	bd10      	pop	{r4, pc}
	...

000044d8 <setvbuf>:
    44d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44da:	001d      	movs	r5, r3
    44dc:	4b4f      	ldr	r3, [pc, #316]	; (461c <setvbuf+0x144>)
    44de:	b085      	sub	sp, #20
    44e0:	681e      	ldr	r6, [r3, #0]
    44e2:	0004      	movs	r4, r0
    44e4:	000f      	movs	r7, r1
    44e6:	9200      	str	r2, [sp, #0]
    44e8:	2e00      	cmp	r6, #0
    44ea:	d005      	beq.n	44f8 <setvbuf+0x20>
    44ec:	69b3      	ldr	r3, [r6, #24]
    44ee:	2b00      	cmp	r3, #0
    44f0:	d102      	bne.n	44f8 <setvbuf+0x20>
    44f2:	0030      	movs	r0, r6
    44f4:	f000 fa6a 	bl	49cc <__sinit>
    44f8:	4b49      	ldr	r3, [pc, #292]	; (4620 <setvbuf+0x148>)
    44fa:	429c      	cmp	r4, r3
    44fc:	d150      	bne.n	45a0 <setvbuf+0xc8>
    44fe:	6874      	ldr	r4, [r6, #4]
    4500:	9b00      	ldr	r3, [sp, #0]
    4502:	2b02      	cmp	r3, #2
    4504:	d005      	beq.n	4512 <setvbuf+0x3a>
    4506:	2b01      	cmp	r3, #1
    4508:	d900      	bls.n	450c <setvbuf+0x34>
    450a:	e084      	b.n	4616 <setvbuf+0x13e>
    450c:	2d00      	cmp	r5, #0
    450e:	da00      	bge.n	4512 <setvbuf+0x3a>
    4510:	e081      	b.n	4616 <setvbuf+0x13e>
    4512:	0021      	movs	r1, r4
    4514:	0030      	movs	r0, r6
    4516:	f000 f9eb 	bl	48f0 <_fflush_r>
    451a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    451c:	2900      	cmp	r1, #0
    451e:	d008      	beq.n	4532 <setvbuf+0x5a>
    4520:	0023      	movs	r3, r4
    4522:	3344      	adds	r3, #68	; 0x44
    4524:	4299      	cmp	r1, r3
    4526:	d002      	beq.n	452e <setvbuf+0x56>
    4528:	0030      	movs	r0, r6
    452a:	f7ff fe8d 	bl	4248 <_free_r>
    452e:	2300      	movs	r3, #0
    4530:	6363      	str	r3, [r4, #52]	; 0x34
    4532:	2300      	movs	r3, #0
    4534:	61a3      	str	r3, [r4, #24]
    4536:	6063      	str	r3, [r4, #4]
    4538:	89a3      	ldrh	r3, [r4, #12]
    453a:	061b      	lsls	r3, r3, #24
    453c:	d503      	bpl.n	4546 <setvbuf+0x6e>
    453e:	6921      	ldr	r1, [r4, #16]
    4540:	0030      	movs	r0, r6
    4542:	f7ff fe81 	bl	4248 <_free_r>
    4546:	89a3      	ldrh	r3, [r4, #12]
    4548:	4a36      	ldr	r2, [pc, #216]	; (4624 <setvbuf+0x14c>)
    454a:	4013      	ands	r3, r2
    454c:	81a3      	strh	r3, [r4, #12]
    454e:	9b00      	ldr	r3, [sp, #0]
    4550:	2b02      	cmp	r3, #2
    4552:	d05a      	beq.n	460a <setvbuf+0x132>
    4554:	ab03      	add	r3, sp, #12
    4556:	aa02      	add	r2, sp, #8
    4558:	0021      	movs	r1, r4
    455a:	0030      	movs	r0, r6
    455c:	f000 facc 	bl	4af8 <__swhatbuf_r>
    4560:	89a3      	ldrh	r3, [r4, #12]
    4562:	4318      	orrs	r0, r3
    4564:	81a0      	strh	r0, [r4, #12]
    4566:	2d00      	cmp	r5, #0
    4568:	d124      	bne.n	45b4 <setvbuf+0xdc>
    456a:	9d02      	ldr	r5, [sp, #8]
    456c:	0028      	movs	r0, r5
    456e:	f7ff fe4f 	bl	4210 <malloc>
    4572:	9501      	str	r5, [sp, #4]
    4574:	1e07      	subs	r7, r0, #0
    4576:	d142      	bne.n	45fe <setvbuf+0x126>
    4578:	9b02      	ldr	r3, [sp, #8]
    457a:	9301      	str	r3, [sp, #4]
    457c:	42ab      	cmp	r3, r5
    457e:	d139      	bne.n	45f4 <setvbuf+0x11c>
    4580:	2001      	movs	r0, #1
    4582:	4240      	negs	r0, r0
    4584:	2302      	movs	r3, #2
    4586:	89a2      	ldrh	r2, [r4, #12]
    4588:	4313      	orrs	r3, r2
    458a:	81a3      	strh	r3, [r4, #12]
    458c:	2300      	movs	r3, #0
    458e:	60a3      	str	r3, [r4, #8]
    4590:	0023      	movs	r3, r4
    4592:	3347      	adds	r3, #71	; 0x47
    4594:	6023      	str	r3, [r4, #0]
    4596:	6123      	str	r3, [r4, #16]
    4598:	2301      	movs	r3, #1
    459a:	6163      	str	r3, [r4, #20]
    459c:	b005      	add	sp, #20
    459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45a0:	4b21      	ldr	r3, [pc, #132]	; (4628 <setvbuf+0x150>)
    45a2:	429c      	cmp	r4, r3
    45a4:	d101      	bne.n	45aa <setvbuf+0xd2>
    45a6:	68b4      	ldr	r4, [r6, #8]
    45a8:	e7aa      	b.n	4500 <setvbuf+0x28>
    45aa:	4b20      	ldr	r3, [pc, #128]	; (462c <setvbuf+0x154>)
    45ac:	429c      	cmp	r4, r3
    45ae:	d1a7      	bne.n	4500 <setvbuf+0x28>
    45b0:	68f4      	ldr	r4, [r6, #12]
    45b2:	e7a5      	b.n	4500 <setvbuf+0x28>
    45b4:	2f00      	cmp	r7, #0
    45b6:	d0d9      	beq.n	456c <setvbuf+0x94>
    45b8:	69b3      	ldr	r3, [r6, #24]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d102      	bne.n	45c4 <setvbuf+0xec>
    45be:	0030      	movs	r0, r6
    45c0:	f000 fa04 	bl	49cc <__sinit>
    45c4:	9b00      	ldr	r3, [sp, #0]
    45c6:	2b01      	cmp	r3, #1
    45c8:	d103      	bne.n	45d2 <setvbuf+0xfa>
    45ca:	89a3      	ldrh	r3, [r4, #12]
    45cc:	9a00      	ldr	r2, [sp, #0]
    45ce:	431a      	orrs	r2, r3
    45d0:	81a2      	strh	r2, [r4, #12]
    45d2:	2008      	movs	r0, #8
    45d4:	89a3      	ldrh	r3, [r4, #12]
    45d6:	6027      	str	r7, [r4, #0]
    45d8:	6127      	str	r7, [r4, #16]
    45da:	6165      	str	r5, [r4, #20]
    45dc:	4018      	ands	r0, r3
    45de:	d018      	beq.n	4612 <setvbuf+0x13a>
    45e0:	2001      	movs	r0, #1
    45e2:	4018      	ands	r0, r3
    45e4:	2300      	movs	r3, #0
    45e6:	4298      	cmp	r0, r3
    45e8:	d011      	beq.n	460e <setvbuf+0x136>
    45ea:	426d      	negs	r5, r5
    45ec:	60a3      	str	r3, [r4, #8]
    45ee:	61a5      	str	r5, [r4, #24]
    45f0:	0018      	movs	r0, r3
    45f2:	e7d3      	b.n	459c <setvbuf+0xc4>
    45f4:	9801      	ldr	r0, [sp, #4]
    45f6:	f7ff fe0b 	bl	4210 <malloc>
    45fa:	1e07      	subs	r7, r0, #0
    45fc:	d0c0      	beq.n	4580 <setvbuf+0xa8>
    45fe:	2380      	movs	r3, #128	; 0x80
    4600:	89a2      	ldrh	r2, [r4, #12]
    4602:	9d01      	ldr	r5, [sp, #4]
    4604:	4313      	orrs	r3, r2
    4606:	81a3      	strh	r3, [r4, #12]
    4608:	e7d6      	b.n	45b8 <setvbuf+0xe0>
    460a:	2000      	movs	r0, #0
    460c:	e7ba      	b.n	4584 <setvbuf+0xac>
    460e:	60a5      	str	r5, [r4, #8]
    4610:	e7c4      	b.n	459c <setvbuf+0xc4>
    4612:	60a0      	str	r0, [r4, #8]
    4614:	e7c2      	b.n	459c <setvbuf+0xc4>
    4616:	2001      	movs	r0, #1
    4618:	4240      	negs	r0, r0
    461a:	e7bf      	b.n	459c <setvbuf+0xc4>
    461c:	20000004 	.word	0x20000004
    4620:	00005678 	.word	0x00005678
    4624:	fffff35c 	.word	0xfffff35c
    4628:	00005698 	.word	0x00005698
    462c:	00005658 	.word	0x00005658

00004630 <strcmp>:
    4630:	7802      	ldrb	r2, [r0, #0]
    4632:	780b      	ldrb	r3, [r1, #0]
    4634:	2a00      	cmp	r2, #0
    4636:	d003      	beq.n	4640 <strcmp+0x10>
    4638:	3001      	adds	r0, #1
    463a:	3101      	adds	r1, #1
    463c:	429a      	cmp	r2, r3
    463e:	d0f7      	beq.n	4630 <strcmp>
    4640:	1ad0      	subs	r0, r2, r3
    4642:	4770      	bx	lr

00004644 <__swbuf_r>:
    4644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4646:	0005      	movs	r5, r0
    4648:	000e      	movs	r6, r1
    464a:	0014      	movs	r4, r2
    464c:	2800      	cmp	r0, #0
    464e:	d004      	beq.n	465a <__swbuf_r+0x16>
    4650:	6983      	ldr	r3, [r0, #24]
    4652:	2b00      	cmp	r3, #0
    4654:	d101      	bne.n	465a <__swbuf_r+0x16>
    4656:	f000 f9b9 	bl	49cc <__sinit>
    465a:	4b22      	ldr	r3, [pc, #136]	; (46e4 <__swbuf_r+0xa0>)
    465c:	429c      	cmp	r4, r3
    465e:	d12d      	bne.n	46bc <__swbuf_r+0x78>
    4660:	686c      	ldr	r4, [r5, #4]
    4662:	69a3      	ldr	r3, [r4, #24]
    4664:	60a3      	str	r3, [r4, #8]
    4666:	89a3      	ldrh	r3, [r4, #12]
    4668:	071b      	lsls	r3, r3, #28
    466a:	d531      	bpl.n	46d0 <__swbuf_r+0x8c>
    466c:	6923      	ldr	r3, [r4, #16]
    466e:	2b00      	cmp	r3, #0
    4670:	d02e      	beq.n	46d0 <__swbuf_r+0x8c>
    4672:	6823      	ldr	r3, [r4, #0]
    4674:	6922      	ldr	r2, [r4, #16]
    4676:	b2f7      	uxtb	r7, r6
    4678:	1a98      	subs	r0, r3, r2
    467a:	6963      	ldr	r3, [r4, #20]
    467c:	b2f6      	uxtb	r6, r6
    467e:	4298      	cmp	r0, r3
    4680:	db05      	blt.n	468e <__swbuf_r+0x4a>
    4682:	0021      	movs	r1, r4
    4684:	0028      	movs	r0, r5
    4686:	f000 f933 	bl	48f0 <_fflush_r>
    468a:	2800      	cmp	r0, #0
    468c:	d126      	bne.n	46dc <__swbuf_r+0x98>
    468e:	68a3      	ldr	r3, [r4, #8]
    4690:	3001      	adds	r0, #1
    4692:	3b01      	subs	r3, #1
    4694:	60a3      	str	r3, [r4, #8]
    4696:	6823      	ldr	r3, [r4, #0]
    4698:	1c5a      	adds	r2, r3, #1
    469a:	6022      	str	r2, [r4, #0]
    469c:	701f      	strb	r7, [r3, #0]
    469e:	6963      	ldr	r3, [r4, #20]
    46a0:	4298      	cmp	r0, r3
    46a2:	d004      	beq.n	46ae <__swbuf_r+0x6a>
    46a4:	89a3      	ldrh	r3, [r4, #12]
    46a6:	07db      	lsls	r3, r3, #31
    46a8:	d51a      	bpl.n	46e0 <__swbuf_r+0x9c>
    46aa:	2e0a      	cmp	r6, #10
    46ac:	d118      	bne.n	46e0 <__swbuf_r+0x9c>
    46ae:	0021      	movs	r1, r4
    46b0:	0028      	movs	r0, r5
    46b2:	f000 f91d 	bl	48f0 <_fflush_r>
    46b6:	2800      	cmp	r0, #0
    46b8:	d012      	beq.n	46e0 <__swbuf_r+0x9c>
    46ba:	e00f      	b.n	46dc <__swbuf_r+0x98>
    46bc:	4b0a      	ldr	r3, [pc, #40]	; (46e8 <__swbuf_r+0xa4>)
    46be:	429c      	cmp	r4, r3
    46c0:	d101      	bne.n	46c6 <__swbuf_r+0x82>
    46c2:	68ac      	ldr	r4, [r5, #8]
    46c4:	e7cd      	b.n	4662 <__swbuf_r+0x1e>
    46c6:	4b09      	ldr	r3, [pc, #36]	; (46ec <__swbuf_r+0xa8>)
    46c8:	429c      	cmp	r4, r3
    46ca:	d1ca      	bne.n	4662 <__swbuf_r+0x1e>
    46cc:	68ec      	ldr	r4, [r5, #12]
    46ce:	e7c8      	b.n	4662 <__swbuf_r+0x1e>
    46d0:	0021      	movs	r1, r4
    46d2:	0028      	movs	r0, r5
    46d4:	f000 f80c 	bl	46f0 <__swsetup_r>
    46d8:	2800      	cmp	r0, #0
    46da:	d0ca      	beq.n	4672 <__swbuf_r+0x2e>
    46dc:	2601      	movs	r6, #1
    46de:	4276      	negs	r6, r6
    46e0:	0030      	movs	r0, r6
    46e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46e4:	00005678 	.word	0x00005678
    46e8:	00005698 	.word	0x00005698
    46ec:	00005658 	.word	0x00005658

000046f0 <__swsetup_r>:
    46f0:	4b36      	ldr	r3, [pc, #216]	; (47cc <__swsetup_r+0xdc>)
    46f2:	b570      	push	{r4, r5, r6, lr}
    46f4:	681d      	ldr	r5, [r3, #0]
    46f6:	0006      	movs	r6, r0
    46f8:	000c      	movs	r4, r1
    46fa:	2d00      	cmp	r5, #0
    46fc:	d005      	beq.n	470a <__swsetup_r+0x1a>
    46fe:	69ab      	ldr	r3, [r5, #24]
    4700:	2b00      	cmp	r3, #0
    4702:	d102      	bne.n	470a <__swsetup_r+0x1a>
    4704:	0028      	movs	r0, r5
    4706:	f000 f961 	bl	49cc <__sinit>
    470a:	4b31      	ldr	r3, [pc, #196]	; (47d0 <__swsetup_r+0xe0>)
    470c:	429c      	cmp	r4, r3
    470e:	d10f      	bne.n	4730 <__swsetup_r+0x40>
    4710:	686c      	ldr	r4, [r5, #4]
    4712:	230c      	movs	r3, #12
    4714:	5ee2      	ldrsh	r2, [r4, r3]
    4716:	b293      	uxth	r3, r2
    4718:	0719      	lsls	r1, r3, #28
    471a:	d42d      	bmi.n	4778 <__swsetup_r+0x88>
    471c:	06d9      	lsls	r1, r3, #27
    471e:	d411      	bmi.n	4744 <__swsetup_r+0x54>
    4720:	2309      	movs	r3, #9
    4722:	2001      	movs	r0, #1
    4724:	6033      	str	r3, [r6, #0]
    4726:	3337      	adds	r3, #55	; 0x37
    4728:	4313      	orrs	r3, r2
    472a:	81a3      	strh	r3, [r4, #12]
    472c:	4240      	negs	r0, r0
    472e:	bd70      	pop	{r4, r5, r6, pc}
    4730:	4b28      	ldr	r3, [pc, #160]	; (47d4 <__swsetup_r+0xe4>)
    4732:	429c      	cmp	r4, r3
    4734:	d101      	bne.n	473a <__swsetup_r+0x4a>
    4736:	68ac      	ldr	r4, [r5, #8]
    4738:	e7eb      	b.n	4712 <__swsetup_r+0x22>
    473a:	4b27      	ldr	r3, [pc, #156]	; (47d8 <__swsetup_r+0xe8>)
    473c:	429c      	cmp	r4, r3
    473e:	d1e8      	bne.n	4712 <__swsetup_r+0x22>
    4740:	68ec      	ldr	r4, [r5, #12]
    4742:	e7e6      	b.n	4712 <__swsetup_r+0x22>
    4744:	075b      	lsls	r3, r3, #29
    4746:	d513      	bpl.n	4770 <__swsetup_r+0x80>
    4748:	6b61      	ldr	r1, [r4, #52]	; 0x34
    474a:	2900      	cmp	r1, #0
    474c:	d008      	beq.n	4760 <__swsetup_r+0x70>
    474e:	0023      	movs	r3, r4
    4750:	3344      	adds	r3, #68	; 0x44
    4752:	4299      	cmp	r1, r3
    4754:	d002      	beq.n	475c <__swsetup_r+0x6c>
    4756:	0030      	movs	r0, r6
    4758:	f7ff fd76 	bl	4248 <_free_r>
    475c:	2300      	movs	r3, #0
    475e:	6363      	str	r3, [r4, #52]	; 0x34
    4760:	2224      	movs	r2, #36	; 0x24
    4762:	89a3      	ldrh	r3, [r4, #12]
    4764:	4393      	bics	r3, r2
    4766:	81a3      	strh	r3, [r4, #12]
    4768:	2300      	movs	r3, #0
    476a:	6063      	str	r3, [r4, #4]
    476c:	6923      	ldr	r3, [r4, #16]
    476e:	6023      	str	r3, [r4, #0]
    4770:	2308      	movs	r3, #8
    4772:	89a2      	ldrh	r2, [r4, #12]
    4774:	4313      	orrs	r3, r2
    4776:	81a3      	strh	r3, [r4, #12]
    4778:	6923      	ldr	r3, [r4, #16]
    477a:	2b00      	cmp	r3, #0
    477c:	d10b      	bne.n	4796 <__swsetup_r+0xa6>
    477e:	21a0      	movs	r1, #160	; 0xa0
    4780:	2280      	movs	r2, #128	; 0x80
    4782:	89a3      	ldrh	r3, [r4, #12]
    4784:	0089      	lsls	r1, r1, #2
    4786:	0092      	lsls	r2, r2, #2
    4788:	400b      	ands	r3, r1
    478a:	4293      	cmp	r3, r2
    478c:	d003      	beq.n	4796 <__swsetup_r+0xa6>
    478e:	0021      	movs	r1, r4
    4790:	0030      	movs	r0, r6
    4792:	f000 f9d9 	bl	4b48 <__smakebuf_r>
    4796:	2301      	movs	r3, #1
    4798:	89a2      	ldrh	r2, [r4, #12]
    479a:	4013      	ands	r3, r2
    479c:	d011      	beq.n	47c2 <__swsetup_r+0xd2>
    479e:	2300      	movs	r3, #0
    47a0:	60a3      	str	r3, [r4, #8]
    47a2:	6963      	ldr	r3, [r4, #20]
    47a4:	425b      	negs	r3, r3
    47a6:	61a3      	str	r3, [r4, #24]
    47a8:	2000      	movs	r0, #0
    47aa:	6923      	ldr	r3, [r4, #16]
    47ac:	4283      	cmp	r3, r0
    47ae:	d1be      	bne.n	472e <__swsetup_r+0x3e>
    47b0:	230c      	movs	r3, #12
    47b2:	5ee2      	ldrsh	r2, [r4, r3]
    47b4:	0613      	lsls	r3, r2, #24
    47b6:	d5ba      	bpl.n	472e <__swsetup_r+0x3e>
    47b8:	2340      	movs	r3, #64	; 0x40
    47ba:	4313      	orrs	r3, r2
    47bc:	81a3      	strh	r3, [r4, #12]
    47be:	3801      	subs	r0, #1
    47c0:	e7b5      	b.n	472e <__swsetup_r+0x3e>
    47c2:	0792      	lsls	r2, r2, #30
    47c4:	d400      	bmi.n	47c8 <__swsetup_r+0xd8>
    47c6:	6963      	ldr	r3, [r4, #20]
    47c8:	60a3      	str	r3, [r4, #8]
    47ca:	e7ed      	b.n	47a8 <__swsetup_r+0xb8>
    47cc:	20000004 	.word	0x20000004
    47d0:	00005678 	.word	0x00005678
    47d4:	00005698 	.word	0x00005698
    47d8:	00005658 	.word	0x00005658

000047dc <__sflush_r>:
    47dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    47de:	898a      	ldrh	r2, [r1, #12]
    47e0:	0005      	movs	r5, r0
    47e2:	000c      	movs	r4, r1
    47e4:	0713      	lsls	r3, r2, #28
    47e6:	d460      	bmi.n	48aa <__sflush_r+0xce>
    47e8:	684b      	ldr	r3, [r1, #4]
    47ea:	2b00      	cmp	r3, #0
    47ec:	dc04      	bgt.n	47f8 <__sflush_r+0x1c>
    47ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    47f0:	2b00      	cmp	r3, #0
    47f2:	dc01      	bgt.n	47f8 <__sflush_r+0x1c>
    47f4:	2000      	movs	r0, #0
    47f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    47f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    47fa:	2f00      	cmp	r7, #0
    47fc:	d0fa      	beq.n	47f4 <__sflush_r+0x18>
    47fe:	2300      	movs	r3, #0
    4800:	682e      	ldr	r6, [r5, #0]
    4802:	602b      	str	r3, [r5, #0]
    4804:	2380      	movs	r3, #128	; 0x80
    4806:	015b      	lsls	r3, r3, #5
    4808:	401a      	ands	r2, r3
    480a:	d034      	beq.n	4876 <__sflush_r+0x9a>
    480c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    480e:	89a3      	ldrh	r3, [r4, #12]
    4810:	075b      	lsls	r3, r3, #29
    4812:	d506      	bpl.n	4822 <__sflush_r+0x46>
    4814:	6863      	ldr	r3, [r4, #4]
    4816:	1ac0      	subs	r0, r0, r3
    4818:	6b63      	ldr	r3, [r4, #52]	; 0x34
    481a:	2b00      	cmp	r3, #0
    481c:	d001      	beq.n	4822 <__sflush_r+0x46>
    481e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4820:	1ac0      	subs	r0, r0, r3
    4822:	0002      	movs	r2, r0
    4824:	6a21      	ldr	r1, [r4, #32]
    4826:	2300      	movs	r3, #0
    4828:	0028      	movs	r0, r5
    482a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    482c:	47b8      	blx	r7
    482e:	89a1      	ldrh	r1, [r4, #12]
    4830:	1c43      	adds	r3, r0, #1
    4832:	d106      	bne.n	4842 <__sflush_r+0x66>
    4834:	682b      	ldr	r3, [r5, #0]
    4836:	2b1d      	cmp	r3, #29
    4838:	d831      	bhi.n	489e <__sflush_r+0xc2>
    483a:	4a2c      	ldr	r2, [pc, #176]	; (48ec <__sflush_r+0x110>)
    483c:	40da      	lsrs	r2, r3
    483e:	07d3      	lsls	r3, r2, #31
    4840:	d52d      	bpl.n	489e <__sflush_r+0xc2>
    4842:	2300      	movs	r3, #0
    4844:	6063      	str	r3, [r4, #4]
    4846:	6923      	ldr	r3, [r4, #16]
    4848:	6023      	str	r3, [r4, #0]
    484a:	04cb      	lsls	r3, r1, #19
    484c:	d505      	bpl.n	485a <__sflush_r+0x7e>
    484e:	1c43      	adds	r3, r0, #1
    4850:	d102      	bne.n	4858 <__sflush_r+0x7c>
    4852:	682b      	ldr	r3, [r5, #0]
    4854:	2b00      	cmp	r3, #0
    4856:	d100      	bne.n	485a <__sflush_r+0x7e>
    4858:	6560      	str	r0, [r4, #84]	; 0x54
    485a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    485c:	602e      	str	r6, [r5, #0]
    485e:	2900      	cmp	r1, #0
    4860:	d0c8      	beq.n	47f4 <__sflush_r+0x18>
    4862:	0023      	movs	r3, r4
    4864:	3344      	adds	r3, #68	; 0x44
    4866:	4299      	cmp	r1, r3
    4868:	d002      	beq.n	4870 <__sflush_r+0x94>
    486a:	0028      	movs	r0, r5
    486c:	f7ff fcec 	bl	4248 <_free_r>
    4870:	2000      	movs	r0, #0
    4872:	6360      	str	r0, [r4, #52]	; 0x34
    4874:	e7bf      	b.n	47f6 <__sflush_r+0x1a>
    4876:	2301      	movs	r3, #1
    4878:	6a21      	ldr	r1, [r4, #32]
    487a:	0028      	movs	r0, r5
    487c:	47b8      	blx	r7
    487e:	1c43      	adds	r3, r0, #1
    4880:	d1c5      	bne.n	480e <__sflush_r+0x32>
    4882:	682b      	ldr	r3, [r5, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	d0c2      	beq.n	480e <__sflush_r+0x32>
    4888:	2b1d      	cmp	r3, #29
    488a:	d001      	beq.n	4890 <__sflush_r+0xb4>
    488c:	2b16      	cmp	r3, #22
    488e:	d101      	bne.n	4894 <__sflush_r+0xb8>
    4890:	602e      	str	r6, [r5, #0]
    4892:	e7af      	b.n	47f4 <__sflush_r+0x18>
    4894:	2340      	movs	r3, #64	; 0x40
    4896:	89a2      	ldrh	r2, [r4, #12]
    4898:	4313      	orrs	r3, r2
    489a:	81a3      	strh	r3, [r4, #12]
    489c:	e7ab      	b.n	47f6 <__sflush_r+0x1a>
    489e:	2340      	movs	r3, #64	; 0x40
    48a0:	430b      	orrs	r3, r1
    48a2:	2001      	movs	r0, #1
    48a4:	81a3      	strh	r3, [r4, #12]
    48a6:	4240      	negs	r0, r0
    48a8:	e7a5      	b.n	47f6 <__sflush_r+0x1a>
    48aa:	690f      	ldr	r7, [r1, #16]
    48ac:	2f00      	cmp	r7, #0
    48ae:	d0a1      	beq.n	47f4 <__sflush_r+0x18>
    48b0:	680b      	ldr	r3, [r1, #0]
    48b2:	600f      	str	r7, [r1, #0]
    48b4:	1bdb      	subs	r3, r3, r7
    48b6:	9301      	str	r3, [sp, #4]
    48b8:	2300      	movs	r3, #0
    48ba:	0792      	lsls	r2, r2, #30
    48bc:	d100      	bne.n	48c0 <__sflush_r+0xe4>
    48be:	694b      	ldr	r3, [r1, #20]
    48c0:	60a3      	str	r3, [r4, #8]
    48c2:	9b01      	ldr	r3, [sp, #4]
    48c4:	2b00      	cmp	r3, #0
    48c6:	dc00      	bgt.n	48ca <__sflush_r+0xee>
    48c8:	e794      	b.n	47f4 <__sflush_r+0x18>
    48ca:	9b01      	ldr	r3, [sp, #4]
    48cc:	003a      	movs	r2, r7
    48ce:	6a21      	ldr	r1, [r4, #32]
    48d0:	0028      	movs	r0, r5
    48d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    48d4:	47b0      	blx	r6
    48d6:	2800      	cmp	r0, #0
    48d8:	dc03      	bgt.n	48e2 <__sflush_r+0x106>
    48da:	2340      	movs	r3, #64	; 0x40
    48dc:	89a2      	ldrh	r2, [r4, #12]
    48de:	4313      	orrs	r3, r2
    48e0:	e7df      	b.n	48a2 <__sflush_r+0xc6>
    48e2:	9b01      	ldr	r3, [sp, #4]
    48e4:	183f      	adds	r7, r7, r0
    48e6:	1a1b      	subs	r3, r3, r0
    48e8:	9301      	str	r3, [sp, #4]
    48ea:	e7ea      	b.n	48c2 <__sflush_r+0xe6>
    48ec:	20400001 	.word	0x20400001

000048f0 <_fflush_r>:
    48f0:	690b      	ldr	r3, [r1, #16]
    48f2:	b570      	push	{r4, r5, r6, lr}
    48f4:	0005      	movs	r5, r0
    48f6:	000c      	movs	r4, r1
    48f8:	2b00      	cmp	r3, #0
    48fa:	d101      	bne.n	4900 <_fflush_r+0x10>
    48fc:	2000      	movs	r0, #0
    48fe:	bd70      	pop	{r4, r5, r6, pc}
    4900:	2800      	cmp	r0, #0
    4902:	d004      	beq.n	490e <_fflush_r+0x1e>
    4904:	6983      	ldr	r3, [r0, #24]
    4906:	2b00      	cmp	r3, #0
    4908:	d101      	bne.n	490e <_fflush_r+0x1e>
    490a:	f000 f85f 	bl	49cc <__sinit>
    490e:	4b0b      	ldr	r3, [pc, #44]	; (493c <_fflush_r+0x4c>)
    4910:	429c      	cmp	r4, r3
    4912:	d109      	bne.n	4928 <_fflush_r+0x38>
    4914:	686c      	ldr	r4, [r5, #4]
    4916:	220c      	movs	r2, #12
    4918:	5ea3      	ldrsh	r3, [r4, r2]
    491a:	2b00      	cmp	r3, #0
    491c:	d0ee      	beq.n	48fc <_fflush_r+0xc>
    491e:	0021      	movs	r1, r4
    4920:	0028      	movs	r0, r5
    4922:	f7ff ff5b 	bl	47dc <__sflush_r>
    4926:	e7ea      	b.n	48fe <_fflush_r+0xe>
    4928:	4b05      	ldr	r3, [pc, #20]	; (4940 <_fflush_r+0x50>)
    492a:	429c      	cmp	r4, r3
    492c:	d101      	bne.n	4932 <_fflush_r+0x42>
    492e:	68ac      	ldr	r4, [r5, #8]
    4930:	e7f1      	b.n	4916 <_fflush_r+0x26>
    4932:	4b04      	ldr	r3, [pc, #16]	; (4944 <_fflush_r+0x54>)
    4934:	429c      	cmp	r4, r3
    4936:	d1ee      	bne.n	4916 <_fflush_r+0x26>
    4938:	68ec      	ldr	r4, [r5, #12]
    493a:	e7ec      	b.n	4916 <_fflush_r+0x26>
    493c:	00005678 	.word	0x00005678
    4940:	00005698 	.word	0x00005698
    4944:	00005658 	.word	0x00005658

00004948 <_cleanup_r>:
    4948:	b510      	push	{r4, lr}
    494a:	4902      	ldr	r1, [pc, #8]	; (4954 <_cleanup_r+0xc>)
    494c:	f000 f8b2 	bl	4ab4 <_fwalk_reent>
    4950:	bd10      	pop	{r4, pc}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	000048f1 	.word	0x000048f1

00004958 <std.isra.0>:
    4958:	2300      	movs	r3, #0
    495a:	b510      	push	{r4, lr}
    495c:	0004      	movs	r4, r0
    495e:	6003      	str	r3, [r0, #0]
    4960:	6043      	str	r3, [r0, #4]
    4962:	6083      	str	r3, [r0, #8]
    4964:	8181      	strh	r1, [r0, #12]
    4966:	6643      	str	r3, [r0, #100]	; 0x64
    4968:	81c2      	strh	r2, [r0, #14]
    496a:	6103      	str	r3, [r0, #16]
    496c:	6143      	str	r3, [r0, #20]
    496e:	6183      	str	r3, [r0, #24]
    4970:	0019      	movs	r1, r3
    4972:	2208      	movs	r2, #8
    4974:	305c      	adds	r0, #92	; 0x5c
    4976:	f7ff fc5e 	bl	4236 <memset>
    497a:	4b05      	ldr	r3, [pc, #20]	; (4990 <std.isra.0+0x38>)
    497c:	6224      	str	r4, [r4, #32]
    497e:	6263      	str	r3, [r4, #36]	; 0x24
    4980:	4b04      	ldr	r3, [pc, #16]	; (4994 <std.isra.0+0x3c>)
    4982:	62a3      	str	r3, [r4, #40]	; 0x28
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <std.isra.0+0x40>)
    4986:	62e3      	str	r3, [r4, #44]	; 0x2c
    4988:	4b04      	ldr	r3, [pc, #16]	; (499c <std.isra.0+0x44>)
    498a:	6323      	str	r3, [r4, #48]	; 0x30
    498c:	bd10      	pop	{r4, pc}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	00005161 	.word	0x00005161
    4994:	00005189 	.word	0x00005189
    4998:	000051c1 	.word	0x000051c1
    499c:	000051ed 	.word	0x000051ed

000049a0 <__sfmoreglue>:
    49a0:	b570      	push	{r4, r5, r6, lr}
    49a2:	2568      	movs	r5, #104	; 0x68
    49a4:	1e4a      	subs	r2, r1, #1
    49a6:	4355      	muls	r5, r2
    49a8:	000e      	movs	r6, r1
    49aa:	0029      	movs	r1, r5
    49ac:	3174      	adds	r1, #116	; 0x74
    49ae:	f7ff fc95 	bl	42dc <_malloc_r>
    49b2:	1e04      	subs	r4, r0, #0
    49b4:	d008      	beq.n	49c8 <__sfmoreglue+0x28>
    49b6:	2100      	movs	r1, #0
    49b8:	002a      	movs	r2, r5
    49ba:	6001      	str	r1, [r0, #0]
    49bc:	6046      	str	r6, [r0, #4]
    49be:	300c      	adds	r0, #12
    49c0:	60a0      	str	r0, [r4, #8]
    49c2:	3268      	adds	r2, #104	; 0x68
    49c4:	f7ff fc37 	bl	4236 <memset>
    49c8:	0020      	movs	r0, r4
    49ca:	bd70      	pop	{r4, r5, r6, pc}

000049cc <__sinit>:
    49cc:	6983      	ldr	r3, [r0, #24]
    49ce:	b513      	push	{r0, r1, r4, lr}
    49d0:	0004      	movs	r4, r0
    49d2:	2b00      	cmp	r3, #0
    49d4:	d128      	bne.n	4a28 <__sinit+0x5c>
    49d6:	6483      	str	r3, [r0, #72]	; 0x48
    49d8:	64c3      	str	r3, [r0, #76]	; 0x4c
    49da:	6503      	str	r3, [r0, #80]	; 0x50
    49dc:	4b13      	ldr	r3, [pc, #76]	; (4a2c <__sinit+0x60>)
    49de:	4a14      	ldr	r2, [pc, #80]	; (4a30 <__sinit+0x64>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	6282      	str	r2, [r0, #40]	; 0x28
    49e4:	9301      	str	r3, [sp, #4]
    49e6:	4298      	cmp	r0, r3
    49e8:	d101      	bne.n	49ee <__sinit+0x22>
    49ea:	2301      	movs	r3, #1
    49ec:	6183      	str	r3, [r0, #24]
    49ee:	0020      	movs	r0, r4
    49f0:	f000 f820 	bl	4a34 <__sfp>
    49f4:	6060      	str	r0, [r4, #4]
    49f6:	0020      	movs	r0, r4
    49f8:	f000 f81c 	bl	4a34 <__sfp>
    49fc:	60a0      	str	r0, [r4, #8]
    49fe:	0020      	movs	r0, r4
    4a00:	f000 f818 	bl	4a34 <__sfp>
    4a04:	2200      	movs	r2, #0
    4a06:	60e0      	str	r0, [r4, #12]
    4a08:	2104      	movs	r1, #4
    4a0a:	6860      	ldr	r0, [r4, #4]
    4a0c:	f7ff ffa4 	bl	4958 <std.isra.0>
    4a10:	2201      	movs	r2, #1
    4a12:	2109      	movs	r1, #9
    4a14:	68a0      	ldr	r0, [r4, #8]
    4a16:	f7ff ff9f 	bl	4958 <std.isra.0>
    4a1a:	2202      	movs	r2, #2
    4a1c:	2112      	movs	r1, #18
    4a1e:	68e0      	ldr	r0, [r4, #12]
    4a20:	f7ff ff9a 	bl	4958 <std.isra.0>
    4a24:	2301      	movs	r3, #1
    4a26:	61a3      	str	r3, [r4, #24]
    4a28:	bd13      	pop	{r0, r1, r4, pc}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	00005654 	.word	0x00005654
    4a30:	00004949 	.word	0x00004949

00004a34 <__sfp>:
    4a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a36:	4b1e      	ldr	r3, [pc, #120]	; (4ab0 <__sfp+0x7c>)
    4a38:	0007      	movs	r7, r0
    4a3a:	681e      	ldr	r6, [r3, #0]
    4a3c:	69b3      	ldr	r3, [r6, #24]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d102      	bne.n	4a48 <__sfp+0x14>
    4a42:	0030      	movs	r0, r6
    4a44:	f7ff ffc2 	bl	49cc <__sinit>
    4a48:	3648      	adds	r6, #72	; 0x48
    4a4a:	68b4      	ldr	r4, [r6, #8]
    4a4c:	6873      	ldr	r3, [r6, #4]
    4a4e:	3b01      	subs	r3, #1
    4a50:	d504      	bpl.n	4a5c <__sfp+0x28>
    4a52:	6833      	ldr	r3, [r6, #0]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d007      	beq.n	4a68 <__sfp+0x34>
    4a58:	6836      	ldr	r6, [r6, #0]
    4a5a:	e7f6      	b.n	4a4a <__sfp+0x16>
    4a5c:	220c      	movs	r2, #12
    4a5e:	5ea5      	ldrsh	r5, [r4, r2]
    4a60:	2d00      	cmp	r5, #0
    4a62:	d00d      	beq.n	4a80 <__sfp+0x4c>
    4a64:	3468      	adds	r4, #104	; 0x68
    4a66:	e7f2      	b.n	4a4e <__sfp+0x1a>
    4a68:	2104      	movs	r1, #4
    4a6a:	0038      	movs	r0, r7
    4a6c:	f7ff ff98 	bl	49a0 <__sfmoreglue>
    4a70:	6030      	str	r0, [r6, #0]
    4a72:	2800      	cmp	r0, #0
    4a74:	d1f0      	bne.n	4a58 <__sfp+0x24>
    4a76:	230c      	movs	r3, #12
    4a78:	0004      	movs	r4, r0
    4a7a:	603b      	str	r3, [r7, #0]
    4a7c:	0020      	movs	r0, r4
    4a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a80:	2301      	movs	r3, #1
    4a82:	0020      	movs	r0, r4
    4a84:	425b      	negs	r3, r3
    4a86:	81e3      	strh	r3, [r4, #14]
    4a88:	3302      	adds	r3, #2
    4a8a:	81a3      	strh	r3, [r4, #12]
    4a8c:	6665      	str	r5, [r4, #100]	; 0x64
    4a8e:	6025      	str	r5, [r4, #0]
    4a90:	60a5      	str	r5, [r4, #8]
    4a92:	6065      	str	r5, [r4, #4]
    4a94:	6125      	str	r5, [r4, #16]
    4a96:	6165      	str	r5, [r4, #20]
    4a98:	61a5      	str	r5, [r4, #24]
    4a9a:	2208      	movs	r2, #8
    4a9c:	0029      	movs	r1, r5
    4a9e:	305c      	adds	r0, #92	; 0x5c
    4aa0:	f7ff fbc9 	bl	4236 <memset>
    4aa4:	6365      	str	r5, [r4, #52]	; 0x34
    4aa6:	63a5      	str	r5, [r4, #56]	; 0x38
    4aa8:	64a5      	str	r5, [r4, #72]	; 0x48
    4aaa:	64e5      	str	r5, [r4, #76]	; 0x4c
    4aac:	e7e6      	b.n	4a7c <__sfp+0x48>
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	00005654 	.word	0x00005654

00004ab4 <_fwalk_reent>:
    4ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ab6:	0004      	movs	r4, r0
    4ab8:	0007      	movs	r7, r0
    4aba:	2600      	movs	r6, #0
    4abc:	9101      	str	r1, [sp, #4]
    4abe:	3448      	adds	r4, #72	; 0x48
    4ac0:	2c00      	cmp	r4, #0
    4ac2:	d101      	bne.n	4ac8 <_fwalk_reent+0x14>
    4ac4:	0030      	movs	r0, r6
    4ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ac8:	6863      	ldr	r3, [r4, #4]
    4aca:	68a5      	ldr	r5, [r4, #8]
    4acc:	9300      	str	r3, [sp, #0]
    4ace:	9b00      	ldr	r3, [sp, #0]
    4ad0:	3b01      	subs	r3, #1
    4ad2:	9300      	str	r3, [sp, #0]
    4ad4:	d501      	bpl.n	4ada <_fwalk_reent+0x26>
    4ad6:	6824      	ldr	r4, [r4, #0]
    4ad8:	e7f2      	b.n	4ac0 <_fwalk_reent+0xc>
    4ada:	89ab      	ldrh	r3, [r5, #12]
    4adc:	2b01      	cmp	r3, #1
    4ade:	d908      	bls.n	4af2 <_fwalk_reent+0x3e>
    4ae0:	220e      	movs	r2, #14
    4ae2:	5eab      	ldrsh	r3, [r5, r2]
    4ae4:	3301      	adds	r3, #1
    4ae6:	d004      	beq.n	4af2 <_fwalk_reent+0x3e>
    4ae8:	0029      	movs	r1, r5
    4aea:	0038      	movs	r0, r7
    4aec:	9b01      	ldr	r3, [sp, #4]
    4aee:	4798      	blx	r3
    4af0:	4306      	orrs	r6, r0
    4af2:	3568      	adds	r5, #104	; 0x68
    4af4:	e7eb      	b.n	4ace <_fwalk_reent+0x1a>
	...

00004af8 <__swhatbuf_r>:
    4af8:	b570      	push	{r4, r5, r6, lr}
    4afa:	000e      	movs	r6, r1
    4afc:	001d      	movs	r5, r3
    4afe:	230e      	movs	r3, #14
    4b00:	5ec9      	ldrsh	r1, [r1, r3]
    4b02:	b090      	sub	sp, #64	; 0x40
    4b04:	0014      	movs	r4, r2
    4b06:	2900      	cmp	r1, #0
    4b08:	da07      	bge.n	4b1a <__swhatbuf_r+0x22>
    4b0a:	2300      	movs	r3, #0
    4b0c:	602b      	str	r3, [r5, #0]
    4b0e:	89b3      	ldrh	r3, [r6, #12]
    4b10:	061b      	lsls	r3, r3, #24
    4b12:	d411      	bmi.n	4b38 <__swhatbuf_r+0x40>
    4b14:	2380      	movs	r3, #128	; 0x80
    4b16:	00db      	lsls	r3, r3, #3
    4b18:	e00f      	b.n	4b3a <__swhatbuf_r+0x42>
    4b1a:	aa01      	add	r2, sp, #4
    4b1c:	f000 fb92 	bl	5244 <_fstat_r>
    4b20:	2800      	cmp	r0, #0
    4b22:	dbf2      	blt.n	4b0a <__swhatbuf_r+0x12>
    4b24:	22f0      	movs	r2, #240	; 0xf0
    4b26:	9b02      	ldr	r3, [sp, #8]
    4b28:	0212      	lsls	r2, r2, #8
    4b2a:	4013      	ands	r3, r2
    4b2c:	4a05      	ldr	r2, [pc, #20]	; (4b44 <__swhatbuf_r+0x4c>)
    4b2e:	189b      	adds	r3, r3, r2
    4b30:	425a      	negs	r2, r3
    4b32:	4153      	adcs	r3, r2
    4b34:	602b      	str	r3, [r5, #0]
    4b36:	e7ed      	b.n	4b14 <__swhatbuf_r+0x1c>
    4b38:	2340      	movs	r3, #64	; 0x40
    4b3a:	2000      	movs	r0, #0
    4b3c:	6023      	str	r3, [r4, #0]
    4b3e:	b010      	add	sp, #64	; 0x40
    4b40:	bd70      	pop	{r4, r5, r6, pc}
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	ffffe000 	.word	0xffffe000

00004b48 <__smakebuf_r>:
    4b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b4a:	2602      	movs	r6, #2
    4b4c:	898b      	ldrh	r3, [r1, #12]
    4b4e:	0005      	movs	r5, r0
    4b50:	000c      	movs	r4, r1
    4b52:	4233      	tst	r3, r6
    4b54:	d006      	beq.n	4b64 <__smakebuf_r+0x1c>
    4b56:	0023      	movs	r3, r4
    4b58:	3347      	adds	r3, #71	; 0x47
    4b5a:	6023      	str	r3, [r4, #0]
    4b5c:	6123      	str	r3, [r4, #16]
    4b5e:	2301      	movs	r3, #1
    4b60:	6163      	str	r3, [r4, #20]
    4b62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4b64:	ab01      	add	r3, sp, #4
    4b66:	466a      	mov	r2, sp
    4b68:	f7ff ffc6 	bl	4af8 <__swhatbuf_r>
    4b6c:	9900      	ldr	r1, [sp, #0]
    4b6e:	0007      	movs	r7, r0
    4b70:	0028      	movs	r0, r5
    4b72:	f7ff fbb3 	bl	42dc <_malloc_r>
    4b76:	2800      	cmp	r0, #0
    4b78:	d106      	bne.n	4b88 <__smakebuf_r+0x40>
    4b7a:	220c      	movs	r2, #12
    4b7c:	5ea3      	ldrsh	r3, [r4, r2]
    4b7e:	059a      	lsls	r2, r3, #22
    4b80:	d4ef      	bmi.n	4b62 <__smakebuf_r+0x1a>
    4b82:	431e      	orrs	r6, r3
    4b84:	81a6      	strh	r6, [r4, #12]
    4b86:	e7e6      	b.n	4b56 <__smakebuf_r+0xe>
    4b88:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <__smakebuf_r+0x78>)
    4b8a:	62ab      	str	r3, [r5, #40]	; 0x28
    4b8c:	2380      	movs	r3, #128	; 0x80
    4b8e:	89a2      	ldrh	r2, [r4, #12]
    4b90:	6020      	str	r0, [r4, #0]
    4b92:	4313      	orrs	r3, r2
    4b94:	81a3      	strh	r3, [r4, #12]
    4b96:	9b00      	ldr	r3, [sp, #0]
    4b98:	6120      	str	r0, [r4, #16]
    4b9a:	6163      	str	r3, [r4, #20]
    4b9c:	9b01      	ldr	r3, [sp, #4]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d00a      	beq.n	4bb8 <__smakebuf_r+0x70>
    4ba2:	230e      	movs	r3, #14
    4ba4:	5ee1      	ldrsh	r1, [r4, r3]
    4ba6:	0028      	movs	r0, r5
    4ba8:	f000 fb5e 	bl	5268 <_isatty_r>
    4bac:	2800      	cmp	r0, #0
    4bae:	d003      	beq.n	4bb8 <__smakebuf_r+0x70>
    4bb0:	2301      	movs	r3, #1
    4bb2:	89a2      	ldrh	r2, [r4, #12]
    4bb4:	4313      	orrs	r3, r2
    4bb6:	81a3      	strh	r3, [r4, #12]
    4bb8:	89a0      	ldrh	r0, [r4, #12]
    4bba:	4338      	orrs	r0, r7
    4bbc:	81a0      	strh	r0, [r4, #12]
    4bbe:	e7d0      	b.n	4b62 <__smakebuf_r+0x1a>
    4bc0:	00004949 	.word	0x00004949

00004bc4 <__malloc_lock>:
    4bc4:	4770      	bx	lr

00004bc6 <__malloc_unlock>:
    4bc6:	4770      	bx	lr

00004bc8 <__sfputc_r>:
    4bc8:	6893      	ldr	r3, [r2, #8]
    4bca:	b510      	push	{r4, lr}
    4bcc:	3b01      	subs	r3, #1
    4bce:	6093      	str	r3, [r2, #8]
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	da05      	bge.n	4be0 <__sfputc_r+0x18>
    4bd4:	6994      	ldr	r4, [r2, #24]
    4bd6:	42a3      	cmp	r3, r4
    4bd8:	db08      	blt.n	4bec <__sfputc_r+0x24>
    4bda:	b2cb      	uxtb	r3, r1
    4bdc:	2b0a      	cmp	r3, #10
    4bde:	d005      	beq.n	4bec <__sfputc_r+0x24>
    4be0:	6813      	ldr	r3, [r2, #0]
    4be2:	1c58      	adds	r0, r3, #1
    4be4:	6010      	str	r0, [r2, #0]
    4be6:	7019      	strb	r1, [r3, #0]
    4be8:	b2c8      	uxtb	r0, r1
    4bea:	bd10      	pop	{r4, pc}
    4bec:	f7ff fd2a 	bl	4644 <__swbuf_r>
    4bf0:	e7fb      	b.n	4bea <__sfputc_r+0x22>

00004bf2 <__sfputs_r>:
    4bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bf4:	0006      	movs	r6, r0
    4bf6:	000f      	movs	r7, r1
    4bf8:	0014      	movs	r4, r2
    4bfa:	18d5      	adds	r5, r2, r3
    4bfc:	42ac      	cmp	r4, r5
    4bfe:	d101      	bne.n	4c04 <__sfputs_r+0x12>
    4c00:	2000      	movs	r0, #0
    4c02:	e007      	b.n	4c14 <__sfputs_r+0x22>
    4c04:	7821      	ldrb	r1, [r4, #0]
    4c06:	003a      	movs	r2, r7
    4c08:	0030      	movs	r0, r6
    4c0a:	f7ff ffdd 	bl	4bc8 <__sfputc_r>
    4c0e:	3401      	adds	r4, #1
    4c10:	1c43      	adds	r3, r0, #1
    4c12:	d1f3      	bne.n	4bfc <__sfputs_r+0xa>
    4c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004c18 <_vfiprintf_r>:
    4c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c1a:	b09f      	sub	sp, #124	; 0x7c
    4c1c:	0006      	movs	r6, r0
    4c1e:	000f      	movs	r7, r1
    4c20:	0014      	movs	r4, r2
    4c22:	9305      	str	r3, [sp, #20]
    4c24:	2800      	cmp	r0, #0
    4c26:	d004      	beq.n	4c32 <_vfiprintf_r+0x1a>
    4c28:	6983      	ldr	r3, [r0, #24]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d101      	bne.n	4c32 <_vfiprintf_r+0x1a>
    4c2e:	f7ff fecd 	bl	49cc <__sinit>
    4c32:	4b7f      	ldr	r3, [pc, #508]	; (4e30 <_vfiprintf_r+0x218>)
    4c34:	429f      	cmp	r7, r3
    4c36:	d15c      	bne.n	4cf2 <_vfiprintf_r+0xda>
    4c38:	6877      	ldr	r7, [r6, #4]
    4c3a:	89bb      	ldrh	r3, [r7, #12]
    4c3c:	071b      	lsls	r3, r3, #28
    4c3e:	d562      	bpl.n	4d06 <_vfiprintf_r+0xee>
    4c40:	693b      	ldr	r3, [r7, #16]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d05f      	beq.n	4d06 <_vfiprintf_r+0xee>
    4c46:	2300      	movs	r3, #0
    4c48:	ad06      	add	r5, sp, #24
    4c4a:	616b      	str	r3, [r5, #20]
    4c4c:	3320      	adds	r3, #32
    4c4e:	766b      	strb	r3, [r5, #25]
    4c50:	3310      	adds	r3, #16
    4c52:	76ab      	strb	r3, [r5, #26]
    4c54:	9402      	str	r4, [sp, #8]
    4c56:	9c02      	ldr	r4, [sp, #8]
    4c58:	7823      	ldrb	r3, [r4, #0]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d15d      	bne.n	4d1a <_vfiprintf_r+0x102>
    4c5e:	9b02      	ldr	r3, [sp, #8]
    4c60:	1ae3      	subs	r3, r4, r3
    4c62:	9304      	str	r3, [sp, #16]
    4c64:	d00d      	beq.n	4c82 <_vfiprintf_r+0x6a>
    4c66:	9b04      	ldr	r3, [sp, #16]
    4c68:	9a02      	ldr	r2, [sp, #8]
    4c6a:	0039      	movs	r1, r7
    4c6c:	0030      	movs	r0, r6
    4c6e:	f7ff ffc0 	bl	4bf2 <__sfputs_r>
    4c72:	1c43      	adds	r3, r0, #1
    4c74:	d100      	bne.n	4c78 <_vfiprintf_r+0x60>
    4c76:	e0cc      	b.n	4e12 <_vfiprintf_r+0x1fa>
    4c78:	696a      	ldr	r2, [r5, #20]
    4c7a:	9b04      	ldr	r3, [sp, #16]
    4c7c:	4694      	mov	ip, r2
    4c7e:	4463      	add	r3, ip
    4c80:	616b      	str	r3, [r5, #20]
    4c82:	7823      	ldrb	r3, [r4, #0]
    4c84:	2b00      	cmp	r3, #0
    4c86:	d100      	bne.n	4c8a <_vfiprintf_r+0x72>
    4c88:	e0c3      	b.n	4e12 <_vfiprintf_r+0x1fa>
    4c8a:	2201      	movs	r2, #1
    4c8c:	2300      	movs	r3, #0
    4c8e:	4252      	negs	r2, r2
    4c90:	606a      	str	r2, [r5, #4]
    4c92:	a902      	add	r1, sp, #8
    4c94:	3254      	adds	r2, #84	; 0x54
    4c96:	1852      	adds	r2, r2, r1
    4c98:	3401      	adds	r4, #1
    4c9a:	602b      	str	r3, [r5, #0]
    4c9c:	60eb      	str	r3, [r5, #12]
    4c9e:	60ab      	str	r3, [r5, #8]
    4ca0:	7013      	strb	r3, [r2, #0]
    4ca2:	65ab      	str	r3, [r5, #88]	; 0x58
    4ca4:	7821      	ldrb	r1, [r4, #0]
    4ca6:	2205      	movs	r2, #5
    4ca8:	4862      	ldr	r0, [pc, #392]	; (4e34 <_vfiprintf_r+0x21c>)
    4caa:	f000 fb03 	bl	52b4 <memchr>
    4cae:	1c63      	adds	r3, r4, #1
    4cb0:	469c      	mov	ip, r3
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d135      	bne.n	4d22 <_vfiprintf_r+0x10a>
    4cb6:	6829      	ldr	r1, [r5, #0]
    4cb8:	06cb      	lsls	r3, r1, #27
    4cba:	d504      	bpl.n	4cc6 <_vfiprintf_r+0xae>
    4cbc:	2353      	movs	r3, #83	; 0x53
    4cbe:	aa02      	add	r2, sp, #8
    4cc0:	3020      	adds	r0, #32
    4cc2:	189b      	adds	r3, r3, r2
    4cc4:	7018      	strb	r0, [r3, #0]
    4cc6:	070b      	lsls	r3, r1, #28
    4cc8:	d504      	bpl.n	4cd4 <_vfiprintf_r+0xbc>
    4cca:	2353      	movs	r3, #83	; 0x53
    4ccc:	202b      	movs	r0, #43	; 0x2b
    4cce:	aa02      	add	r2, sp, #8
    4cd0:	189b      	adds	r3, r3, r2
    4cd2:	7018      	strb	r0, [r3, #0]
    4cd4:	7823      	ldrb	r3, [r4, #0]
    4cd6:	2b2a      	cmp	r3, #42	; 0x2a
    4cd8:	d02c      	beq.n	4d34 <_vfiprintf_r+0x11c>
    4cda:	2000      	movs	r0, #0
    4cdc:	210a      	movs	r1, #10
    4cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ce0:	7822      	ldrb	r2, [r4, #0]
    4ce2:	3a30      	subs	r2, #48	; 0x30
    4ce4:	2a09      	cmp	r2, #9
    4ce6:	d800      	bhi.n	4cea <_vfiprintf_r+0xd2>
    4ce8:	e06b      	b.n	4dc2 <_vfiprintf_r+0x1aa>
    4cea:	2800      	cmp	r0, #0
    4cec:	d02a      	beq.n	4d44 <_vfiprintf_r+0x12c>
    4cee:	9309      	str	r3, [sp, #36]	; 0x24
    4cf0:	e028      	b.n	4d44 <_vfiprintf_r+0x12c>
    4cf2:	4b51      	ldr	r3, [pc, #324]	; (4e38 <_vfiprintf_r+0x220>)
    4cf4:	429f      	cmp	r7, r3
    4cf6:	d101      	bne.n	4cfc <_vfiprintf_r+0xe4>
    4cf8:	68b7      	ldr	r7, [r6, #8]
    4cfa:	e79e      	b.n	4c3a <_vfiprintf_r+0x22>
    4cfc:	4b4f      	ldr	r3, [pc, #316]	; (4e3c <_vfiprintf_r+0x224>)
    4cfe:	429f      	cmp	r7, r3
    4d00:	d19b      	bne.n	4c3a <_vfiprintf_r+0x22>
    4d02:	68f7      	ldr	r7, [r6, #12]
    4d04:	e799      	b.n	4c3a <_vfiprintf_r+0x22>
    4d06:	0039      	movs	r1, r7
    4d08:	0030      	movs	r0, r6
    4d0a:	f7ff fcf1 	bl	46f0 <__swsetup_r>
    4d0e:	2800      	cmp	r0, #0
    4d10:	d099      	beq.n	4c46 <_vfiprintf_r+0x2e>
    4d12:	2001      	movs	r0, #1
    4d14:	4240      	negs	r0, r0
    4d16:	b01f      	add	sp, #124	; 0x7c
    4d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d1a:	2b25      	cmp	r3, #37	; 0x25
    4d1c:	d09f      	beq.n	4c5e <_vfiprintf_r+0x46>
    4d1e:	3401      	adds	r4, #1
    4d20:	e79a      	b.n	4c58 <_vfiprintf_r+0x40>
    4d22:	4b44      	ldr	r3, [pc, #272]	; (4e34 <_vfiprintf_r+0x21c>)
    4d24:	6829      	ldr	r1, [r5, #0]
    4d26:	1ac0      	subs	r0, r0, r3
    4d28:	2301      	movs	r3, #1
    4d2a:	4083      	lsls	r3, r0
    4d2c:	430b      	orrs	r3, r1
    4d2e:	602b      	str	r3, [r5, #0]
    4d30:	4664      	mov	r4, ip
    4d32:	e7b7      	b.n	4ca4 <_vfiprintf_r+0x8c>
    4d34:	9b05      	ldr	r3, [sp, #20]
    4d36:	1d18      	adds	r0, r3, #4
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	9005      	str	r0, [sp, #20]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	db3a      	blt.n	4db6 <_vfiprintf_r+0x19e>
    4d40:	9309      	str	r3, [sp, #36]	; 0x24
    4d42:	4664      	mov	r4, ip
    4d44:	7823      	ldrb	r3, [r4, #0]
    4d46:	2b2e      	cmp	r3, #46	; 0x2e
    4d48:	d10b      	bne.n	4d62 <_vfiprintf_r+0x14a>
    4d4a:	7863      	ldrb	r3, [r4, #1]
    4d4c:	1c62      	adds	r2, r4, #1
    4d4e:	2b2a      	cmp	r3, #42	; 0x2a
    4d50:	d13f      	bne.n	4dd2 <_vfiprintf_r+0x1ba>
    4d52:	9b05      	ldr	r3, [sp, #20]
    4d54:	3402      	adds	r4, #2
    4d56:	1d1a      	adds	r2, r3, #4
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	9205      	str	r2, [sp, #20]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	db35      	blt.n	4dcc <_vfiprintf_r+0x1b4>
    4d60:	9307      	str	r3, [sp, #28]
    4d62:	7821      	ldrb	r1, [r4, #0]
    4d64:	2203      	movs	r2, #3
    4d66:	4836      	ldr	r0, [pc, #216]	; (4e40 <_vfiprintf_r+0x228>)
    4d68:	f000 faa4 	bl	52b4 <memchr>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d007      	beq.n	4d80 <_vfiprintf_r+0x168>
    4d70:	4b33      	ldr	r3, [pc, #204]	; (4e40 <_vfiprintf_r+0x228>)
    4d72:	682a      	ldr	r2, [r5, #0]
    4d74:	1ac0      	subs	r0, r0, r3
    4d76:	2340      	movs	r3, #64	; 0x40
    4d78:	4083      	lsls	r3, r0
    4d7a:	4313      	orrs	r3, r2
    4d7c:	602b      	str	r3, [r5, #0]
    4d7e:	3401      	adds	r4, #1
    4d80:	7821      	ldrb	r1, [r4, #0]
    4d82:	1c63      	adds	r3, r4, #1
    4d84:	2206      	movs	r2, #6
    4d86:	482f      	ldr	r0, [pc, #188]	; (4e44 <_vfiprintf_r+0x22c>)
    4d88:	9302      	str	r3, [sp, #8]
    4d8a:	7629      	strb	r1, [r5, #24]
    4d8c:	f000 fa92 	bl	52b4 <memchr>
    4d90:	2800      	cmp	r0, #0
    4d92:	d044      	beq.n	4e1e <_vfiprintf_r+0x206>
    4d94:	4b2c      	ldr	r3, [pc, #176]	; (4e48 <_vfiprintf_r+0x230>)
    4d96:	2b00      	cmp	r3, #0
    4d98:	d12f      	bne.n	4dfa <_vfiprintf_r+0x1e2>
    4d9a:	6829      	ldr	r1, [r5, #0]
    4d9c:	9b05      	ldr	r3, [sp, #20]
    4d9e:	2207      	movs	r2, #7
    4da0:	05c9      	lsls	r1, r1, #23
    4da2:	d528      	bpl.n	4df6 <_vfiprintf_r+0x1de>
    4da4:	189b      	adds	r3, r3, r2
    4da6:	4393      	bics	r3, r2
    4da8:	3308      	adds	r3, #8
    4daa:	9305      	str	r3, [sp, #20]
    4dac:	696b      	ldr	r3, [r5, #20]
    4dae:	9a03      	ldr	r2, [sp, #12]
    4db0:	189b      	adds	r3, r3, r2
    4db2:	616b      	str	r3, [r5, #20]
    4db4:	e74f      	b.n	4c56 <_vfiprintf_r+0x3e>
    4db6:	425b      	negs	r3, r3
    4db8:	60eb      	str	r3, [r5, #12]
    4dba:	2302      	movs	r3, #2
    4dbc:	430b      	orrs	r3, r1
    4dbe:	602b      	str	r3, [r5, #0]
    4dc0:	e7bf      	b.n	4d42 <_vfiprintf_r+0x12a>
    4dc2:	434b      	muls	r3, r1
    4dc4:	3401      	adds	r4, #1
    4dc6:	189b      	adds	r3, r3, r2
    4dc8:	2001      	movs	r0, #1
    4dca:	e789      	b.n	4ce0 <_vfiprintf_r+0xc8>
    4dcc:	2301      	movs	r3, #1
    4dce:	425b      	negs	r3, r3
    4dd0:	e7c6      	b.n	4d60 <_vfiprintf_r+0x148>
    4dd2:	2300      	movs	r3, #0
    4dd4:	0014      	movs	r4, r2
    4dd6:	200a      	movs	r0, #10
    4dd8:	001a      	movs	r2, r3
    4dda:	606b      	str	r3, [r5, #4]
    4ddc:	7821      	ldrb	r1, [r4, #0]
    4dde:	3930      	subs	r1, #48	; 0x30
    4de0:	2909      	cmp	r1, #9
    4de2:	d903      	bls.n	4dec <_vfiprintf_r+0x1d4>
    4de4:	2b00      	cmp	r3, #0
    4de6:	d0bc      	beq.n	4d62 <_vfiprintf_r+0x14a>
    4de8:	9207      	str	r2, [sp, #28]
    4dea:	e7ba      	b.n	4d62 <_vfiprintf_r+0x14a>
    4dec:	4342      	muls	r2, r0
    4dee:	3401      	adds	r4, #1
    4df0:	1852      	adds	r2, r2, r1
    4df2:	2301      	movs	r3, #1
    4df4:	e7f2      	b.n	4ddc <_vfiprintf_r+0x1c4>
    4df6:	3307      	adds	r3, #7
    4df8:	e7d5      	b.n	4da6 <_vfiprintf_r+0x18e>
    4dfa:	ab05      	add	r3, sp, #20
    4dfc:	9300      	str	r3, [sp, #0]
    4dfe:	003a      	movs	r2, r7
    4e00:	4b12      	ldr	r3, [pc, #72]	; (4e4c <_vfiprintf_r+0x234>)
    4e02:	0029      	movs	r1, r5
    4e04:	0030      	movs	r0, r6
    4e06:	e000      	b.n	4e0a <_vfiprintf_r+0x1f2>
    4e08:	bf00      	nop
    4e0a:	9003      	str	r0, [sp, #12]
    4e0c:	9b03      	ldr	r3, [sp, #12]
    4e0e:	3301      	adds	r3, #1
    4e10:	d1cc      	bne.n	4dac <_vfiprintf_r+0x194>
    4e12:	89bb      	ldrh	r3, [r7, #12]
    4e14:	065b      	lsls	r3, r3, #25
    4e16:	d500      	bpl.n	4e1a <_vfiprintf_r+0x202>
    4e18:	e77b      	b.n	4d12 <_vfiprintf_r+0xfa>
    4e1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4e1c:	e77b      	b.n	4d16 <_vfiprintf_r+0xfe>
    4e1e:	ab05      	add	r3, sp, #20
    4e20:	9300      	str	r3, [sp, #0]
    4e22:	003a      	movs	r2, r7
    4e24:	4b09      	ldr	r3, [pc, #36]	; (4e4c <_vfiprintf_r+0x234>)
    4e26:	0029      	movs	r1, r5
    4e28:	0030      	movs	r0, r6
    4e2a:	f000 f87f 	bl	4f2c <_printf_i>
    4e2e:	e7ec      	b.n	4e0a <_vfiprintf_r+0x1f2>
    4e30:	00005678 	.word	0x00005678
    4e34:	000056b8 	.word	0x000056b8
    4e38:	00005698 	.word	0x00005698
    4e3c:	00005658 	.word	0x00005658
    4e40:	000056be 	.word	0x000056be
    4e44:	000056c2 	.word	0x000056c2
    4e48:	00000000 	.word	0x00000000
    4e4c:	00004bf3 	.word	0x00004bf3

00004e50 <_printf_common>:
    4e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e52:	0015      	movs	r5, r2
    4e54:	9301      	str	r3, [sp, #4]
    4e56:	688a      	ldr	r2, [r1, #8]
    4e58:	690b      	ldr	r3, [r1, #16]
    4e5a:	9000      	str	r0, [sp, #0]
    4e5c:	000c      	movs	r4, r1
    4e5e:	4293      	cmp	r3, r2
    4e60:	da00      	bge.n	4e64 <_printf_common+0x14>
    4e62:	0013      	movs	r3, r2
    4e64:	0022      	movs	r2, r4
    4e66:	602b      	str	r3, [r5, #0]
    4e68:	3243      	adds	r2, #67	; 0x43
    4e6a:	7812      	ldrb	r2, [r2, #0]
    4e6c:	2a00      	cmp	r2, #0
    4e6e:	d001      	beq.n	4e74 <_printf_common+0x24>
    4e70:	3301      	adds	r3, #1
    4e72:	602b      	str	r3, [r5, #0]
    4e74:	6823      	ldr	r3, [r4, #0]
    4e76:	069b      	lsls	r3, r3, #26
    4e78:	d502      	bpl.n	4e80 <_printf_common+0x30>
    4e7a:	682b      	ldr	r3, [r5, #0]
    4e7c:	3302      	adds	r3, #2
    4e7e:	602b      	str	r3, [r5, #0]
    4e80:	2706      	movs	r7, #6
    4e82:	6823      	ldr	r3, [r4, #0]
    4e84:	401f      	ands	r7, r3
    4e86:	d027      	beq.n	4ed8 <_printf_common+0x88>
    4e88:	0023      	movs	r3, r4
    4e8a:	3343      	adds	r3, #67	; 0x43
    4e8c:	781b      	ldrb	r3, [r3, #0]
    4e8e:	1e5a      	subs	r2, r3, #1
    4e90:	4193      	sbcs	r3, r2
    4e92:	6822      	ldr	r2, [r4, #0]
    4e94:	0692      	lsls	r2, r2, #26
    4e96:	d430      	bmi.n	4efa <_printf_common+0xaa>
    4e98:	0022      	movs	r2, r4
    4e9a:	9901      	ldr	r1, [sp, #4]
    4e9c:	3243      	adds	r2, #67	; 0x43
    4e9e:	9800      	ldr	r0, [sp, #0]
    4ea0:	9e08      	ldr	r6, [sp, #32]
    4ea2:	47b0      	blx	r6
    4ea4:	1c43      	adds	r3, r0, #1
    4ea6:	d025      	beq.n	4ef4 <_printf_common+0xa4>
    4ea8:	2306      	movs	r3, #6
    4eaa:	6820      	ldr	r0, [r4, #0]
    4eac:	682a      	ldr	r2, [r5, #0]
    4eae:	68e1      	ldr	r1, [r4, #12]
    4eb0:	4003      	ands	r3, r0
    4eb2:	2500      	movs	r5, #0
    4eb4:	2b04      	cmp	r3, #4
    4eb6:	d103      	bne.n	4ec0 <_printf_common+0x70>
    4eb8:	1a8d      	subs	r5, r1, r2
    4eba:	43eb      	mvns	r3, r5
    4ebc:	17db      	asrs	r3, r3, #31
    4ebe:	401d      	ands	r5, r3
    4ec0:	68a3      	ldr	r3, [r4, #8]
    4ec2:	6922      	ldr	r2, [r4, #16]
    4ec4:	4293      	cmp	r3, r2
    4ec6:	dd01      	ble.n	4ecc <_printf_common+0x7c>
    4ec8:	1a9b      	subs	r3, r3, r2
    4eca:	18ed      	adds	r5, r5, r3
    4ecc:	2700      	movs	r7, #0
    4ece:	42bd      	cmp	r5, r7
    4ed0:	d120      	bne.n	4f14 <_printf_common+0xc4>
    4ed2:	2000      	movs	r0, #0
    4ed4:	e010      	b.n	4ef8 <_printf_common+0xa8>
    4ed6:	3701      	adds	r7, #1
    4ed8:	68e3      	ldr	r3, [r4, #12]
    4eda:	682a      	ldr	r2, [r5, #0]
    4edc:	1a9b      	subs	r3, r3, r2
    4ede:	429f      	cmp	r7, r3
    4ee0:	dad2      	bge.n	4e88 <_printf_common+0x38>
    4ee2:	0022      	movs	r2, r4
    4ee4:	2301      	movs	r3, #1
    4ee6:	3219      	adds	r2, #25
    4ee8:	9901      	ldr	r1, [sp, #4]
    4eea:	9800      	ldr	r0, [sp, #0]
    4eec:	9e08      	ldr	r6, [sp, #32]
    4eee:	47b0      	blx	r6
    4ef0:	1c43      	adds	r3, r0, #1
    4ef2:	d1f0      	bne.n	4ed6 <_printf_common+0x86>
    4ef4:	2001      	movs	r0, #1
    4ef6:	4240      	negs	r0, r0
    4ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4efa:	2030      	movs	r0, #48	; 0x30
    4efc:	18e1      	adds	r1, r4, r3
    4efe:	3143      	adds	r1, #67	; 0x43
    4f00:	7008      	strb	r0, [r1, #0]
    4f02:	0021      	movs	r1, r4
    4f04:	1c5a      	adds	r2, r3, #1
    4f06:	3145      	adds	r1, #69	; 0x45
    4f08:	7809      	ldrb	r1, [r1, #0]
    4f0a:	18a2      	adds	r2, r4, r2
    4f0c:	3243      	adds	r2, #67	; 0x43
    4f0e:	3302      	adds	r3, #2
    4f10:	7011      	strb	r1, [r2, #0]
    4f12:	e7c1      	b.n	4e98 <_printf_common+0x48>
    4f14:	0022      	movs	r2, r4
    4f16:	2301      	movs	r3, #1
    4f18:	321a      	adds	r2, #26
    4f1a:	9901      	ldr	r1, [sp, #4]
    4f1c:	9800      	ldr	r0, [sp, #0]
    4f1e:	9e08      	ldr	r6, [sp, #32]
    4f20:	47b0      	blx	r6
    4f22:	1c43      	adds	r3, r0, #1
    4f24:	d0e6      	beq.n	4ef4 <_printf_common+0xa4>
    4f26:	3701      	adds	r7, #1
    4f28:	e7d1      	b.n	4ece <_printf_common+0x7e>
	...

00004f2c <_printf_i>:
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	b08b      	sub	sp, #44	; 0x2c
    4f30:	9206      	str	r2, [sp, #24]
    4f32:	000a      	movs	r2, r1
    4f34:	3243      	adds	r2, #67	; 0x43
    4f36:	9307      	str	r3, [sp, #28]
    4f38:	9005      	str	r0, [sp, #20]
    4f3a:	9204      	str	r2, [sp, #16]
    4f3c:	7e0a      	ldrb	r2, [r1, #24]
    4f3e:	000c      	movs	r4, r1
    4f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4f42:	2a6e      	cmp	r2, #110	; 0x6e
    4f44:	d100      	bne.n	4f48 <_printf_i+0x1c>
    4f46:	e08f      	b.n	5068 <_printf_i+0x13c>
    4f48:	d817      	bhi.n	4f7a <_printf_i+0x4e>
    4f4a:	2a63      	cmp	r2, #99	; 0x63
    4f4c:	d02c      	beq.n	4fa8 <_printf_i+0x7c>
    4f4e:	d808      	bhi.n	4f62 <_printf_i+0x36>
    4f50:	2a00      	cmp	r2, #0
    4f52:	d100      	bne.n	4f56 <_printf_i+0x2a>
    4f54:	e099      	b.n	508a <_printf_i+0x15e>
    4f56:	2a58      	cmp	r2, #88	; 0x58
    4f58:	d054      	beq.n	5004 <_printf_i+0xd8>
    4f5a:	0026      	movs	r6, r4
    4f5c:	3642      	adds	r6, #66	; 0x42
    4f5e:	7032      	strb	r2, [r6, #0]
    4f60:	e029      	b.n	4fb6 <_printf_i+0x8a>
    4f62:	2a64      	cmp	r2, #100	; 0x64
    4f64:	d001      	beq.n	4f6a <_printf_i+0x3e>
    4f66:	2a69      	cmp	r2, #105	; 0x69
    4f68:	d1f7      	bne.n	4f5a <_printf_i+0x2e>
    4f6a:	6821      	ldr	r1, [r4, #0]
    4f6c:	681a      	ldr	r2, [r3, #0]
    4f6e:	0608      	lsls	r0, r1, #24
    4f70:	d523      	bpl.n	4fba <_printf_i+0x8e>
    4f72:	1d11      	adds	r1, r2, #4
    4f74:	6019      	str	r1, [r3, #0]
    4f76:	6815      	ldr	r5, [r2, #0]
    4f78:	e025      	b.n	4fc6 <_printf_i+0x9a>
    4f7a:	2a73      	cmp	r2, #115	; 0x73
    4f7c:	d100      	bne.n	4f80 <_printf_i+0x54>
    4f7e:	e088      	b.n	5092 <_printf_i+0x166>
    4f80:	d808      	bhi.n	4f94 <_printf_i+0x68>
    4f82:	2a6f      	cmp	r2, #111	; 0x6f
    4f84:	d029      	beq.n	4fda <_printf_i+0xae>
    4f86:	2a70      	cmp	r2, #112	; 0x70
    4f88:	d1e7      	bne.n	4f5a <_printf_i+0x2e>
    4f8a:	2220      	movs	r2, #32
    4f8c:	6809      	ldr	r1, [r1, #0]
    4f8e:	430a      	orrs	r2, r1
    4f90:	6022      	str	r2, [r4, #0]
    4f92:	e003      	b.n	4f9c <_printf_i+0x70>
    4f94:	2a75      	cmp	r2, #117	; 0x75
    4f96:	d020      	beq.n	4fda <_printf_i+0xae>
    4f98:	2a78      	cmp	r2, #120	; 0x78
    4f9a:	d1de      	bne.n	4f5a <_printf_i+0x2e>
    4f9c:	0022      	movs	r2, r4
    4f9e:	2178      	movs	r1, #120	; 0x78
    4fa0:	3245      	adds	r2, #69	; 0x45
    4fa2:	7011      	strb	r1, [r2, #0]
    4fa4:	4a6c      	ldr	r2, [pc, #432]	; (5158 <_printf_i+0x22c>)
    4fa6:	e030      	b.n	500a <_printf_i+0xde>
    4fa8:	000e      	movs	r6, r1
    4faa:	681a      	ldr	r2, [r3, #0]
    4fac:	3642      	adds	r6, #66	; 0x42
    4fae:	1d11      	adds	r1, r2, #4
    4fb0:	6019      	str	r1, [r3, #0]
    4fb2:	6813      	ldr	r3, [r2, #0]
    4fb4:	7033      	strb	r3, [r6, #0]
    4fb6:	2301      	movs	r3, #1
    4fb8:	e079      	b.n	50ae <_printf_i+0x182>
    4fba:	0649      	lsls	r1, r1, #25
    4fbc:	d5d9      	bpl.n	4f72 <_printf_i+0x46>
    4fbe:	1d11      	adds	r1, r2, #4
    4fc0:	6019      	str	r1, [r3, #0]
    4fc2:	2300      	movs	r3, #0
    4fc4:	5ed5      	ldrsh	r5, [r2, r3]
    4fc6:	2d00      	cmp	r5, #0
    4fc8:	da03      	bge.n	4fd2 <_printf_i+0xa6>
    4fca:	232d      	movs	r3, #45	; 0x2d
    4fcc:	9a04      	ldr	r2, [sp, #16]
    4fce:	426d      	negs	r5, r5
    4fd0:	7013      	strb	r3, [r2, #0]
    4fd2:	4b62      	ldr	r3, [pc, #392]	; (515c <_printf_i+0x230>)
    4fd4:	270a      	movs	r7, #10
    4fd6:	9303      	str	r3, [sp, #12]
    4fd8:	e02f      	b.n	503a <_printf_i+0x10e>
    4fda:	6820      	ldr	r0, [r4, #0]
    4fdc:	6819      	ldr	r1, [r3, #0]
    4fde:	0605      	lsls	r5, r0, #24
    4fe0:	d503      	bpl.n	4fea <_printf_i+0xbe>
    4fe2:	1d08      	adds	r0, r1, #4
    4fe4:	6018      	str	r0, [r3, #0]
    4fe6:	680d      	ldr	r5, [r1, #0]
    4fe8:	e005      	b.n	4ff6 <_printf_i+0xca>
    4fea:	0640      	lsls	r0, r0, #25
    4fec:	d5f9      	bpl.n	4fe2 <_printf_i+0xb6>
    4fee:	680d      	ldr	r5, [r1, #0]
    4ff0:	1d08      	adds	r0, r1, #4
    4ff2:	6018      	str	r0, [r3, #0]
    4ff4:	b2ad      	uxth	r5, r5
    4ff6:	4b59      	ldr	r3, [pc, #356]	; (515c <_printf_i+0x230>)
    4ff8:	2708      	movs	r7, #8
    4ffa:	9303      	str	r3, [sp, #12]
    4ffc:	2a6f      	cmp	r2, #111	; 0x6f
    4ffe:	d018      	beq.n	5032 <_printf_i+0x106>
    5000:	270a      	movs	r7, #10
    5002:	e016      	b.n	5032 <_printf_i+0x106>
    5004:	3145      	adds	r1, #69	; 0x45
    5006:	700a      	strb	r2, [r1, #0]
    5008:	4a54      	ldr	r2, [pc, #336]	; (515c <_printf_i+0x230>)
    500a:	9203      	str	r2, [sp, #12]
    500c:	681a      	ldr	r2, [r3, #0]
    500e:	6821      	ldr	r1, [r4, #0]
    5010:	1d10      	adds	r0, r2, #4
    5012:	6018      	str	r0, [r3, #0]
    5014:	6815      	ldr	r5, [r2, #0]
    5016:	0608      	lsls	r0, r1, #24
    5018:	d522      	bpl.n	5060 <_printf_i+0x134>
    501a:	07cb      	lsls	r3, r1, #31
    501c:	d502      	bpl.n	5024 <_printf_i+0xf8>
    501e:	2320      	movs	r3, #32
    5020:	4319      	orrs	r1, r3
    5022:	6021      	str	r1, [r4, #0]
    5024:	2710      	movs	r7, #16
    5026:	2d00      	cmp	r5, #0
    5028:	d103      	bne.n	5032 <_printf_i+0x106>
    502a:	2320      	movs	r3, #32
    502c:	6822      	ldr	r2, [r4, #0]
    502e:	439a      	bics	r2, r3
    5030:	6022      	str	r2, [r4, #0]
    5032:	0023      	movs	r3, r4
    5034:	2200      	movs	r2, #0
    5036:	3343      	adds	r3, #67	; 0x43
    5038:	701a      	strb	r2, [r3, #0]
    503a:	6863      	ldr	r3, [r4, #4]
    503c:	60a3      	str	r3, [r4, #8]
    503e:	2b00      	cmp	r3, #0
    5040:	db5c      	blt.n	50fc <_printf_i+0x1d0>
    5042:	2204      	movs	r2, #4
    5044:	6821      	ldr	r1, [r4, #0]
    5046:	4391      	bics	r1, r2
    5048:	6021      	str	r1, [r4, #0]
    504a:	2d00      	cmp	r5, #0
    504c:	d158      	bne.n	5100 <_printf_i+0x1d4>
    504e:	9e04      	ldr	r6, [sp, #16]
    5050:	2b00      	cmp	r3, #0
    5052:	d064      	beq.n	511e <_printf_i+0x1f2>
    5054:	0026      	movs	r6, r4
    5056:	9b03      	ldr	r3, [sp, #12]
    5058:	3642      	adds	r6, #66	; 0x42
    505a:	781b      	ldrb	r3, [r3, #0]
    505c:	7033      	strb	r3, [r6, #0]
    505e:	e05e      	b.n	511e <_printf_i+0x1f2>
    5060:	0648      	lsls	r0, r1, #25
    5062:	d5da      	bpl.n	501a <_printf_i+0xee>
    5064:	b2ad      	uxth	r5, r5
    5066:	e7d8      	b.n	501a <_printf_i+0xee>
    5068:	6809      	ldr	r1, [r1, #0]
    506a:	681a      	ldr	r2, [r3, #0]
    506c:	0608      	lsls	r0, r1, #24
    506e:	d505      	bpl.n	507c <_printf_i+0x150>
    5070:	1d11      	adds	r1, r2, #4
    5072:	6019      	str	r1, [r3, #0]
    5074:	6813      	ldr	r3, [r2, #0]
    5076:	6962      	ldr	r2, [r4, #20]
    5078:	601a      	str	r2, [r3, #0]
    507a:	e006      	b.n	508a <_printf_i+0x15e>
    507c:	0649      	lsls	r1, r1, #25
    507e:	d5f7      	bpl.n	5070 <_printf_i+0x144>
    5080:	1d11      	adds	r1, r2, #4
    5082:	6019      	str	r1, [r3, #0]
    5084:	6813      	ldr	r3, [r2, #0]
    5086:	8aa2      	ldrh	r2, [r4, #20]
    5088:	801a      	strh	r2, [r3, #0]
    508a:	2300      	movs	r3, #0
    508c:	9e04      	ldr	r6, [sp, #16]
    508e:	6123      	str	r3, [r4, #16]
    5090:	e054      	b.n	513c <_printf_i+0x210>
    5092:	681a      	ldr	r2, [r3, #0]
    5094:	1d11      	adds	r1, r2, #4
    5096:	6019      	str	r1, [r3, #0]
    5098:	6816      	ldr	r6, [r2, #0]
    509a:	2100      	movs	r1, #0
    509c:	6862      	ldr	r2, [r4, #4]
    509e:	0030      	movs	r0, r6
    50a0:	f000 f908 	bl	52b4 <memchr>
    50a4:	2800      	cmp	r0, #0
    50a6:	d001      	beq.n	50ac <_printf_i+0x180>
    50a8:	1b80      	subs	r0, r0, r6
    50aa:	6060      	str	r0, [r4, #4]
    50ac:	6863      	ldr	r3, [r4, #4]
    50ae:	6123      	str	r3, [r4, #16]
    50b0:	2300      	movs	r3, #0
    50b2:	9a04      	ldr	r2, [sp, #16]
    50b4:	7013      	strb	r3, [r2, #0]
    50b6:	e041      	b.n	513c <_printf_i+0x210>
    50b8:	6923      	ldr	r3, [r4, #16]
    50ba:	0032      	movs	r2, r6
    50bc:	9906      	ldr	r1, [sp, #24]
    50be:	9805      	ldr	r0, [sp, #20]
    50c0:	9d07      	ldr	r5, [sp, #28]
    50c2:	47a8      	blx	r5
    50c4:	1c43      	adds	r3, r0, #1
    50c6:	d043      	beq.n	5150 <_printf_i+0x224>
    50c8:	6823      	ldr	r3, [r4, #0]
    50ca:	2500      	movs	r5, #0
    50cc:	079b      	lsls	r3, r3, #30
    50ce:	d40f      	bmi.n	50f0 <_printf_i+0x1c4>
    50d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    50d2:	68e0      	ldr	r0, [r4, #12]
    50d4:	4298      	cmp	r0, r3
    50d6:	da3d      	bge.n	5154 <_printf_i+0x228>
    50d8:	0018      	movs	r0, r3
    50da:	e03b      	b.n	5154 <_printf_i+0x228>
    50dc:	0022      	movs	r2, r4
    50de:	2301      	movs	r3, #1
    50e0:	3219      	adds	r2, #25
    50e2:	9906      	ldr	r1, [sp, #24]
    50e4:	9805      	ldr	r0, [sp, #20]
    50e6:	9e07      	ldr	r6, [sp, #28]
    50e8:	47b0      	blx	r6
    50ea:	1c43      	adds	r3, r0, #1
    50ec:	d030      	beq.n	5150 <_printf_i+0x224>
    50ee:	3501      	adds	r5, #1
    50f0:	68e3      	ldr	r3, [r4, #12]
    50f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    50f4:	1a9b      	subs	r3, r3, r2
    50f6:	429d      	cmp	r5, r3
    50f8:	dbf0      	blt.n	50dc <_printf_i+0x1b0>
    50fa:	e7e9      	b.n	50d0 <_printf_i+0x1a4>
    50fc:	2d00      	cmp	r5, #0
    50fe:	d0a9      	beq.n	5054 <_printf_i+0x128>
    5100:	9e04      	ldr	r6, [sp, #16]
    5102:	0028      	movs	r0, r5
    5104:	0039      	movs	r1, r7
    5106:	f7fe f999 	bl	343c <__aeabi_uidivmod>
    510a:	9b03      	ldr	r3, [sp, #12]
    510c:	3e01      	subs	r6, #1
    510e:	5c5b      	ldrb	r3, [r3, r1]
    5110:	0028      	movs	r0, r5
    5112:	7033      	strb	r3, [r6, #0]
    5114:	0039      	movs	r1, r7
    5116:	f7fe f90b 	bl	3330 <__udivsi3>
    511a:	1e05      	subs	r5, r0, #0
    511c:	d1f1      	bne.n	5102 <_printf_i+0x1d6>
    511e:	2f08      	cmp	r7, #8
    5120:	d109      	bne.n	5136 <_printf_i+0x20a>
    5122:	6823      	ldr	r3, [r4, #0]
    5124:	07db      	lsls	r3, r3, #31
    5126:	d506      	bpl.n	5136 <_printf_i+0x20a>
    5128:	6863      	ldr	r3, [r4, #4]
    512a:	6922      	ldr	r2, [r4, #16]
    512c:	4293      	cmp	r3, r2
    512e:	dc02      	bgt.n	5136 <_printf_i+0x20a>
    5130:	2330      	movs	r3, #48	; 0x30
    5132:	3e01      	subs	r6, #1
    5134:	7033      	strb	r3, [r6, #0]
    5136:	9b04      	ldr	r3, [sp, #16]
    5138:	1b9b      	subs	r3, r3, r6
    513a:	6123      	str	r3, [r4, #16]
    513c:	9b07      	ldr	r3, [sp, #28]
    513e:	aa09      	add	r2, sp, #36	; 0x24
    5140:	9300      	str	r3, [sp, #0]
    5142:	0021      	movs	r1, r4
    5144:	9b06      	ldr	r3, [sp, #24]
    5146:	9805      	ldr	r0, [sp, #20]
    5148:	f7ff fe82 	bl	4e50 <_printf_common>
    514c:	1c43      	adds	r3, r0, #1
    514e:	d1b3      	bne.n	50b8 <_printf_i+0x18c>
    5150:	2001      	movs	r0, #1
    5152:	4240      	negs	r0, r0
    5154:	b00b      	add	sp, #44	; 0x2c
    5156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5158:	000056da 	.word	0x000056da
    515c:	000056c9 	.word	0x000056c9

00005160 <__sread>:
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	000c      	movs	r4, r1
    5164:	250e      	movs	r5, #14
    5166:	5f49      	ldrsh	r1, [r1, r5]
    5168:	f000 f8b0 	bl	52cc <_read_r>
    516c:	2800      	cmp	r0, #0
    516e:	db03      	blt.n	5178 <__sread+0x18>
    5170:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5172:	181b      	adds	r3, r3, r0
    5174:	6563      	str	r3, [r4, #84]	; 0x54
    5176:	bd70      	pop	{r4, r5, r6, pc}
    5178:	89a3      	ldrh	r3, [r4, #12]
    517a:	4a02      	ldr	r2, [pc, #8]	; (5184 <__sread+0x24>)
    517c:	4013      	ands	r3, r2
    517e:	81a3      	strh	r3, [r4, #12]
    5180:	e7f9      	b.n	5176 <__sread+0x16>
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	ffffefff 	.word	0xffffefff

00005188 <__swrite>:
    5188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    518a:	001f      	movs	r7, r3
    518c:	898b      	ldrh	r3, [r1, #12]
    518e:	0005      	movs	r5, r0
    5190:	000c      	movs	r4, r1
    5192:	0016      	movs	r6, r2
    5194:	05db      	lsls	r3, r3, #23
    5196:	d505      	bpl.n	51a4 <__swrite+0x1c>
    5198:	230e      	movs	r3, #14
    519a:	5ec9      	ldrsh	r1, [r1, r3]
    519c:	2200      	movs	r2, #0
    519e:	2302      	movs	r3, #2
    51a0:	f000 f874 	bl	528c <_lseek_r>
    51a4:	89a3      	ldrh	r3, [r4, #12]
    51a6:	4a05      	ldr	r2, [pc, #20]	; (51bc <__swrite+0x34>)
    51a8:	0028      	movs	r0, r5
    51aa:	4013      	ands	r3, r2
    51ac:	81a3      	strh	r3, [r4, #12]
    51ae:	0032      	movs	r2, r6
    51b0:	230e      	movs	r3, #14
    51b2:	5ee1      	ldrsh	r1, [r4, r3]
    51b4:	003b      	movs	r3, r7
    51b6:	f000 f81f 	bl	51f8 <_write_r>
    51ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51bc:	ffffefff 	.word	0xffffefff

000051c0 <__sseek>:
    51c0:	b570      	push	{r4, r5, r6, lr}
    51c2:	000c      	movs	r4, r1
    51c4:	250e      	movs	r5, #14
    51c6:	5f49      	ldrsh	r1, [r1, r5]
    51c8:	f000 f860 	bl	528c <_lseek_r>
    51cc:	89a3      	ldrh	r3, [r4, #12]
    51ce:	1c42      	adds	r2, r0, #1
    51d0:	d103      	bne.n	51da <__sseek+0x1a>
    51d2:	4a05      	ldr	r2, [pc, #20]	; (51e8 <__sseek+0x28>)
    51d4:	4013      	ands	r3, r2
    51d6:	81a3      	strh	r3, [r4, #12]
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	2280      	movs	r2, #128	; 0x80
    51dc:	0152      	lsls	r2, r2, #5
    51de:	4313      	orrs	r3, r2
    51e0:	81a3      	strh	r3, [r4, #12]
    51e2:	6560      	str	r0, [r4, #84]	; 0x54
    51e4:	e7f8      	b.n	51d8 <__sseek+0x18>
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	ffffefff 	.word	0xffffefff

000051ec <__sclose>:
    51ec:	b510      	push	{r4, lr}
    51ee:	230e      	movs	r3, #14
    51f0:	5ec9      	ldrsh	r1, [r1, r3]
    51f2:	f000 f815 	bl	5220 <_close_r>
    51f6:	bd10      	pop	{r4, pc}

000051f8 <_write_r>:
    51f8:	b570      	push	{r4, r5, r6, lr}
    51fa:	0005      	movs	r5, r0
    51fc:	0008      	movs	r0, r1
    51fe:	0011      	movs	r1, r2
    5200:	2200      	movs	r2, #0
    5202:	4c06      	ldr	r4, [pc, #24]	; (521c <_write_r+0x24>)
    5204:	6022      	str	r2, [r4, #0]
    5206:	001a      	movs	r2, r3
    5208:	f7fd fee2 	bl	2fd0 <_write>
    520c:	1c43      	adds	r3, r0, #1
    520e:	d103      	bne.n	5218 <_write_r+0x20>
    5210:	6823      	ldr	r3, [r4, #0]
    5212:	2b00      	cmp	r3, #0
    5214:	d000      	beq.n	5218 <_write_r+0x20>
    5216:	602b      	str	r3, [r5, #0]
    5218:	bd70      	pop	{r4, r5, r6, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	200002f8 	.word	0x200002f8

00005220 <_close_r>:
    5220:	2300      	movs	r3, #0
    5222:	b570      	push	{r4, r5, r6, lr}
    5224:	4c06      	ldr	r4, [pc, #24]	; (5240 <_close_r+0x20>)
    5226:	0005      	movs	r5, r0
    5228:	0008      	movs	r0, r1
    522a:	6023      	str	r3, [r4, #0]
    522c:	f7fd ff0a 	bl	3044 <_close>
    5230:	1c43      	adds	r3, r0, #1
    5232:	d103      	bne.n	523c <_close_r+0x1c>
    5234:	6823      	ldr	r3, [r4, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d000      	beq.n	523c <_close_r+0x1c>
    523a:	602b      	str	r3, [r5, #0]
    523c:	bd70      	pop	{r4, r5, r6, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	200002f8 	.word	0x200002f8

00005244 <_fstat_r>:
    5244:	2300      	movs	r3, #0
    5246:	b570      	push	{r4, r5, r6, lr}
    5248:	4c06      	ldr	r4, [pc, #24]	; (5264 <_fstat_r+0x20>)
    524a:	0005      	movs	r5, r0
    524c:	0008      	movs	r0, r1
    524e:	0011      	movs	r1, r2
    5250:	6023      	str	r3, [r4, #0]
    5252:	f7fd fefa 	bl	304a <_fstat>
    5256:	1c43      	adds	r3, r0, #1
    5258:	d103      	bne.n	5262 <_fstat_r+0x1e>
    525a:	6823      	ldr	r3, [r4, #0]
    525c:	2b00      	cmp	r3, #0
    525e:	d000      	beq.n	5262 <_fstat_r+0x1e>
    5260:	602b      	str	r3, [r5, #0]
    5262:	bd70      	pop	{r4, r5, r6, pc}
    5264:	200002f8 	.word	0x200002f8

00005268 <_isatty_r>:
    5268:	2300      	movs	r3, #0
    526a:	b570      	push	{r4, r5, r6, lr}
    526c:	4c06      	ldr	r4, [pc, #24]	; (5288 <_isatty_r+0x20>)
    526e:	0005      	movs	r5, r0
    5270:	0008      	movs	r0, r1
    5272:	6023      	str	r3, [r4, #0]
    5274:	f7fd feee 	bl	3054 <_isatty>
    5278:	1c43      	adds	r3, r0, #1
    527a:	d103      	bne.n	5284 <_isatty_r+0x1c>
    527c:	6823      	ldr	r3, [r4, #0]
    527e:	2b00      	cmp	r3, #0
    5280:	d000      	beq.n	5284 <_isatty_r+0x1c>
    5282:	602b      	str	r3, [r5, #0]
    5284:	bd70      	pop	{r4, r5, r6, pc}
    5286:	46c0      	nop			; (mov r8, r8)
    5288:	200002f8 	.word	0x200002f8

0000528c <_lseek_r>:
    528c:	b570      	push	{r4, r5, r6, lr}
    528e:	0005      	movs	r5, r0
    5290:	0008      	movs	r0, r1
    5292:	0011      	movs	r1, r2
    5294:	2200      	movs	r2, #0
    5296:	4c06      	ldr	r4, [pc, #24]	; (52b0 <_lseek_r+0x24>)
    5298:	6022      	str	r2, [r4, #0]
    529a:	001a      	movs	r2, r3
    529c:	f7fd fedc 	bl	3058 <_lseek>
    52a0:	1c43      	adds	r3, r0, #1
    52a2:	d103      	bne.n	52ac <_lseek_r+0x20>
    52a4:	6823      	ldr	r3, [r4, #0]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d000      	beq.n	52ac <_lseek_r+0x20>
    52aa:	602b      	str	r3, [r5, #0]
    52ac:	bd70      	pop	{r4, r5, r6, pc}
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	200002f8 	.word	0x200002f8

000052b4 <memchr>:
    52b4:	b2c9      	uxtb	r1, r1
    52b6:	1882      	adds	r2, r0, r2
    52b8:	4290      	cmp	r0, r2
    52ba:	d101      	bne.n	52c0 <memchr+0xc>
    52bc:	2000      	movs	r0, #0
    52be:	4770      	bx	lr
    52c0:	7803      	ldrb	r3, [r0, #0]
    52c2:	428b      	cmp	r3, r1
    52c4:	d0fb      	beq.n	52be <memchr+0xa>
    52c6:	3001      	adds	r0, #1
    52c8:	e7f6      	b.n	52b8 <memchr+0x4>
	...

000052cc <_read_r>:
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	0005      	movs	r5, r0
    52d0:	0008      	movs	r0, r1
    52d2:	0011      	movs	r1, r2
    52d4:	2200      	movs	r2, #0
    52d6:	4c06      	ldr	r4, [pc, #24]	; (52f0 <_read_r+0x24>)
    52d8:	6022      	str	r2, [r4, #0]
    52da:	001a      	movs	r2, r3
    52dc:	f7fd fe56 	bl	2f8c <_read>
    52e0:	1c43      	adds	r3, r0, #1
    52e2:	d103      	bne.n	52ec <_read_r+0x20>
    52e4:	6823      	ldr	r3, [r4, #0]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d000      	beq.n	52ec <_read_r+0x20>
    52ea:	602b      	str	r3, [r5, #0]
    52ec:	bd70      	pop	{r4, r5, r6, pc}
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	200002f8 	.word	0x200002f8
    52f4:	0000087a 	.word	0x0000087a
    52f8:	00000ac6 	.word	0x00000ac6
    52fc:	00000ac6 	.word	0x00000ac6
    5300:	00000ac6 	.word	0x00000ac6
    5304:	00000ac6 	.word	0x00000ac6
    5308:	00000ac6 	.word	0x00000ac6
    530c:	00000ac6 	.word	0x00000ac6
    5310:	00000ac6 	.word	0x00000ac6
    5314:	00000ac6 	.word	0x00000ac6
    5318:	00000ac6 	.word	0x00000ac6
    531c:	00000ac6 	.word	0x00000ac6
    5320:	00000ac6 	.word	0x00000ac6
    5324:	00000ac6 	.word	0x00000ac6
    5328:	00000ac6 	.word	0x00000ac6
    532c:	00000ac6 	.word	0x00000ac6
    5330:	00000ac6 	.word	0x00000ac6
    5334:	00000862 	.word	0x00000862
    5338:	00000ac6 	.word	0x00000ac6
    533c:	00000ac6 	.word	0x00000ac6
    5340:	00000ac6 	.word	0x00000ac6
    5344:	00000ac6 	.word	0x00000ac6
    5348:	00000ac6 	.word	0x00000ac6
    534c:	00000ac6 	.word	0x00000ac6
    5350:	00000ac6 	.word	0x00000ac6
    5354:	00000ac6 	.word	0x00000ac6
    5358:	00000ac6 	.word	0x00000ac6
    535c:	00000ac6 	.word	0x00000ac6
    5360:	00000ac6 	.word	0x00000ac6
    5364:	00000ac6 	.word	0x00000ac6
    5368:	00000ac6 	.word	0x00000ac6
    536c:	00000ac6 	.word	0x00000ac6
    5370:	00000ac6 	.word	0x00000ac6
    5374:	00000872 	.word	0x00000872
    5378:	00000ac6 	.word	0x00000ac6
    537c:	00000ac6 	.word	0x00000ac6
    5380:	00000ac6 	.word	0x00000ac6
    5384:	00000ac6 	.word	0x00000ac6
    5388:	00000ac6 	.word	0x00000ac6
    538c:	00000ac6 	.word	0x00000ac6
    5390:	00000ac6 	.word	0x00000ac6
    5394:	00000ac6 	.word	0x00000ac6
    5398:	00000ac6 	.word	0x00000ac6
    539c:	00000ac6 	.word	0x00000ac6
    53a0:	00000ac6 	.word	0x00000ac6
    53a4:	00000ac6 	.word	0x00000ac6
    53a8:	00000ac6 	.word	0x00000ac6
    53ac:	00000ac6 	.word	0x00000ac6
    53b0:	00000ac6 	.word	0x00000ac6
    53b4:	0000086a 	.word	0x0000086a
    53b8:	00000882 	.word	0x00000882
    53bc:	0000084a 	.word	0x0000084a
    53c0:	0000085a 	.word	0x0000085a
    53c4:	00000852 	.word	0x00000852
    53c8:	00000002 	.word	0x00000002
    53cc:	00000003 	.word	0x00000003
    53d0:	00000028 	.word	0x00000028
    53d4:	00000029 	.word	0x00000029
    53d8:	00000004 	.word	0x00000004
    53dc:	00000005 	.word	0x00000005
    53e0:	00000006 	.word	0x00000006
    53e4:	00000007 	.word	0x00000007
    53e8:	00000020 	.word	0x00000020
    53ec:	00000021 	.word	0x00000021
    53f0:	00000022 	.word	0x00000022
    53f4:	00000023 	.word	0x00000023
    53f8:	00000024 	.word	0x00000024
    53fc:	00000025 	.word	0x00000025
    5400:	00000026 	.word	0x00000026
    5404:	00000027 	.word	0x00000027
    5408:	00000008 	.word	0x00000008
    540c:	00000009 	.word	0x00000009
    5410:	0000000a 	.word	0x0000000a
    5414:	0000000b 	.word	0x0000000b
    5418:	00000d1c 	.word	0x00000d1c
    541c:	00000d1c 	.word	0x00000d1c
    5420:	00000cf8 	.word	0x00000cf8
    5424:	00000d1c 	.word	0x00000d1c
    5428:	00000cf8 	.word	0x00000cf8
    542c:	00000cde 	.word	0x00000cde
    5430:	00000cde 	.word	0x00000cde
    5434:	00000d1c 	.word	0x00000d1c
    5438:	00000d1c 	.word	0x00000d1c
    543c:	00000d1c 	.word	0x00000d1c
    5440:	00000d1c 	.word	0x00000d1c
    5444:	00000d1c 	.word	0x00000d1c
    5448:	00000d1c 	.word	0x00000d1c
    544c:	00000d1c 	.word	0x00000d1c
    5450:	00000d1c 	.word	0x00000d1c
    5454:	00000d1c 	.word	0x00000d1c
    5458:	00000d1c 	.word	0x00000d1c
    545c:	00000d1c 	.word	0x00000d1c
    5460:	00000d1c 	.word	0x00000d1c
    5464:	00000d1c 	.word	0x00000d1c
    5468:	00000d1c 	.word	0x00000d1c
    546c:	00000d1c 	.word	0x00000d1c
    5470:	00000d1c 	.word	0x00000d1c
    5474:	00000d1c 	.word	0x00000d1c
    5478:	00000d1c 	.word	0x00000d1c
    547c:	00000d1c 	.word	0x00000d1c
    5480:	00000d1c 	.word	0x00000d1c
    5484:	00000d1c 	.word	0x00000d1c
    5488:	00000d1c 	.word	0x00000d1c
    548c:	00000d1c 	.word	0x00000d1c
    5490:	00000d1c 	.word	0x00000d1c
    5494:	00000d1c 	.word	0x00000d1c
    5498:	00000d1c 	.word	0x00000d1c
    549c:	00000d1c 	.word	0x00000d1c
    54a0:	00000d1c 	.word	0x00000d1c
    54a4:	00000d1c 	.word	0x00000d1c
    54a8:	00000d1c 	.word	0x00000d1c
    54ac:	00000d1c 	.word	0x00000d1c
    54b0:	00000d1c 	.word	0x00000d1c
    54b4:	00000d1c 	.word	0x00000d1c
    54b8:	00000d1c 	.word	0x00000d1c
    54bc:	00000d1c 	.word	0x00000d1c
    54c0:	00000d1c 	.word	0x00000d1c
    54c4:	00000d1c 	.word	0x00000d1c
    54c8:	00000d1c 	.word	0x00000d1c
    54cc:	00000d1c 	.word	0x00000d1c
    54d0:	00000d1c 	.word	0x00000d1c
    54d4:	00000d1c 	.word	0x00000d1c
    54d8:	00000d1c 	.word	0x00000d1c
    54dc:	00000d1c 	.word	0x00000d1c
    54e0:	00000d1c 	.word	0x00000d1c
    54e4:	00000d1c 	.word	0x00000d1c
    54e8:	00000d1c 	.word	0x00000d1c
    54ec:	00000d1c 	.word	0x00000d1c
    54f0:	00000d1c 	.word	0x00000d1c
    54f4:	00000d1c 	.word	0x00000d1c
    54f8:	00000d1c 	.word	0x00000d1c
    54fc:	00000d1c 	.word	0x00000d1c
    5500:	00000d1c 	.word	0x00000d1c
    5504:	00000d1c 	.word	0x00000d1c
    5508:	00000d1c 	.word	0x00000d1c
    550c:	00000d1c 	.word	0x00000d1c
    5510:	00000d1c 	.word	0x00000d1c
    5514:	00000d1c 	.word	0x00000d1c
    5518:	00000cf8 	.word	0x00000cf8
    551c:	00000cf8 	.word	0x00000cf8
    5520:	00000d00 	.word	0x00000d00
    5524:	00000d00 	.word	0x00000d00
    5528:	00000d00 	.word	0x00000d00
    552c:	00000d00 	.word	0x00000d00
    5530:	42000800 	.word	0x42000800
    5534:	42000c00 	.word	0x42000c00
    5538:	42001000 	.word	0x42001000
    553c:	42001400 	.word	0x42001400
    5540:	42001800 	.word	0x42001800
    5544:	42001c00 	.word	0x42001c00
    5548:	00001972 	.word	0x00001972
    554c:	0000196e 	.word	0x0000196e
    5550:	0000196e 	.word	0x0000196e
    5554:	000019d0 	.word	0x000019d0
    5558:	000019d0 	.word	0x000019d0
    555c:	00001986 	.word	0x00001986
    5560:	00001978 	.word	0x00001978
    5564:	0000198c 	.word	0x0000198c
    5568:	000019be 	.word	0x000019be
    556c:	00001b10 	.word	0x00001b10
    5570:	00001af0 	.word	0x00001af0
    5574:	00001af0 	.word	0x00001af0
    5578:	00001b7c 	.word	0x00001b7c
    557c:	00001b02 	.word	0x00001b02
    5580:	00001b1e 	.word	0x00001b1e
    5584:	00001af4 	.word	0x00001af4
    5588:	00001b2c 	.word	0x00001b2c
    558c:	00001b6c 	.word	0x00001b6c

00005590 <_tcc_apbcmasks>:
    5590:	00000100 00000200 00000400              ............

0000559c <_tcc_cc_nums>:
    559c:	00020204                                ....

000055a0 <_tcc_gclk_ids>:
    55a0:	001b1a1a                                ....

000055a4 <_tcc_maxs>:
    55a4:	00ffffff 00ffffff 0000ffff              ............

000055b0 <_tcc_ow_nums>:
    55b0:	00020408                                ....

000055b4 <_tcc_intflag>:
    55b4:	00000001 00000002 00000004 00000008     ................
    55c4:	00001000 00002000 00004000 00008000     ..... ...@......
    55d4:	00010000 00020000 00040000 00080000     ................

000055e4 <tcc_interrupt_vectors.12442>:
    55e4:	0011100f 41744545 50524f4d 456d752e     ....EEtAMORP.umE
    55f4:	6f646144 696c2073 3a736f64 00000000     Dados lidos:....
    5604:	000a6425 006d6966 69766e65 00000065     %d..fim.envie...
    5614:	000036cc 0000358c 0000358c 00003588     .6...5...5...5..
    5624:	000036a4 000036a4 00003696 00003588     .6...6...6...5..
    5634:	000036a4 00003696 000036a4 00003588     .6...6...6...5..
    5644:	000036ac 000036ac 000036ac 000038b0     .6...6...6...8..

00005654 <_global_impure_ptr>:
    5654:	20000008                                ... 

00005658 <__sf_fake_stderr>:
	...

00005678 <__sf_fake_stdin>:
	...

00005698 <__sf_fake_stdout>:
	...
    56b8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    56c8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    56d8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    56e8:	00006665                                ef..

000056ec <_init>:
    56ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56f2:	bc08      	pop	{r3}
    56f4:	469e      	mov	lr, r3
    56f6:	4770      	bx	lr

000056f8 <__init_array_start>:
    56f8:	000000dd 	.word	0x000000dd

000056fc <_fini>:
    56fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5702:	bc08      	pop	{r3}
    5704:	469e      	mov	lr, r3
    5706:	4770      	bx	lr

00005708 <__fini_array_start>:
    5708:	000000b5 	.word	0x000000b5
